<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VelocityDb</name>
    </assembly>
    <members>
        <member name="T:VelocityDb.AllObjects`1">
            <summary>
            An object of this type is returned by <see cref="M:VelocityDb.Session.SessionBase.AllObjects``1(System.Boolean,System.Boolean)"/> or <see cref="M:VelocityDb.Database.AllObjects``1(System.Boolean)"/>
            </summary>
            <typeparam name="T">The object type we are looking for in the iteration (enumeration)</typeparam>
        </member>
        <member name="T:VelocityDb.AllObjects`1.AllObjectsIterator">
            <summary>
            Iterator of type <see cref="T:VelocityDb.AllObjects`1"/> 
            </summary>
        </member>
        <member name="M:VelocityDb.AllObjects`1.AllObjectsIterator.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.AllObjects`1.#ctor(VelocityDb.Session.SessionBase,System.Boolean,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="session">The active session</param>
            <param name="includeSubclasses">Also return instances of sub classes</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
        </member>
        <member name="M:VelocityDb.AllObjects`1.#ctor(VelocityDb.Database,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="db">The active db</param>
            <param name="includeSubclasses">Also return instances of sub classes</param>
        </member>
        <member name="M:VelocityDb.AllObjects`1.#ctor(VelocityDb.Collection.BTree.BTreeSet{`0})">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="bTree">A collection</param>
        </member>
        <member name="P:VelocityDb.AllObjects`1.Count">
            <summary>
            Get a count of instances of the given type
            </summary>
        </member>
        <member name="M:VelocityDb.AllObjects`1.GetEnumerator">
            <summary>
            Enumeration of all objects of type T
            </summary>
            <returns>The enumerator of T</returns>
        </member>
        <member name="M:VelocityDb.DatabaseIterator`1.ElementAt(System.Int64,VelocityDb.AllObjects{`0},System.Int64@,System.Boolean)">
            <summary>
            Gets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <param name="allObjects">object of type collection</param>
            <param name="atIndex">index reached within this database</param>
            <param name="reset">reset iterator</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="T:VelocityDb.AllObjectsExtension">
            <summary>
            A few extensions to improve performance of Linq for Objects queries
            </summary>
        </member>
        <member name="M:VelocityDb.AllObjectsExtension.Count``1(VelocityDb.AllObjects{``0})">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="T">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <returns>Size of the collection</returns>
        </member>
        <member name="M:VelocityDb.AllObjectsExtension.ElementAt``1(VelocityDb.AllObjects{``0},System.Int32)">
            <summary>
            Override LINQ for faster access
            </summary>
            <typeparam name="T">The type of element requested</typeparam>
            <param name="source">The source enumeration</param>
            <param name="index">The index requested</param>
            <returns>Element at requested index</returns>
        </member>
        <member name="M:VelocityDb.AllObjectsExtension.Skip``1(VelocityDb.AllObjects{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements. Overrides <see cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> for improved performance
            </summary>
            <typeparam name="TSource">The type of the elements of source</typeparam>
            <param name="source">Source collection</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="T:VelocityDb.AutoPlacement">
            <summary>
            This is the placement manager of objects persisted using <see cref="M:VelocityDb.Session.SessionBase.Persist(System.Object)"/>, 
            it is automatically created when the first object of a type is persisted. It is the first object in the database of each type mapped Database.
            </summary>
        </member>
        <member name="P:VelocityDb.AutoPlacement.Cache">
            <summary>
            We want to cache all AutoPlacement objects (small and frequently used)
            </summary>
        </member>
        <member name="P:VelocityDb.AutoPlacement.Count">
            <summary>
            Get the total number of created objects of this type
            </summary>
        </member>
        <member name="P:VelocityDb.AutoPlacement.Counter">
            <summary>
            Get the total number of created objects of this type
            </summary>
        </member>
        <member name="M:VelocityDb.AutoPlacement.IncrementTryDatabaseNumber">
            <summary>
            Moves to a new Database number used when placing (persisting) objects
            </summary>
            <returns>The Database number before incrementing</returns>
        </member>
        <member name="M:VelocityDb.AutoPlacement.Open(VelocityDb.Session.SessionBase,System.UInt32,System.UInt16,System.Boolean)">
            <summary>
            Tries to open <see cref="T:VelocityDb.AutoPlacement"/> object for a given database
            </summary>
            <param name="session">Active session</param>
            <param name="databaseNumber">Database number used by <see cref="T:System.Type"/> using this <see cref="T:VelocityDb.AutoPlacement"/></param>
            <param name="objectsPerPage">Requested max number of objects per page</param>
            <param name="usesAutoIncrement">Type for which <see cref="T:VelocityDb.AutoPlacement"/> is used must not use any auto increment fields or else parallel add of this object type is not possible with simple persist.</param>
            <returns><c>null</c> if doesn't exist, the persistent <see cref="T:VelocityDb.AutoPlacement"/> object if we able to read it from the <see cref="T:VelocityDb.Database"/> without a lock conflict, a transient <see cref="T:VelocityDb.AutoPlacement"/> if auto increment isn't used and we get a lock conflict; otherwise throw lock conflict exception</returns>
        </member>
        <member name="M:VelocityDb.AutoPlacement.Update(System.Boolean,System.Boolean)">
            <summary>
            Try to update if in a new update transaction ; otherwise don't retry
            </summary>
            <returns><c>true</c> if OK; otherwise <c>false</c></returns>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeByteArray">
            <summary>
            Wrapper object for a byte[] of data for comparing objects within a BTreeSet. Wrapper is used so that this data can be placed on a seperate <see cref="T:VelocityDb.Page"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeByteArray.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.Cache">
            <summary>
            We do want to cache this kind of object since they are likely to be frequently used.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.ObjectsPerPage">
            <summary>
            Place this type of of object on its own page
            </summary>
            <returns>
            The default maximum number of objects per page
            </returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.PagesPerDatabase">
            <summary>
            Use the max limit for this type
            </summary>
            <returns>The choosen limit</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeByteArray.AllowOtherTypesOnSamePage">
            <summary>
            We only want this type of object on any page containing this type so don't use pages with other type of objects when placing an object of this type
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeBase`2">
            <summary>
            Represents a collection of objects that is maintained in sorted order.
            </summary>
            <typeparam name="Key">The type of key objects in this BTree</typeparam>
            <typeparam name="Value">The type of value objects in a BTreeMap or BTreeMapOidShort</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.#ctor(VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Creates a new BTreeSet
            </summary>
            <param name="session">The session managing this object.</param>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
            <param name="isMap">True if collection is a map</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.AddToIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.ToDoBatchAddCount">
            <summary>
            Gets the number of objects that are not yet added to the collection
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.FlushTransients">
            <summary>
            Adds all queued up to be added objects after presorting them transiently
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.KeyPlacement">
            <summary>
            Set the key placement to be used for all key objects added to this. This setting is not persisted, it is mainly to be used with objects added with <see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.RemoveFromIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.InitNew(VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="session"></param>
            <param name="maxEntriesPerNode"></param>
            <param name="comparisonArraySize"></param>
            <param name="comparisonArrayIsCompleteKey"></param>
            <param name="isMap"></param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)">
            <summary>
            Adds an element to an array of to be added objects.
            The objects in this array are added when a call to<see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.FlushTransients"/> is triggered by multiple events such as calling <see cref="P:VelocityDb.Collection.BTree.BTreeBase`2.Count"/> and when collection is committed and/or flushed to disk or when the array is full.
            The array size is by default currently <see cref="P:VelocityDb.Session.SessionBase.BTreeAddFastTransientBatchSize"/> but you can get/set the desired size with <see cref="P:VelocityDb.Collection.BTree.BTreeBase`2.TransientBatchSize"/>
            </summary>
            <param name="key">The object being added</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Add(`0)">
            <summary>
            Adds an element to the set and returns a value that indicates if it was successfully added
            </summary>
            <param name="key">The object being added</param>
            <returns>
            <c>true</c> if an element was added; otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Add(`0,`1)">
            <summary>
            Add a key with an associated value to a BTreeMap
            </summary>
            <param name="key">The key added</param>
            <param name="value">The associated value added</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.AddWithComparisonArray(`0,System.Byte[])">
            <summary>
            Adds an element to the set and returns a value that indicates if it was successfully added
            </summary>
            <returns>
            <c>true</c> if an element was added; otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Add(`0,`1,System.Byte[])">
            <summary>
            Adds a key and value to the map and returns a value that indicates if it was successfully added
            </summary>
            <returns>
            <c>true</c> if an element was added; otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.TransientBatchSize">
            <summary>
            Get/Set the max batch size used in API such as <see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Contains(`0)">
            <summary>
            Determines whether the set contains a specific element.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Contains(`0,System.Byte[])">
            <summary>
            Determines whether the set contains a specific element.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Comparer">
            <summary>
            Gets the VelocityDbComparer(Of Key) that is used to determine the order of the items in the sorted set
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.GetAlternateComparer">
            <summary>
            If comparer isn't set then if Key type is string use SessionBase.DefaultStringComparer or ...
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.ComparisonArraySize">
            <summary>
            Gets the size of a comparison array used by this set.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.GetEnumerator">
            <summary>
            Enumerates all contained Key objects in sorted order
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the BTreeBase to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from BTreeBase. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Depth">
            <summary>
            Gets the depth of the BTreeSet
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.FlushIfPageFull">
            <summary>
            We don't want to flush other BTree pages while looking for a placement page
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.IsLeaf">
            <summary>
            Is the root a leaf node or not?
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Iterator">
            <summary>
            Initializes an iterator to find the keys of this set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.NodeIterator">
            <summary>
            Initializes an iterator to find the Nodes of this set
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.NodeSize">
            <summary>
            The size of the nodeList or the keyList (if depth is 1) of the root node.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.ObjectsPerPage">
            <summary>
            Limit to 1000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Remove(`0)">
            <summary>
            Removes a specified item from the set.
            </summary>
            <returns>
            <c>true</c> if an element was removed; otherwise, <c>false</c>. 
            </returns>  
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.Remove(`0,System.Byte[])">
            <summary>
            Removes a specified item from the set.
            </summary>
            <returns>
            <c>true</c> if an element was removed; otherwise, <c>false</c>. 
            </returns>  
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.TryGetKey(`0,`0@)">
            <summary>
            Gets the value matching persistent key with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.GetKeyId(`0)">
            <summary>
            When Key type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired. To avoid opening the object, a comparison array which is flagged as complete key must be used.
            </summary>
            <param name="key">Transient lookup object of type Key (which in this case must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <returns>The Id of the corresponding persistent object or 0 if not persistent or not implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.GetKeyId(`0,System.Byte[])">
            <summary>
            When Key type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired.  To avoid opening the object, a comparison array which is flagged as complete key must be used.
            </summary>
            <param name="key">Transient lookup object of type Key (which in this case must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <param name="comparisonArray">A byte containing bytes to be compared with.</param>
            <returns>The Id of the corresponding persistent object or 0 if not persistent or not implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.Session">
            <summary>
            Gets the session managing this object
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.TryGetKey(`0,System.Byte[],`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="comparisonArray">The comparison array associated with the key to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the BTreeBase(Of Key) contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeBase`2.UsesOidShort">
            <summary>
            Does this BTree use short object references (32 bit) for its internal references?
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeBase`2.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets up some transient variables
            </summary>
            <param name="session">The active session</param>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeInternal`2">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeInternal`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeInternal`2.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeInternalBase`2">
            <summary>
            Represents a collection of keys that is maintained in sorted order. Each key has an associated value. A persistent BTree references its contained objects by Oid instead of direct object references.
            This way, we will only open the referenced objects on demand which reduces memory usage and initial BTree load time. Exceptions are ValueType keys and values.
            </summary>
            <typeparam name="Key">The key type of this collection</typeparam>  
            <typeparam name="Value">The value type of this collection</typeparam>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeInternalBase`2.Cache">
            <summary>
            We do want to cache this kind of object since they are likly to be frequently used.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeInternalBase`2.NodeSize">
            <summary>
            Gets size of node (how many child nodes this node has)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeInternalBase`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeLeaf`2">
            <summary>
            Creates a leaf level node in the BTree
            </summary>
            <typeparam name="Key">Type of keys used</typeparam>
            <typeparam name="Value">Type of Values used</typeparam>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeaf`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeaf`2.Values">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.GetKey(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.GetValue(System.Int32,`1@)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.GetValueOid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeaf`2.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeaf`2.Cache">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeLeafBase`2">
            <summary>
            Internal class used with BTreeSet and BTreeMap
            </summary>
            <typeparam name="Key">key type</typeparam>
            <typeparam name="Value">value type</typeparam>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafBase`2.Cache">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafBase`2.Keys">
            <summary>
            Gets the keys for this leaf node
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafBase`2.Values">
            <summary>
            Gets the values for this leaf node
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafBase`2.KeysCount">
            <summary>
            Get the number of keys that are in use for this leaf node.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafBase`2.FlushIfPageFull">
            <summary>
            We don't want to flush other BTreeLeaf pages while looking for a placement page
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeLeafBase`2.GetKey(System.Int32)">
            <summary>
            Get a key at a given index
            </summary>
            <param name="index">index of Key to get</param>
            <returns>A key</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeLeafOidShort`2.Keys">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMap`2">
            <summary>
            Represents a collection of keys that is maintained in sorted order. Each key has an associated value. A persistent BTree references its contained objects by Oid instead of direct object references.
            This way, we will only open the referenced objects on demand which reduces memory usage and initial BTree load time. Exceptions are ValueType keys and values.
            </summary>
            <typeparam name="Key">The key type of objects in this BTreeMap</typeparam>  
            <typeparam name="Value">The value type of objects in this BTreeMap</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeSet
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMap`2.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.Unpersist(VelocityDb.Session.SessionBase)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMap`2.UsesOidShort">
            <summary>
            Does this BTree use short object references (32 bit) for its internal references? NO it does not.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the BTreeBase to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from BTreeBase. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMap`2.Keys">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMapBase`2">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.#ctor(VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.SetupTransientArrays(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.AddFast(`0,`1)">
            <summary>
            Adds an element to an array of to be added objects.
            The objects in this array are added when a call to<see cref="M:VelocityDb.Collection.BTree.BTreeMapBase`2.FlushTransients"/> is triggered by multiple events such as calling <see cref="P:VelocityDb.Collection.BTree.BTreeBase`2.Count"/> and when collection is commited and/or flushed to disk or when the array is full.
            The array size is by default currently <see cref="!:BTreeBase&lt;Key, Value&gt;.transientBatchBufferDefaultSize"/> but you can get/set the desired size with <see cref="P:VelocityDb.Collection.BTree.BTreeMapBase`2.TransientBatchSize"/>
            </summary>
            <param name="key">The object beeing added</param>
            <param name="value">The associated value added</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Key,Value}}#GetEnumerator">
            <summary>
            Enumerates all Key objects within the BTree
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.persistValue(`1)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.FlushTransients">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.TransientBatchSize">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.ValuePlacement">
            <summary>
            Set the value placement to be used for all value objects added to this. This setting is not persisted, it is mainly to be used with objects added with <see cref="M:VelocityDb.Collection.BTree.BTreeMapBase`2.AddFast(`0,`1)"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.GetEnumerator">
            <summary>
            Enumerates all contained Key objects in sorted order
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.Iterator">
            <summary>
            Initializes an iterator to find the keys and values of this map
            </summary>
            <returns>An iterator</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.System#Collections#Generic#IEnumerable{Key}#GetEnumerator">
            <summary>
            Enumerates all contained Key objects in sorted order
            </summary>
            <returns>The enumeration</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.EnumerateValues">
            <summary>
            Enumerates all contained Value objects in corresponding key sorted order
            </summary>
            <returns>The enumeration</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.Values">
            <summary>
            Gets a collection containing the values of this object
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.Last">
            <summary>
            Returns the last KeyValue object in this set.
            </summary>
            <returns>The last KeyValue in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.LastValue">
            <summary>
            Returns the last value in this map.
            </summary>
            <returns>The last value in the collection according to the sort order used</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapBase`2.Item(`0)">
            <summary>
            Given a lookup key, returns the corresponding value within the map or null if not found
            </summary>
            <param name="key">The lookup key</param>
            <returns>The value matching the lookup key or null if not found</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.TryGetValue(`0,System.Byte[],`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="comparisonArray">The comparison array associated with the key to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the BTreeBase(Of Key) contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.GetValueId(`0)">
            <summary>
            When Value type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired.
            </summary>
            <param name="key">Lookup object of type Key where Value must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <returns>The Id of the corresponding value object or 0 if not persistant or not mplementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.GetValueId(`0,System.Byte[])">
            <summary>
            When Value type implements <see cref="T:VelocityDb.IOptimizedPersistable"/>, you can use this function to get the Id of the persistent object instead of the entire object.
            Use for performance reasons in certain cases where reading the object isn't desired.
            </summary>
            <param name="key">Lookup object of type Key where Value must be implementing <see cref="T:VelocityDb.IOptimizedPersistable"/></param>
            <param name="comparisonArray">A byte containing bytes to be compared with.</param>
            <returns>The Id of the corresponding value object or 0 if not persistant or not mplementing <see cref="T:VelocityDb.IOptimizedPersistable"/></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMapIterator`2">
            <summary>
            Iterates all the elements of a BTreeSet
            </summary>
            <typeparam name="Key">The key type of this collection</typeparam>  
            <typeparam name="Value">The value type of this collection</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.Current">
            <summary>
            The iterator current Key object
            </summary>
            <returns>The Ket at the current iterator position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.CurrentKey">
            <summary>
            Returns the Key at the current iterator position
            </summary>
            <returns>Key at current position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.CurrentValue">
            <summary>
            Returns the Value at the current iterator position
            </summary>
            <returns>Value at current position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.GoTo(`0)">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set.
            </summary>
            <param name="key">The object to position iterator near</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.GoTo(`0,System.Byte[])">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set. This function is normally only used internally by VelocityDb.
            </summary>
            <param name="key">The object to position iterator near</param>
            <param name="comparisonArray">Contains bytes used for comparing with other arrays for NodeKeys within the set</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.GoToLast">
            <summary>
            Positions iterator at the last object in the set.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapIterator`2.IndexInTree">
            <summary>
            Gets the index of the current iterator element in the iterated collection
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.MovePrevious">
            <summary>
            Advances the enumerator to the previous element of the map.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if the enumerator has reached the position prior to the start of the map.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.Next">
            <summary>
            Positions the iterator at the next KeyValuePair in the map. Only use this one with nullable Key type.
            </summary>
            <returns>The next Key or null if we iterated past the the end of the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.Previous">
            <summary>
            Positions the iterator at the previous Key in the set
            </summary>
            <returns>The previous Key or null if we iterated to a postion before the first Key in the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapIterator`2.ReplaceValue(`1@)">
            <summary>
            Replaces a value in map
            </summary>
            <param name="value">the value to replace with</param>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeMapOidShort`2">
            <summary>Represents a collection of objects that is maintained in sorted order. Collection and all objects must be within a single Database (since references uses OidShort persistently)
            </summary>
            <typeparam name="Key">The object type of keys in this BTreeMapOidShort/></typeparam>
            <typeparam name="Value">The value type of values in this BTreeMapOidShort</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeMapOidShort
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapOidShort`2.UsesOidShort">
            <summary>
            Does this BTree use short object references (32 bit) for its internal references? YES it does.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeMapOidShort`2.Unpersist(VelocityDb.Session.SessionBase)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeMapOidShort`2.MaxNumberOfDatabases">
            <summary>
            Allow only a single database for this short id (32bit) references collection
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeNode">
            <summary>
            A BTree consists of a tree of nodes. Each BTree node has this class a base class.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeNode.#ctor">
            <summary>
            Default constructor used when creating BTree nodes
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeNodeIterator`2">
            <summary>
            
            </summary>
            <typeparam name="Key">The Type of key element contained</typeparam>
            <typeparam name="Value">The Type of value element contained</typeparam>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeSet`1">
            <summary>
            Represents a collection of objects that is maintained in sorted order. A persistent BTree references its contained objects by Oid instead of direct object references.
            This way, we will only open the referenced objects on demand which reduces memory usage and initial BTree load time.
            </summary>
            <typeparam name="Key">The key type of objects in this BTree</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeSet
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSet`1.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes all elements that are in a specified collection from the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.First">
            <summary>
            Returns the first Key object in this set.
            </summary>
            <returns>The first Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object and a specified collection share common elements.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object and other share at least one common element; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of the specified collection
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree is a subset of the IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree has all elements in common with IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object is equal to other; otherwise, false.</returns> 
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ICollection{Key}#CopyTo(`0[],System.Int32)">
            <summary> 
            Copy items in this hashset to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Iterator">
            <summary>
            Initializes an iterator to find the keys of this set
            </summary>
            <returns>iterator</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Last">
            <summary>
            Returns the last Key object in this set.
            </summary>
            <returns>The last Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains all elements that are present in either the current object or the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.Unpersist(VelocityDb.Session.SessionBase)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSet`1.UsesOidShort">
            <summary>
            Does this BTree use short object references (32 bit) for its internal references? NO it does not.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSet`1.System#Collections#Generic#ISet{Key}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.
            </summary> 
            <param name="other">the other enumerable</param>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeSetIterator`1">
            <summary>
            Iterates all the elements of a BTreeSet
            </summary>
            <typeparam name="Key">The type of the elements contained in the BTreeSet</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Current">
            <summary>
            The iterator current Key object
            </summary>
            <returns>The Ket at the current iterator position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.CurrentComparisonArray">
            <summary>
            The iterator current Key comparison array
            </summary>
            <returns>The Key comparison array at the current iterator position</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.GoTo(`0)">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set.
            </summary>
            <param name="key">The object to position iterator near</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.GoTo(`0,System.Byte[])">
            <summary>
            Positions iterator at Key object or where Key would be inserted if added to the set. This function is normally only used internally by VelocityDb.
            </summary>
            <param name="key">The object to position iterator near</param>
            <param name="comparisonArray">Contains bytes used for comparing with other arrays for NodeKeys within the set</param>
            <returns>true if an exact match was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.GoToLast">
            <summary>
            Positions iterator at the last object in the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.MovePrevious">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if the enumerator has reached the position prior to the the start of the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Next">
            <summary>
            Positions the iterator at the next Key in the set. Only use this one with nullable Key type.
            </summary>
            <returns>The next Key or null if we iterated past the the end of the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Previous">
            <summary>
            Positions the iterator at the previous Key in the set
            </summary>
            <returns>The previous Key or null if we iterated to a postion before the first Key in the set.</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.Remove">
            <summary>
            Not yet ready for public use (testing internally first)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetIterator`1.ElementAt(System.Int64)">
            <summary>
            Gets an item at a certain index
            </summary>
            <param name="i">the item index</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetIterator`1.IndexInTree">
            <summary>
            Gets the index of the current iterator element in the iterated collection
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.BTreeSetOidShort`1">
            <summary>Represents a collection of objects that is maintained in sorted order. Collection and all objects must be within a single Database (since references uses OidShort persistently)
            </summary>
            <typeparam name="Key">The object type of objects in this BTree, currently must be a subclass of <see cref="T:VelocityDb.OptimizedPersistable"/></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0},VelocityDb.Session.SessionBase,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates a new BTreeSetOidShort
            </summary>
            <param name="maxEntriesPerNode">Determines internal array and Page sizes</param>
            <param name="comparer">An object comparer. Try using CompareByField</param>
            <param name="session">The session managing this object</param>
            <param name="comparisonArraySize">Determine how many bytes to reserve for each object within a BTree node as a way to avoid actual object compares.</param>
            <param name="comparisonArrayIsCompleteKey">If the comparison array bytes are all that needs to be compared to determine ordering then set this to true; otherwise false</param>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.AddToIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.RemoveFromIndex(VelocityDb.IOptimizedPersistable)">
            <summary>
            Internal use only (need to be public due to obfuscation)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Comparer">
            <summary>
            Gets the VelocityDbComparer object that is used to compare Key objects.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.First">
            <summary>
            Returns the first Key object in this set.
            </summary>
            <returns>The first Key in the collection according to the sort order used</returns>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetOidShort`1.UsesOidShort">
            <summary>
            Does this BTree use short object references (32 bit) for its internal references? YES it does.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Iterator">
            <summary>
            Initializes an iterator to find the keys of this set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Last">
            <summary>
            Returns the last Key object in this set.
            </summary>
            <returns>The last Key in the collection according to the sort order used</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.BTree.BTreeSetOidShort`1.Unpersist(VelocityDb.Session.SessionBase)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. Also makes all other objects part of the BTree transient (but not the Key objects)
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BTree.BTreeSetOidShort`1.MaxNumberOfDatabases">
            <summary>
            Allow only a single database for this short id (32bit) references collection
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.BTree.Extensions.BTreeExtensions">
            <summary>
            A few extensions to improve performance of Linq for Objects queries
            We need your HELP to improve it to cover more use cases of queries!
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BTree.Extensions.BTreeExtensions.Count``1(VelocityDb.Collection.BTree.BTreeBase{``0,``0})">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="Key">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <returns>Size of the collection</returns>
        </member>
        <member name="M:VelocityDb.Collection.BTree.Extensions.BTreeExtensions.Where``1(VelocityDb.Collection.BTree.BTreeBase{``0,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Override to improve performance over IEnumerable LINQ extension
            </summary>
            <typeparam name="Key">key type</typeparam>
            <param name="sourceCollection">the collection</param>
            <param name="expr">an expression</param>
            <returns>Enumeration of collection where the expression evaluates to true</returns>
        </member>
        <member name="T:VelocityDb.Collection.BTree.Extensions.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection.BTree.Extensions</c> namespace contains a few extensions to improve performance of Linq for Objects queries.
            The same code can also be found in open source as <c>VelocityDBExtensions.Extensions.BTree</c>
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.BTree.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection.BTree</c> namespace contains classes for the VelocityDb BTrees optimized for persistent storage in VelocityDb databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.BlockingQueue`1">
            <summary>
            Implements a thread safe queue that blocks if attempting to read when 
            empty or write when full.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.#ctor">
            <summary>
            Constructs a new queue with a capacity of int.MaxValue.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Constructs a new queue with a specific capacity.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Writes an item onto the queue. If the queue has reached capacity, this
            operation will block.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.BlockingQueue`1.Dequeue">
            <summary>
            Reads an item off the queue. If there are no items on the queue, this
            operation will block.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BlockingQueue`1.IsEmpty">
            <summary>
            Check if any activity is ongoing
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.BlockingQueue`1.QueueLength">
            <summary>
            Check if any activity is ongoing
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.ByteArrayComparer">
            <summary>
            Compares two byte arrays
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.CompareByField`1">
            <summary>
            Use this predefined comparator whenever the sorting can be defined by specifying one or more fields of the sorted Key type.
            </summary>
            <typeparam name="Key">The type of object being compared (containing field(s) to compare)</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.#ctor(VelocityDb.Session.SessionBase,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="session">The managing session</param>
            <param name="doIdCompareIfEqual"></param>
            <param name="sortStringsByHashCode"></param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.#ctor(System.String,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Compares objects by comparing one or more data fields of type Key
            </summary>
            <param name="field">Primary field to use for comparison.</param>
            <param name="session">The managing session</param>
            <param name="doIdCompareIfEqual">Optionally compare Oid's when fields are equal between compared objects</param>
            <param name="sortStringsByHashCode">Sort string fields by hash code first then secondly as normal string compare</param>
            <param name="ascendingSort">If <see langword="true"/> (default), sort in ascending order, otherwise in descending order</param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.AddFieldToCompare(System.String,System.Boolean)">
            <summary>
            Add an additional field to compare when prior fields all are equal
            </summary>
            <param name="field">Field name of field to compare</param>
            <param name="ascendingSort">If <see langword="true"/> (default), sort in ascending order, otherwise in descending order</param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.#ctor(VelocityDb.Session.SessionBase)">
            <summary> 
            This special constructor is provided so that VelocityDb can instantiate the object after reading it from disk.  
            This is also the place to initialize transient variables of the object.
            </summary>
            <param name="session">The session managing this object.</param>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.CompareByField`1.AddOidCompare">
            <summary>
            Is the object Oid going to be compared when all the compared fields are equal?
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.CompareByField`1.OidPartOfComparisonBytes">
            <summary>
            Is the Oid (or OidShort) included in the comparison array bytes?
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.SetupFieldsToCompare">
            <summary>
            Initializes data used to compare fields as specified with this comparer.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.CompareField(VelocityDb.TypeInfo.DataMember,System.Object,System.Object,System.Int32)">
            <summary>
            For internal use. Compares a field value in two objects
            </summary>
            <param name="member">Field meta data</param>
            <param name="a">First object</param>
            <param name="b">Second object</param>
            <param name="fieldIndex">indicates which of the fields in this comparer</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.Compare(`0,`0)">
            <summary>
            Compares field(s) of Key a with field(s) of Key b
            </summary>
            <param name="a">the first object</param>
            <param name="b">the second object</param>
            <returns>-1 if a less than b, 0 if equal and 1 if a greater than b</returns>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.SetComparisonArrayFromObject(`0,System.Byte[],System.Boolean)">
            <summary>
            Sets a byte array equivalent to the field values to compare. Using this bypasses object compares, instead the byte arrays are compared byte by byte until a diff is found. If a byte diff isn't found then object compares may happen.
            Field types currently supported: byte, bool, Char, string, Int16, Int32, Int64, UInt16, UInt32, UInt64, Single, Double, DateTime, TimeSpan
            </summary>
            <param name="key">A key from which to extract a comparison byte array based on field(s) to compare</param>
            <param name="comparisonArray">The array to set bytes of</param>
            <param name="oidShort">If oidShort is true then only the page and slot numbers need to be compared if the comparator bytes includes any Oid bytes</param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByField`1.GetHashCode32(System.String)">
            <summary>
            Microsoft messed up the 64 bit version of GetHashCode. Use this original 32-bit version to get consistent <see cref="T:System.String"/> hash codes across 32 bit and 64 bit builds.
            See remarks in https://msdn.microsoft.com/en-us/library/system.string.gethashcode(v=vs.110).aspx
            </summary>
            <param name="s"><see cref="T:System.String"/> to compute hash code for.</param>
            <returns>A 32-bit hash code</returns>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.CompareByFieldIndex`1">
            <summary>
            Internal use for Index implementation
            </summary>
            <typeparam name="Key"></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByFieldIndex`1.InitNew(VelocityDb.TypeInfo.TypeVersion,System.String)">
            <summary>
            Internal Use
            </summary>
            <param name="tVersion"></param>
            <param name="fields"></param>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByFieldIndex`1.SetupFieldsToCompare">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.Comparer.CompareByFieldIndex`1.Compare(`0,`0)">
            <summary>
            Compares field(s) of Key a with field(s) of Key b
            </summary>
            <param name="a">the first object</param>
            <param name="b">the second object</param>
            <returns>-1 if a less than b, 0 if equal and 1 if a greater than b</returns>
        </member>
        <member name="T:VelocityDb.Collection.Comparer.HashCodeComparer`1">
            <summary>
            When the type of object being compared is a simple type like a string and you don't care about the sort order, then this comparator is what you want to use.
            It is similar to using a hash based collection but with less overhead (more compact)
            This kind of comparator especially shines when you create the BTreeSet/BTreeMap using a comparisonByteArray size of 4
            </summary>
            <typeparam name="T">The type of object to compare which must implement <see cref="T:System.IComparable"/></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.HashCodeComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.Comparer.HashCodeComparer`1.SetComparisonArrayFromObject(`0,System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.Comparer.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection.Comparer</c> namespace contains classes for the VelocityDb Comparer classes optimized for persistent storage in VelocityDb databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.Comparer.SimpleComparer`1">
            <summary>
            When the type of object being compared is a simple type like string, int, ..., this is the comparator you probably want to use.
            </summary>
            <typeparam name="T">The type of object to compare which must implement <see cref="T:System.IComparable"/></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.SimpleComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.Comparer.VelocityDbComparer`1">
            <summary>
            The base class of for comparing persistent objects. If the Key objects implements <see cref="T:System.IComparable"/> then the NodeKeys are compared that way, otherwise the <see cref="P:VelocityDb.OptimizedPersistable.Id"/> are compared
            </summary>
            <typeparam name="Key">The type of keys to compare</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.VelocityDbComparer`1.Compare(`0,`0)">
            <summary>
            If the Key objects implements <see cref="T:System.IComparable"/> then the NodeKeys are compared that way, otherwise the <see cref="P:VelocityDb.OptimizedPersistable.Id"/> are compared
            </summary>
            <param name="a">object a to compare</param>
            <param name="b">object b to compare with</param>
            <returns>-1 if a less than b, 0 if == and 1 if a is greater than b</returns>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.VelocityDbComparer`1.Compare(System.Byte[],System.Int32,System.Byte[],`0)">
            <summary>
            Internal use, compares comparison array bytes
            </summary>
            <param name="nodeComparisonArray">BTree node array of <see cref="T:System.Byte"/> for all current objects in node</param>
            <param name="index">Object index in node to compare with</param>
            <param name="comparisonArray">Bytes to compare with</param>
            <param name="key">Object compared with</param>
            <returns>-1 if this node bytes is less than comparisonArray bytes, 0 if equal, otherwise 1</returns>
        </member>
        <member name="M:VelocityDb.Collection.Comparer.VelocityDbComparer`1.SetComparisonArrayFromObject(`0,System.Byte[],System.Boolean)">
            <summary>
            Comparators that use comparison arrays need to override this function. Given a Key object, set the comparisonArray bytes
            </summary>
            <param name="key">The object from which to extract the comparison array bytes</param>
            <param name="comparisonArray">The array containing the object comparison bytes</param>
            <param name="oidShort">If oidShort is true then only the page and slot numbers need to be compared if the comparator bytes includes any Oid bytes</param>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.VelocityDbComparer`1.AddOidCompare">
            <summary>
            The default compare compares the object Oid's but subclasses may not want to do so as a last compare before declaring objects as being equal.
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.Comparer.VelocityDbComparer`1.OidPartOfComparisonBytes">
            <summary>
            Is the Oid part of the comparison bytes? If so, we don't need to do a separate Oid compare when Oid is part of compare
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Collection</c> namespace contains classes for the VelocityDb collections optimized for persistent storage in VelocityDb databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Collection.Range`1">
            <summary>
            An ordered pair of values, representing a segment.
            </summary>
            <typeparam name="T">Type of each of two values of range.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VelocityDb.Collection.Range`1"/> struct.
            </summary>
            <param name="min">The minimal value of segment.</param>
            <param name="max">The maximal value of segment.</param>
        </member>
        <member name="P:VelocityDb.Collection.Range`1.Min">
            <summary>
            Gets the minimal value of segment.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:VelocityDb.Collection.Range`1.Max">
            <summary>
            Gets the maximal value of segment.
            </summary>
            <value>The max.</value>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:VelocityDb.Collection.Range`1.IsEmpty">
            <summary>
            Gets a value indicating whether this range is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:VelocityDb.Collection.Range`1.Equals(VelocityDb.Collection.Range{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:VelocityDb.Collection.SortedMap`2">
            <summary>
            A sorted map
            </summary>
            <typeparam name="Key">Element key type</typeparam>
            <typeparam name="Value">Element value type</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.#ctor(System.Int32)">
            <summary>
            Constructs a new map
            </summary>
            <param name="capacity">Presizes internal list to a requested size</param>   
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new map with a given comparator
            </summary>
            <param name="comparer">The comaparator is referenced by a OidShort so it must exist within the same Database as the SortedMap</param>
        </member>
        <member name="P:VelocityDb.Collection.SortedMap`2.Comparer">
            <summary>
            Gets the Key comparator of the map
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMap`2.Keys">
            <summary>
            Gets the internal list of NodeKeys
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMap`2.Values">
            <summary>
            Gets the internal list of NodeValues
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMap`2.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.SortedMapBase`2">
            <summary>
            A base class for sorted maps.
            </summary>
            <typeparam name="Key">A key type for a map</typeparam>
            <typeparam name="Value">A value type for a map</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to a map
            </summary>
            <param name="keyValue">key and value being added</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Add(`0,`1)">
            <summary>
            Add to a map
            </summary>
            <param name="key">key added</param>
            <param name="value">value added</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Clear">
            <summary>
            Removes all keys and values from the map, leaving the map empty
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Check if map contains a key value pair
            </summary>
            <param name="keyValue"></param>
            <returns>true if map contains the key value pair</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.ContainsKey(`0)">
            <summary>
            Checks if map contains a key
            </summary>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapBase`2.Item(`0)">
            <summary>
            Gets or sets the value associated with a key
            </summary>
            <param name="key">The lookup key</param>
            <returns>The value associated with a key or throws KeyNotFoundException</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
             throw new NotImplementedException();
            </summary>
            <param name="array">The destination array</param>
            <param name="index">The start index</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.isEmpty">
            <summary>
            Check if map is empty
            </summary>
            <returns>true if map is empty; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Remove(`0)">
            <summary>
            Removes a key from the map (if found)
            </summary>
            <param name="key"></param>
            <returns>true if key was found and removed; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key value pair from the map (if found)
            </summary>
            <param name="keyValue"></param>
            <returns>true if key was found and removed; otherwise false</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapBase`2.Values">
            <summary>
            The map values as a list
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedMapOidShort`2">
            <summary>
            A sorted map where all keys and values and the map are contained within a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="Key">The Type of keys of this map</typeparam>
            <typeparam name="Value">The Type of values of this map</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapOidShort`2.#ctor">
            <summary>
            Constructs a new empty map
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapOidShort`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new empty map with a given object comparator
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapOidShort`2.Comparer">
            <summary>
            Gets comparator
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapOidShort`2.Keys">
            <summary>
            Gets the internal list of keys
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapOidShort`2.Values">
            <summary>
            Gets the internal list of values
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedMapValueOidShort`2">
            <summary>
            A sorted map where all values are located within a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapValueOidShort`2.#ctor">
            <summary>
            Constructs a new map with OidShort based values
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapValueOidShort`2.#ctor(System.Int32)">
            <summary>
            Constructs a new map with OidShort based values
            </summary>
            <param name="capacity">Presizes internal list to a requested size</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedMapValueOidShort`2.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new map with a given comparator
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapValueOidShort`2.Comparer">
            <summary>
            Gets the Key comparator of the map
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapValueOidShort`2.Keys">
            <summary>
            Gets the internal list of NodeKeys
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedMapValueOidShort`2.Values">
            <summary>
            Gets the internal list of NodeValues
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.SortedSetAny`1">
            <summary>
            A sorted set of objects of any Type (not just subclasses of <see cref="T:VelocityDb.OptimizedPersistable"/>
            </summary>
            <typeparam name="Key">The type of element for this list.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.#ctor">
            <summary>
            Constructs the set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ICollection{Key}#CopyTo(`0[],System.Int32)">
            <summary> 
            Copy items in this hashset to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.#ctor(System.Int32)">
            <summary>
            Constructs a set with a given initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a set with a given object comparator
            </summary>
            <param name="comparer">A comparator of Key objects</param>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetAny`1.Comparer">
            <summary>
            Gets the set comparator
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetAny`1.Keys">
            <summary>
            Gets the internal Key list of the set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains all elements that are present in either the current object or the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes all elements that are in a specified collection from the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.
            </summary> 
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree has all elements in common with IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object is equal to other; otherwise, false.</returns> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object and a specified collection share common elements.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object and other share at least one common element; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of the specified collection
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks whether this Tree is a subset of the IEnumerable other
            </summary>
            <param name="other">the other enumerable</param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">the other enumerable</param>
            <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"/> object is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ISet{Key}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"/> object so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">the other enumerable</param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetAny`1.System#Collections#Generic#ICollection{Key}#Add(`0)">
            <summary>
            Add item to this sorted set.
            </summary>
            <param name="item">item to add</param> 
        </member>
        <member name="T:VelocityDb.Collection.SortedSetBase`1">
            <summary>
            A base class for sorted sets
            </summary>
            <typeparam name="Key">A key type for a set.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Add(`0)">
            <summary>
            Add item to this sorted set.
            </summary>
            <param name="key">item to add</param> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Clear">
            <summary>
            Remove all items from this set. 
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Comparer">
            <summary> 
            Gets the IComparer that is used to determine the order of the items in the sorted set
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Contains(`0)">
            <summary>
            Checks if this sorted set contains the item 
            </summary>
            <param name="aKey">item to check for containment</param> 
            <returns>true if item contained; false if not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary> 
            Copy items in this sorted set to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
            <param name="count">number of elements to copy</param>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Count">
            <summary> 
            Number of elements in this SortedSetBase
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.IsEmpty">
            <summary>
            Returns true if 0 elements are in the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.IndexOf(`0)">
            <summary>
            Get the index of a given key
            </summary>
            <param name="aKey">The lookup key</param>
            <returns>The index of key or -1 if a matching key was not found.</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.Remove(`0)">
            <summary> 
            Remove item from this set
            </summary> 
            <param name="key">item to remove</param> 
            <returns>true if removed; false if not (i.e. if the item wasn't in the SortedSetBase)</returns>    
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.TryGetValue(`0,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the set contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Item(`0)">
            <summary>
            Given a lookup key, returns the corresponding key within the collection or null if not found
            </summary>
            <param name="key">The lookup key</param>
            <returns>The key matching the lookup key or null if not found</returns>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetBase`1.Keys">
            <summary>
            Gets the internal list of NodeKeys
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetBase`1.System#Collections#Generic#IEnumerable{Key}#GetEnumerator">
            <summary>
            Gets the keys of the set as an enumeration.
            </summary>
            <returns>Enumeration of the keys</returns>
        </member>
        <member name="T:VelocityDb.Collection.SortedSetOidShort`1">
            <summary>
            A sorted set where the set and all its elements are contained in a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="Key">The type of elements in the set.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetOidShort`1.#ctor">
            <summary>
            Constructs an OidShort based sorted set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetOidShort`1.#ctor(System.Int32)">
            <summary>
            Constructs an OidShort based sorted set with an initial presized capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:VelocityDb.Collection.SortedSetOidShort`1.#ctor(VelocityDb.Collection.Comparer.VelocityDbComparer{`0})">
            <summary>
            Constructs a new sorted set with a given object comparator.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetOidShort`1.Comparer">
            <summary>
            Gets the object comparator
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.SortedSetOidShort`1.Keys">
            <summary>
            Gets the internal sorted list of objects contained in the set.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.SortedWeakRefSet.TryGetValue(System.Object,VelocityDb.OptimizedPersistable@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbHashSet`1">
            <summary>
            A hash code based set
            </summary>
            <typeparam name="T">The object type of objects in the hashset</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor">
            <summary>
            Creates a hashset using a default equality comparer
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates hashset with a given equality comparer
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new hashset using the default equlaity comparer
            </summary>
            <param name="collection">Initial objects added to the hashset</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implementation Notes: 
            Since resizes are relatively expensive (require rehashing), this attempts to minimize 
            the need to resize by setting the initial capacity based on size of collection.
            </summary> 
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by serialization (but not by VelocityDb persistent serialization)
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add item to this hashset. This is the explicit implementation of the ICollection
            interface. The other Add method returns bool indicating whether item was added. 
            </summary>
            <param name="item">item to add</param> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Clear">
            <summary>
            Remove all items from this set. This clears the elements but not the underlying
            buckets and slots array. Follow this call by TrimExcess to release these. 
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Contains(`0)">
            <summary>
            Checks if this hashset contains the item 
            </summary>
            <param name="item">item to check for containment</param> 
            <returns>true if item contained; false if not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CopyTo(`0[],System.Int32)">
            <summary> 
            Copy items in this hashset to array, starting at arrayIndex
            </summary> 
            <param name="array">array to add items to</param> 
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Remove(`0)">
            <summary> 
            Remove item from this hashset
            </summary> 
            <param name="item">item to remove</param> 
            <returns>true if removed; false if not (i.e. if the item wasn't in the VelocityDbHashSet)</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.Count">
            <summary> 
            Number of elements in this hashset
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary> 
            Whether this is readonly
            </summary> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An Enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization usage other than VelocityDb serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Add(`0)">
            <summary> 
            Add item to this VelocityDbHashSet. Returns bool indicating whether item was added (won't be 
            added if already present)
            </summary> 
            <param name="item"></param>
            <returns>true if added, false if already present</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Take the union of this VelocityDbHashSet with other. Modifies this set.
            
            Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding
            multiple resizes ended up not being useful in practice; quickly gets to the
            point where it's a wasteful check.
            </summary> 
            <param name="other">enumerable with items to add</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Takes the intersection of this set with other. Modifies this set.
            
            Implementation Notes:
            We get better perf if other is a hashset using same equality comparer, because we
            get constant contains check in other. Resulting cost is O(n1) to iterate over this.
            
            If we can't go above route, iterate over the other and mark intersection by checking
            contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1. 
            
            Attempts to return early based on counts alone, using the property that the
            intersection of anything with the empty set is the empty set. 
            </summary>
            <param name="other">enumerable with items to add </param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove items in other from this set. Modifies this set.
            </summary> 
            <param name="other">enumerable with items to remove</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Takes symmetric difference (XOR) with other and this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to XOR</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Checks if this is a subset of other. 
            
             Implementation Notes: 
             The following properties are used up-front to avoid element-wise checks: 
             1. If this is the empty set, then it's a subset of anything, including the empty set
             2. If other has unique elements according to this equality comparer, and this has more 
             elements than other, then it can't be a subset.
            
             Furthermore, if other is a hashset using the same equality comparer, we can use a
             faster element-wise check. 
             </summary>
             <param name="other"></param> 
             <returns>true if this is a subset of other; false if not</returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Checks if this is a proper subset of other (i.e. strictly contained in) 
             
             Implementation Notes:
             The following properties are used up-front to avoid element-wise checks: 
             1. If this is the empty set, then it's a proper subset of a set that contains at least
             one element, but it's not a proper subset of the empty set.
             2. If other has unique elements according to this equality comparer, and this has >=
             the number of elements in other, then this can't be a proper subset. 
            
             Furthermore, if other is a hashset using the same equality comparer, we can use a 
             faster element-wise check. 
             </summary>
             <param name="other"></param> 
             <returns>true if this is a proper subset of other; false if not</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks if this is a superset of other
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If other has no elements (it's the empty set), then this is a superset, even if this
            is also the empty set. 
            2. If other has unique elements according to this equality comparer, and this has less
            than the number of elements in other, then this can't be a superset 
            
            </summary>
            <param name="other"></param> 
            <returns>true if this is a superset of other; false if not</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary> 
             Checks if this is a proper superset of other (i.e. other strictly contained in this)
            
             Implementation Notes:
             This is slightly more complicated than above because we have to keep track if there 
             was at least one element not contained in other.
             
             The following properties are used up-front to avoid element-wise checks: 
             1. If this is the empty set, then it can't be a proper superset of any set, even if
             other is the empty set. 
             2. If other is an empty set and this contains at least 1 element, then this is a proper
             superset.
             3. If other has unique elements according to this equality comparer, and other's count
             is greater than or equal to this count, then this can't be a proper superset 
            
             Furthermore, if other has unique elements according to this equality comparer, we can 
             use a faster element-wise check. 
             </summary>
             <param name="other"></param> 
             <returns>true if this is a proper superset of other; false if not</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.ObjectsPerPage">
            <summary>
            Limit to 1000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set overlaps other (i.e. they share at least one item) 
            </summary>
            <param name="other"></param> 
            <returns>true if these have at least one common element; false if disjoint</returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks if this and other contain the same elements. This is set equality: 
            duplicates and order are ignored
            </summary> 
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CopyTo(`0[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the target array. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List(Of T) to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List(Of T). The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the source List(Of T) at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.Comparer">
            <summary> 
            Gets the IEqualityComparer that is used to determine equality of keys for
            the VelocityDbHashSet. 
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.TrimExcess">
             <summary>
             Sets the capacity of this list to the size of the list (rounded up to nearest prime), 
             unless count is 0, in which case we release references.
            
             This method can be used to minimize a list's memory overhead once it is known that no
             new elements will be added to the list. To completely clear a list and release all 
             memory referenced by the list, execute the following statements:
             
             list.Clear(); 
             list.TrimExcess();
             </summary> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.CreateSetComparer">
            <summary>
            Used for deep equality of VelocityDbHashSet testing 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Initialize(System.Int32)">
            <summary>
            Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
            greater than or equal to capacity. 
            </summary>
            <param name="capacity"></param> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IncreaseCapacity">
            <summary> 
            Expand to new capacity. New capacity is next prime greater than or equal to suggested
            size. This is called when the underlying array is filled. This performs no 
            defragmentation, allowing faster execution; note that this is reasonable since
            AddIfNotPresent attempts to insert new elements in re-opened spots.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.AddIfNotPresent(`0)">
            <summary>
            Adds value to VelocityDbHashSet if not contained already
            Returns true if added and false if already present 
            </summary>
            <param name="value">value to find</param> 
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.ContainsAllElements(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Checks if this contains of other's elements. Iterates over other's elements and
            returns false as soon as it finds an element in other that's not in this. 
            Used by SupersetOf, ProperSupersetOf, and SetEquals.
            </summary>
            <param name="other"></param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IsSubsetOfHashSetWithSameEC(VelocityDb.Collection.VelocityDbHashSet{`0})">
             <summary>
             Implementation Notes: 
             If other is a hashset and is using same equality comparer, then checking subset is 
             faster. Simply check that each element in this is in other.
             
             Note: if other doesn't use same equality comparer, then Contains check is invalid,
             which is why callers must take are of this.
            
             If callers are concerned about whether this is a proper subset, they take care of that. 
            
             </summary> 
             <param name="other"></param> 
             <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.IntersectWithHashSetWithSameEC(VelocityDb.Collection.VelocityDbHashSet{`0})">
            <summary>
            If other is a hashset that uses same equality comparer, intersect is much faster
            because we can use other's Contains
            </summary> 
            <param name="other"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.InternalIndexOf(`0)">
            <summary>
            Used internally by set operations which have to rely on bit array marking. This is like 
            Contains but returns index in slots array.
            </summary> 
            <param name="item"></param> 
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.SymmetricExceptWithUniqueHashSet(VelocityDb.Collection.VelocityDbHashSet{`0})">
            <summary> 
            if other is a set, we can assume it doesn't have duplicate elements, so use this
            technique: if can't remove, then it wasn't present in this set, so add. 
            
            As with other methods, callers take care of ensuring that other is a hashset using the
            same equality comparer. 
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.AddOrGetLocation(`0,System.Int32@)">
            <summary> 
            Add if not already in hashset. Returns an out param indicating index where added. This 
            is used by SymmetricExcept because it needs to know the following things:
            - whether the item was already present in the collection or added from other 
            - where it's located (if already present, it will get marked for removal, otherwise
            marked for keeping)
            </summary>
            <param name="value"></param> 
            <param name="location"></param>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.ToArray">
            <summary> 
            Copies this to an array. Used for DebugView 
            </summary>
            <returns></returns> 
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.HashSetEquals(VelocityDb.Collection.VelocityDbHashSet{`0},VelocityDb.Collection.VelocityDbHashSet{`0},System.Collections.Generic.IEqualityComparer{`0})">
             <summary> 
             Internal method used for HashSetEqualityComparer. Compares set1 and set2 according
             to specified comparer. 
            
             Because items are hashed according to a specific equality comparer, we have to resort
             to n^2 search if they're using different equality comparers.
             </summary> 
             <param name="set1"></param>
             <param name="set2"></param> 
             <param name="comparer"></param> 
             <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.AreEqualityComparersEqual(VelocityDb.Collection.VelocityDbHashSet{`0},VelocityDb.Collection.VelocityDbHashSet{`0})">
            <summary> 
            Checks if equality comparers are equal. This is used for algorithms that can
            speed up if it knows the other item has unique elements. I.e. if they're using 
            different equality comparers, then uniqueness assumption between sets break. 
            </summary>
            <param name="set1"></param> 
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.InternalGetHashCode(`0)">
            <summary> 
            Workaround Comparers that throw ArgumentNullException for GetHashCode(null).
            </summary> 
            <param name="item"></param>
            <returns>hash code</returns>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator">
            <summary>
            Enumerates the elements of a VelocityDbHashSet(Of T).
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbHashSet`1.Enumerator.Current">
            <summary>
            The iterator current Key object
            </summary>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbList`1">
            <summary>
            A list with an Oid containing objects ordered by index.
            </summary>
            <typeparam name="T">The type of objects contained in this kind of list</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.#ctor">
            <summary>
            Constructs an empty list
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.#ctor(System.Int32)">
            <summary>
            Constructs a new list with a presized capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Add(`0)">
            <summary>
            Adds an item to a list
            </summary>
            <param name="item">item being added</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Add(`0,System.Int32)">
            <summary>
            Adds an item to a list and if array needs to grow to hold new item, it grows to a given max size.
            </summary>
            <param name="item">item being added</param>
            <param name="maxArraySize">the maximum size to use as internal array size</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.BinarySearch(`0,System.Boolean@)">
            <summary>
            Assuming list elements are sorted by default sort order, finds the position of a an element or position where it would belong
            </summary>
            <param name="aKey">Element to look for</param>
            <param name="isEqual">true if match found; otherwise false</param>
            <returns>Index position</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Clear">
            <summary>
            Removes all items from the list and frees the array
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Contains(`0)">
            <summary>
            Checks if an item is contained in the list
            </summary>
            <param name="item">the item to look for</param>
            <returns>true if item was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies list items to an array
            </summary>
            <param name="array">the array to copy to</param>
            <param name="arrayIndex">start array index of copy</param>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.Count">
            <summary>
            Number of items in list
            </summary>  
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates items in a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.IndexOf(`0)">
            <summary>
            Finds the first index of an item
            </summary>
            <param name="item">item to look for</param>
            <returns>-1 if item was not found or first index of item</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index
            </summary>
            <param name="index">insert at this index</param>
            <param name="item">the item being inserted</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Insert(System.Int32,`0,System.Int32)">
            <summary>
            Inserts an item at a specified index
            </summary>
            <param name="index">insert at this index</param>
            <param name="item">the item being inserted</param>
            <param name="maxArraySize">Restrict array growth to this maximum size (if array needs to grow)</param>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.ObjectsPerPage">
            <summary>
            Limit to 1000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Remove(`0)">
            <summary>
            Remove an item
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if item was found and removed; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index
            </summary>
            <param name="index">the index of the item to remove</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the given collection to the end of this list.
            </summary>
            <param name="collection">to be added</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of the given collection at a given index.
            </summary>
            <param name="index">start insert at this index</param>
            <param name="collection">to be inserted</param>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items
            </summary>
            <param name="index">start index</param>
            <param name="howMany">how many to remove</param>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies list to an array
            </summary>
            <param name="array">the array to copy to</param>
            <param name="arrayIndex">start index in array for copy</param>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.IsFixedSize">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.IsReadOnly">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.SyncRoot">
            <summary>
            Used for thread safety
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.VelocityDbList`1.IsSynchronized">
            <summary>
            Always false
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbList`1.Last">
            <summary>
            Get the value at the last position in the list
            </summary>
            <returns>The value at the last position in the list</returns>
        </member>
        <member name="T:VelocityDb.Collection.VelocityDbListOidShort`1">
            <summary>
            List of objects where list and all elements of a list are contained within a single <see cref="T:VelocityDb.Database"/>
            </summary>
            <typeparam name="T">The element type of a list.</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.VelocityDbListOidShort`1.#ctor(System.Int32)">
            <summary>
            Creates a new list with a presized capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:VelocityDb.Collection.WeakReferenceList`1">
            <summary>
            List with an Id containing object Ids ordered by index.
            </summary>
            <typeparam name="T">The type of objects contained in this kind of list</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.#ctor(System.Int32,VelocityDb.Session.SessionBase)">
            <summary>
            Constructs a new list with a presized capacity
            </summary>
            <param name="capacity">Reserve space for this many elements</param>
            <param name="session">Active session</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceList`1.ObjectsPerPage">
            <summary>
            Limit to 1000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.Open(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.WeakReferenceListBase`1">
            <summary>
            List with an Id containing object Ids ordered by index.
            </summary>
            <typeparam name="T">The type of objects contained in this kind of list</typeparam>
            <typeparam name="V">UInt32 (short id references or UInt64 (full id references)</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.#ctor(VelocityDb.Session.SessionBase)">
            <summary>
            Constructs a new list with a presized capacity
            </summary>
            <param name="capacity">Reserve space for this many elements</param>
            <param name="session">Active session</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Add(`0)">
            <summary>
            Adds an item to a list
            </summary>
            <param name="item">item being added</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.AddTransient(`0)">
            <summary>
            Temporary store non persisted objects in a seperate list untill collection is persisted.
            </summary>
            <param name="item">Transient object added</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.BinarySearch(`0,System.Boolean@)">
            <summary>
            Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="aKey">The object to locate</param>
            <param name="isEqual">True if match is found; otherwise false</param>
            <returns>The index of the object if found; otherwise index at which located would be located</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Clear">
            <summary>
            Removes all items from the list and frees the array
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.ClearAndUnpersistContainedObjects(VelocityDb.Session.SessionBase)">
            <summary>
            Removes all items from the list and unpersists all contained objects
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Contains(`0)">
            <summary>
            Checks if an item is contained in the list
            </summary>
            <param name="item">the item to look for</param>
            <returns>true if item was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies list items to an array
            </summary>
            <param name="array">the array to copy to</param>
            <param name="arrayIndex">start array index of copy</param>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.Count">
            <summary>
            Number of items in list
            </summary>  
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates items in a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.IndexOf(`0)">
            <summary>
            Finds the first index of an item
            </summary>
            <param name="item">item to look for</param>
            <returns>-1 if item was not found or first index of item</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index
            </summary>
            <param name="index">insert at this index</param>
            <param name="item">the item being inserted</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.InsertTransient(System.Int32,`0)">
            <summary>
            internal use
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Remove(`0)">
            <summary>
            Remove an item
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if item was found and removed; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index
            </summary>
            <param name="index">the index of the item to remove</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the given collection to the end of this list.
            </summary>
            <param name="collection">to be added</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of the given collection at a given index.
            </summary>
            <param name="index">start insert at this index</param>
            <param name="collection">to be inserted</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items
            </summary>
            <param name="index">start index</param>
            <param name="howMany">how many to remove</param>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies list to an array
            </summary>
            <param name="array">the array to copy to</param>
            <param name="arrayIndex">start index in array for copy</param>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.IsFixedSize">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.IsReadOnly">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.SyncRoot">
            <summary>
            Used for thread safety
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.IsSynchronized">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:VelocityDb.Collection.WeakReferenceListBase`1.Session">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Last">
            <summary>
            Get the value at the last position in the list
            </summary>
            <returns>The value at the last position in the list</returns>
        </member>
        <member name="M:VelocityDb.Collection.WeakReferenceListBase`1.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Collection.WeakShortReferenceList`1">
            <summary>
            List with an Id containing object short Ids (page and slot) ordered by index.
            </summary>
            <typeparam name="T">The type of objects contained in this kind of list</typeparam>
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.#ctor(System.Int32,VelocityDb.Session.SessionBase)">
            <summary>
            Constructs a new list with a presized capacity
            </summary>
            <param name="capacity">Reserve space for this many elements</param>
            <param name="session">Active session</param>
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.Clear">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.WeakShortReferenceList`1.Count">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.WeakShortReferenceList`1.ObjectsPerPage">
            <summary>
            Limit to 10000 per page (instead of default 40000)
            </summary>
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.Open(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Collection.WeakShortReferenceList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Collection.WeakShortReferenceList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Database">
            <summary>Represents a Database which corresponds to file system file.
            </summary>
        </member>
        <member name="M:VelocityDb.Database.#ctor(VelocityDb.Session.SessionBase)">
            <summary> 
            This special constructor is provided so that VelocityDb can instantiate the object after reading it from disk.  
            This is also the place to initialize transient variables of the object.
            </summary>
            <param name="session">The session managing this object.</param>
        </member>
        <member name="P:VelocityDb.Database.AllowOtherTypesOnSamePage">
            <summary>
            We want to be sure that the object representing a Database can share its page with other objects so override AllowOtherTypesOnSamePage and return true.
            </summary>
        </member>
        <member name="M:VelocityDb.Database.AllObjects``1(System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in this Database
            </summary>
            <typeparam name="T">The type of object we are looking for</typeparam>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <returns>The enumeration wrapper object</returns>
        </member>
        <member name="P:VelocityDb.Database.ObjectCachingDefaultPolicy">
            <summary>
            Default strategy for this <see cref="T:VelocityDb.Database"/>, defaults to <see cref="P:VelocityDb.Session.SessionBase.ObjectCachingDefaultPolicy"/>.
            (strategy is not persisted)
            </summary>
        </member>
        <member name="M:VelocityDb.Database.OfType(System.Type,System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in this Database."/>
            </summary>
            <param name="type">Type to look for</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
            <returns>The enumeration wrapper <see cref="M:VelocityDb.Database.OfType(System.Type,System.Boolean)"/>object</returns>
        </member>
        <member name="M:VelocityDb.Database.Bytes">
            <summary>
            Avoid using this one for now, internal use.
            </summary>
            <returns>The bytes of the Database</returns>
        </member>
        <member name="M:VelocityDb.Database.CachedPage(System.UInt16)">
            <summary>
            Try to retrieve a cached <see cref="T:VelocityDb.Page"/>
            </summary>
            <param name="pageNumber">Page number of page to look for in cache</param>
            <returns><see cref="T:VelocityDb.Page"/> if found in cache; otherwise null</returns>
        </member>
        <member name="P:VelocityDb.Database.CachedVerified">
            <summary>
            Setting this property to false will trigger a comparison of the cached version of the Database with the on disk version.
            Each new transaction also sets this property to false for all cached databases.
            You may alternatively use the session API ForceDatabaseCacheValidation() to trigger validation of all cached databases.
            Setting it to false when the Database has been updated in the current transaction is ignored.
            </summary>
        </member>
        <member name="M:VelocityDb.Database.CloneAs(System.UInt32)">
            <summary>
            Any Database that only uses OidShort references can be cloned without changing any of the internals of the Database. This function simply copies the Database file.
            It is the user's responsibility to know that only OidShort references are used within the Database or else such references will still keep the original Database number.
            </summary>
            <param name="otherAvaialbleDatabaseNumber">The desired Id of the Database clone</param>
            <returns>The Database clone</returns>
        </member>
        <member name="M:VelocityDb.Database.Equals(VelocityDb.Database)">
            <summary>
            Compares by version and page 0 offset
            </summary>
            <param name="other">Other <see cref="T:VelocityDb.Database"/> object</param>
            <returns><c>true</c> if matching; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.Database.Equals(VelocityDb.Database,VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Database.Dispose">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Database.GetHashCode(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Database.FileInfo">
            <summary>
            <see cref="T:System.IO.FileInfo"/> for this <see cref="T:VelocityDb.Database"/>, not set for ServerClientSession
            </summary>
        </member>
        <member name="P:VelocityDb.Database.FileStream">
            <summary>
            <see cref="T:System.IO.Stream"/> used for reading and writing this <see cref="T:VelocityDb.Database"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Database.GetEnumerator">
             <summary>
             Gets an enumerable sequence of all the pages in this database.
             </summary>
            <returns>Enumeration of pages in a Database</returns>
        </member>
        <member name="M:VelocityDb.Database.Pages(System.Boolean)">
             <summary>
             Gets an enumerable sequence of all the pages in this database.
             </summary>
             <param name="stubsOnly">Load page stub only?</param>
            <returns>Enumeration of pages in a Database</returns>
        </member>
        <member name="M:VelocityDb.Database.Close">
            <summary>
            Closes a
            </summary>
        </member>
        <member name="M:VelocityDb.Database.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Database.IsDeleted">
            <summary>
            Gets info about this Database about to be deleted or not.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.IsLocal">
             <summary>
             Gets info about this Database being on the local host or not.
             </summary>
            <returns>
            <c>true</c> if this Database is located on the local host; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:VelocityDb.Database.IsNew">
            <summary>
             Indicates if database was created in the current transactionNumber 
            </summary>
        </member>
        <member name="P:VelocityDb.Database.IsUpdated">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Database.Name">
            <summary>
            Optional name associated with a Database
            </summary>
        </member>
        <member name="P:VelocityDb.Database.NumberOfPages">
            <summary>
             Indicates how many pages this database contains.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.PageCache">
            <summary>
            Get page cache
            </summary>
        </member>
        <member name="P:VelocityDb.Database.PageCacheEnabled">
            <summary>
            Turns on or off <see cref="T:VelocityDb.Page"/> caching for this <see cref="T:VelocityDb.Database"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Database.HighestPageNumber">
            <summary>
             Indicates the highest tryPageNumber number currently in use for this database.
            </summary>
        </member>
        <member name="P:VelocityDb.Database.Location">
            <summary>
            The DatabaseLocation of this Database
            </summary>
        </member>
        <member name="M:VelocityDb.Database.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets up some transient data fields after a database has been read from disk
            </summary>
            <param name="session">The session managing this object.</param>
        </member>
        <member name="P:VelocityDb.Database.Session">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Database.ToString">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.DatabaseLocation">
            <summary>
            Represents a host and a directory in which a range of databases are stored. The range is a database number range.
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.DatabaseLocation.BackupOfOrForLocation">
            <summary>Gets a linked DatabaseLocation that is either backup of location or is the location being backup up which is decided by <see cref="P:VelocityDb.DatabaseLocation.IsBackupLocation"/></summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.CompressPages">
             <summary>
             Gets page compression info
             </summary>
            <returns>
            <c>true</c> if the databases in this location uses compression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.#ctor(System.String,System.UInt32,System.UInt32,VelocityDb.Session.SessionBase,VelocityDb.PageInfo.compressionKind,VelocityDb.PageInfo.encryptionKind,System.Boolean,VelocityDb.DatabaseLocation)">
            <summary>
            Creates a transient Database location. A transient DatabaseLocation is made persistent by <see cref="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)"/>
            </summary>
            <param name="hostAndDir"></param>
            <param name="dbStartNum"></param>
            <param name="dbEndNum"></param>
            <param name="session"></param>
            <param name="compressPages"></param>
            <param name="pageEncryption"></param>
            <param name="isAbackupLocation"></param>
            <param name="backupOfOrForLocation"></param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.#ctor(System.String,System.String,System.UInt32,System.UInt32,VelocityDb.Session.SessionBase)">
            <summary>
            Creates a transient Database location. A transient DatabaseLocation is made persistent by <see cref="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)"/>
            </summary>
            <param name="inHost">Hostname of the computer with the DatabaseLocation directory.</param>
            <param name="dir">The full path of the directory</param>
            <param name="dbStartNum">The first Database Id number for this location</param>
            <param name="dbEndNum">The last Database Id number for this location.</param>
            <param name="session">The active session used for creating the location.</param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.#ctor(System.String,System.String,System.UInt32,System.UInt32,VelocityDb.Session.SessionBase,VelocityDb.PageInfo.compressionKind,VelocityDb.PageInfo.encryptionKind,System.Boolean,VelocityDb.DatabaseLocation)">
            <summary>
            Creates a transient Database location. A transient DatabaseLocation is made persistent by <see cref="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)"/>
            </summary>
            <param name="inHost">Hostname of the computer with the DatabaseLocation directory.</param>
            <param name="dir">The full path of the directory</param>
            <param name="dbStartNum">The first Database Id number for this location</param>
            <param name="dbEndNum">The last Database Id number for this location.</param>
            <param name="session">The active session used for creating the location.</param>
            <param name="compressPages">Compress Database pages in this location?</param>
            <param name="pageEncryption">Specify what kind of Page encryption to use (if any)</param>
            <param name="isAbackupLocation">Is this location a backup location for another location?</param>
            <param name="backupOfOrForLocation">The other location being backed up or the location contain the backups</param>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.ContainsDatabase(System.UInt32,System.String)">
             <summary>
             Check if this location contains a particular <see cref="T:VelocityDb.Database"/>
             </summary>
             <param name="dbNum">The database number to look for</param>
             <param name="extension">File name extension/id</param>
            <returns>
            <c>true</c> if the location contains this database; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.ContainsNewDatabase(System.UInt32)">
             <summary>
             Check if this location contains a particular new database (not yet committed) <see cref="T:VelocityDb.Database"/>
             </summary>
             <param name="dbNum">The database number to look for</param>
            <returns>
            <c>true</c> if the location contains this new uncommitted database; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.DatabasePath(System.UInt32)">
             <summary>
             Get the full path to a <see cref="T:VelocityDb.Database"/>
             </summary>
             <param name="dbNum">The database number to look for</param>
            <returns>
             A <see cref="T:System.String"/> containing the full <see cref="T:VelocityDb.Database"/> path.
            </returns>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.DesKey">
            <summary>
            Gets the Des encryption key from a .des file in user Documents folder. (Environment.SpecialFolder.MyDocuments)
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.DirectoryPath">
            <summary>
            Gets the full path to the directory hosting databases
            </summary>
            <value>The path as a string</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.EndDatabaseNumber">
            <summary>
            Gets or sets the last database number within the range of databases for this location
            </summary>
            <value>The last database number within the range of databases for this location</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.HostName">
            <summary>
            Gets the host name of this database location
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.DatabaseLocation.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets the desKey field for desEncrypted locations by reading .des file in Environment.SpecialFolder.MyDocuments
            </summary>
            <param name="session">The active session</param>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.IsBackupLocation">
            <summary>
            Tells if this is a location used for backing up databases.
            </summary>
            <value>true if it is this location is used for backups; otherwise false.</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.PageEncryption">
            <summary>
            Gets the encryption kind attribute.
            </summary>
            <value>The <see cref="T:VelocityDb.PageInfo.encryptionKind"/> used in this location</value>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.StartDatabaseNumber">
            <summary>
            Gets and sets the start of the range of <see cref="T:VelocityDb.Database"/> numbers for this location.
            </summary>
            <value>The first database number within the range of databases for this location</value>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.Databases">
            <summary>
            Enumerates all Databases of this location
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.Cache">
            <summary>
            We do want to cache this kind of object since they are likely to be frequently used.
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.CompareTo(System.Object)">
            <summary>
            The default compare of two DatabaseLocation is by host name and directory
            </summary>
            <param name="obj">The location to compare with</param>
            <returns>-1 if this location is less than the other, 0 if equal, otherwise 1</returns>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.IsDefaultLocation">
            <summary>
            Is this the default <see cref="T:VelocityDb.DatabaseLocation"/> where <see cref="T:VelocityDb.Database"/> 0, 1, 2, 3, 4 may be stored?
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.IsLocal">
             <summary>
             Gets info about this location being on the local host or not.
             </summary>
            <returns>
            <c>true</c> if the location is located on the local host; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.DatabaseLocation.PlacementDatabaseNumber">
            <summary>
            Hint about where to persist DatabaseLocation
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.RsaPrivateXmlKey">
            <summary>
            The rsaPrivateXmlKey data field is not persisted but can be set and read with this property
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.RsaPublicXmlKey">
            <summary>
            The rsaPublicXmlKey data field is not persisted but can be set and read with this property
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.RsaSignature">
            <summary>
            The rsaSignature data field is not persisted but can be set and read with this property
            </summary>
        </member>
        <member name="P:VelocityDb.DatabaseLocation.Session">
            <summary>
            Gets the session managing this object
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocation.Update(System.Boolean,System.Boolean)">
            <summary>
            Update this object but don't update indexes since this object type never is part of an index
            </summary>
            <param name="disableFlush">If true, do not flush pages as a possible side affect</param>
            <param name="deleteFromIndices">If true, do delete object from indices before updates (need to be done if updating an indexed field)</param>
            <returns></returns>
        </member>
        <member name="T:VelocityDb.DatabaseLocations">
            <summary>
            Maintains collections of all existing <see cref="T:VelocityDb.DatabaseLocation"/>s.
            </summary>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.DatabaseLocations.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.DatabaseLocations.Default">
            <summary>
            Returns the <see cref="T:VelocityDb.DatabaseLocation"/> of the startup/system Databases.
            </summary>
            <returns>The default <see cref="T:VelocityDb.DatabaseLocation"/></returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.LocationForDb(System.UInt32)">
            <summary>
            Returns the <see cref="T:VelocityDb.DatabaseLocation"/> for which a Database belongs to.
            </summary>
            <param name="dbNum">The Database number to lookup location for</param>
            <returns>The looked up <see cref="T:VelocityDb.DatabaseLocation"/></returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.LocateDb(System.UInt32)">
            <summary>
            Returns the <see cref="T:VelocityDb.DatabaseLocation"/> for which a Database exists in.
            </summary>    
            <param name="dbNum">The Database number to lookup location for</param>
            <returns>The looked up <see cref="T:VelocityDb.DatabaseLocation"/> or null if the Database does not exist</returns>
        </member>
        <member name="M:VelocityDb.DatabaseLocations.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.DatabaseLocations.GetEnumerator">
            <summary>
            Enumerates all  <see cref="T:VelocityDb.DatabaseLocation"/>s
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:VelocityDb.TypeInfo.DataMember">
            <summary>
            Info about a data Field of a persistent object
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.Equals(VelocityDb.TypeInfo.DataMember)">
            <summary>
            Determines whether two <see cref="T:VelocityDb.TypeInfo.DataMember"/> instances are equal.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:VelocityDb.TypeInfo.DataMember"/> is equal to the current <see cref="T:VelocityDb.TypeInfo.DataMember"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.GetMemberValue(System.Object)">
            <summary>
            Gets the value of a member within a specified object
            </summary>
            <param name="obj">The object containing the field</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.SetMemberValue(System.Object,System.Object)">
            <summary>
            Sets the value of a field within an object
            </summary>
            <param name="obj">Object to set field value for</param>
            <param name="value">The field value</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.SetMemberValueWithPossibleConvert(System.Object,System.Object)">
            <summary>
            Internal Use and in VelocityDBExtensions
            </summary>
            <param name="obj">Object for which to set a value</param>
            <param name="value">Value to set to</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.DecodeToString(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Used by code generator.
            </summary>
            <param name="member">Bytes for an object field</param>
            <param name="offset">Offset into bytes</param>
            <param name="numberOfBytes">Length of field</param>
            <returns>A string representing the field value</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.Field">
            <summary>
            The managed field
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.FieldName">
            <summary>
            Name of managed field
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.FieldType">
            <summary>
            Declared <see cref="T:System.Type"/> of this field
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.HasId">
            <summary>
            Does this field have an Oid?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.WeakIOptimizedPersistableReference">
            <summary>
            Is this field a VelocityDb.WeakIOptimizedPersistableReference
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.GetField(System.Type)">
            <summary>
            Get <see cref="T:System.Reflection.FieldInfo"/> for the fields VelocityDB cares about
            </summary>
            <param name="t">The type we are requesting it for</param>
            <returns><see cref="T:System.Reflection.FieldInfo"/> for the fields VelocityDB cares about</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.DecodeToArray(System.Byte[],System.Type,System.Int32@,VelocityDb.IOptimizedPersistable,VelocityDb.Page,System.Boolean,System.Boolean,VelocityDb.TypeInfo.Schema,VelocityDb.Session.SessionBase,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Used by code generator for reading objects.
            </summary>
            <param name="memberBytes">Bytes of the object to be read</param>
            <param name="type">The <see cref="T:System.Type"/> of the array.</param>
            <param name="offset">Current offset into array of bytes</param>
            <param name="o">Object containing the array</param>
            <param name="page">The <see cref="T:VelocityDb.Page"/> that the array belongs to.</param>
            <param name="useOidShort">Use short id (page-slot) for object references</param>
            <param name="openRefs">Open referenced objects?</param>
            <param name="schema">The active <see cref="T:VelocityDb.TypeInfo.Schema"/></param>
            <param name="session">The active session to use</param>
            <param name="toLoadMembers">Keeps track of fields to load</param>
            <param name="graphDepth">Current graph depth</param>
            <param name="graphDepthToLoad">How many levels to load</param>
            <param name="primitivesOnly">Load only primitive fields></param>
            <returns>The decoded array</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            Sets up some transient fields
            </summary>
            <param name="session">The session managing this object.</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.isNull(System.Byte[],System.Int32)">
            <summary>
            Determines if given bytes represents null
            </summary>
            <param name="memberBytes">bytes to check</param>
            <param name="offset">offset into bytes</param>
            <returns><c>true</c> if bytes represent null; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.isShortOidNull(System.Byte[],System.Int32)">
            <summary>
            Determines if given bytes represent a null short reference
            </summary>
            <param name="memberBytes">bytes to check</param>
            <param name="offset">offset into bytes</param>
            <returns><c>true</c> if bytes represent null; otherwise <c>false</c></returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.IsGuid">
            <summary>
            <c>true</c> if field is of type <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.IsInterface">
            <summary>
            <c>true</c> if field is if type interface
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.GetTypeFromAnyAssemblyVersion(System.String)">
            <summary>
            Load type using <see cref="M:System.Type.GetType(System.String)"/>, and if fails, 
            attempt to load same type from an assembly by assembly name, 
            without specifying assembly version or any other part of the signature
            </summary>
            <param name="typeName">
            The assembly-qualified name of the type to get.
            See System.Type.AssemblyQualifiedName.
            If the type is in the currently executing assembly or in Mscorlib.dll, it 
            is sufficient to supply the type name qualified by its namespace.
            </param>
            <returns>A <see cref="T:System.Type"/> as decoded from <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.StringToType(System.String,VelocityDb.Session.SessionBase,System.Boolean@)">
            <summary>
            Used by code generator.
            </summary>
            <param name="typeAsString">A <see cref="T:System.Type"/> encoded as a <see cref="T:System.String"/>.</param>
            <param name="session">The active session</param>
            <param name="typeUpdated">Was a <see cref="T:System.Type"/> change detected?</param>
            <returns>Decoded <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.TypeToString(System.Type)">
            <summary>
            Converts a type to a string the way VelocityDB represents it internally
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.DataMember.ToString">
            <summary>
            Override to provide more internal info in browser
            </summary>
            <returns> "DataMember " + fieldName + " " + Oid.AsString(id)</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.DataMember.GetTypeCode">
            <summary>
            Get the type code for a field
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.Schema">
            <summary>
            Holds information about persistently stored types. Used internally by VelocityDb.
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Schema.s_bootupTypeCount">
            <summary>
            VelocityDB internal schema requires this many slots on schema page
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Schema.s_bootupTypeCountExpanded">
            <summary>
            Additional internal schema added Setember 9, 2017
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.LookupByType">
            <summary>
            For use in VelocityDBExtension DLL
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.WeakReferencedTypes">
            <summary>
            Info about what <see cref="T:System.Type"/>s another <see cref="T:System.Type"/> is referencing indirectly via object <see cref="P:VelocityDb.IOptimizedPersistable.Id"/> reference or other non explicit/weak reference.
            If your class persists objects with implicit/weak references to other persisted objects then register this facr by adding to this <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            Information provided by this <see cref="T:System.Collections.Generic.Dictionary`2"/> is primarily used by Database Manager Schema Connectivity Window.
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.Cache">
            <summary>
            Do cache CacheEnum.Yes
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.IsInternalType(System.UInt16)">
            <summary>
            Determine if a given slot is within the range of slots containing the build in/pre registered types
            </summary>
            <param name="slotNumber">Slot number to check</param>
            <returns><c>true</c> if slot is within the range of build in types; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.IsInternalType(VelocityDb.TypeInfo.VelocityDbType)">
            <summary>
            Determine if a given <see cref="T:VelocityDb.TypeInfo.VelocityDbType"/> is a build in/pre registered type
            </summary>
            <param name="velocityDbType"></param>
            <returns><c>true</c> if slot is within the range of build in types; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.IsExpandedInternalType(System.UInt16)">
            <summary>
            Includes additional build in types
            </summary>
            <param name="slotNumber">slot number of a <see cref="T:VelocityDb.TypeInfo.VelocityDbType"/> or <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> </param>
            <returns>true if internal; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.GetTypeVersion(System.UInt32,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Opens a <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> object
            </summary>
            <param name="pageSlot">Page and slot of <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> object</param>
            <param name="session">The active session</param>
            <param name="usePersistent">Use persisted boot up type or transient one</param>
            <returns>A type version</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.Schema.RegisterClass(System.Type,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean)">
            <summary>
            Register a type in the persistent schema
            </summary>
            <param name="type">A type to register</param>
            <param name="session">The active session</param>
            <param name="inFlush">Set to false if you want to avoid page flushing as a side affect</param>
            <param name="persistIt">Set to false if getting <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> for a lookup (object read)</param>
            <returns>An existing <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> or a new one</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.Schema.TypesByName">
            <summary>
            All persisted types ordered by <see cref="T:System.Type"/> name
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.TypeVersion">
            <summary>
            Contains info about a version of a <see cref="P:VelocityDb.TypeInfo.TypeVersion.VelocityDbType"/>. The info is used when reading/writing an object of the 
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.BaseShape">
            <summary>
            Get the base <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> or null if none exist
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.Cache">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.CountStart">
            <summary>
            Set where <see cref="P:VelocityDb.TypeInfo.TypeVersion.AutoIncrement"/> counter should start
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.Equals(VelocityDb.TypeInfo.TypeVersion)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.GetDataMemberList">
            <summary>
            Get a list of all <see cref="T:VelocityDb.TypeInfo.DataMember"/> of this type including base classes.
            </summary>
            <returns>A list of <see cref="T:VelocityDb.TypeInfo.DataMember"/> that this type or a base class contains</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.LoadMembers(VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Loads member fields from persistent storage
            </summary>
            <param name="toLoad">Object to load fields for</param>
            <param name="schema">The current schema</param>
            <param name="toLoadMembers">To be loaded fields list</param>
            <param name="graphDepth">Current graph depth loaded</param>
            <param name="graphDepthToLoad">Max graph depth to load fields for</param>
            <param name="session">The active session</param>
            <param name="primitivesOnly">If true, load only primitive values</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.ObjectBytesFromStrings(System.String[],System.String[],VelocityDb.Session.SessionBase,VelocityDb.TypeInfo.Schema)">
            <summary>
            Converts string representation of an object into VelocityDB object byte representation.
            </summary>
            <param name="members"></param>
            <param name="fieldNames"></param>
            <param name="session">Active session</param>
            <param name="schema">Current schema</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.DataMemberArray">
            <summary>
            Get an array of fields represented as <see cref="T:VelocityDb.TypeInfo.DataMember"/>. Does not include fields from base classes.
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.EncodeForCsv(System.Object,VelocityDb.PageInfo,VelocityDb.Session.SessionBase)">
            <summary>
            Encode a persistent object as a string for csv export
            </summary>
            <param name="obj">Object to be encoded</param>
            <param name="pageInfo">PageInfo for page where object lives</param>
            <param name="session">The active session</param>
            <returns>Object encoded as a string</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.PersistRefences(System.Object,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Persists references from an object
            </summary>
            <param name="obj">Object for which we want to persist all references</param>
            <param name="pageInfo">PageInfo for page containing the object for which we are persisting references</param>
            <param name="owner">Owner object of the object</param>
            <param name="session">Session managing the object</param>
            <param name="inFlush">Are we currently within a page flush</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsFixedSize">
            <summary>
            A type is fixed size if it only has fixed size fields
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsNullable">
            <summary>
            Is the managed type nullable ?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsString">
            <summary>
            Is this schema for type System.String ?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsISerializable">
            <summary>
            <c>true</c> if <see cref="T:System.Runtime.Serialization.ISerializable"/> otherwise, <c>false</c>. 
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.AutoIncrement">
            <summary>
            Does managed type or its base classes include an auto increment field?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.FieldIndex">
            <summary>
            Does managed type include a field index ?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.AnyFieldIndex">
            <summary>
            Does managed type or its base classes include a field index ?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.TypeIndex">
            <summary>
            Does managed type include a type index ?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.AnyTypeIndex">
            <summary>
            Does managed type or its base classes include a type index ?
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.IsValueType">
            <summary>
            Is managed type a ValueType ?
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.TotalShapeNumberOfBytes(VelocityDb.TypeInfo.Schema)">
            <summary>
            Get the total size of an object of the managed type (including base class fields)
            </summary>
            <param name="schema">The active schema</param>
            <returns>The total size of all fields or -1 if fields do not have a fixed size</returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.Type">
            <summary>
            Get the .NET type of the schema class
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.TypeVersion.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.TypeVersion.VelocityDbType">
            <summary>
            Get schema class object managing a particular .NET type.
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.VelocityDbType">
            <summary>
            Contains persistent info for a <see cref="P:VelocityDb.TypeInfo.VelocityDbType.Type"/>
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.VelocityDbType.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.VelocityDbType.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.TypeInfo.VelocityDbType.LastShape">
            <summary>
            Get the latest version of a schema class
            </summary>
            <returns>Current version of a schema class</returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.VelocityDbType.ToString">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.TypeInfo.VelocityDbType.TypeName">
            <summary>
            Name of <see cref="P:VelocityDb.TypeInfo.VelocityDbType.Type"/> that this meta object is managing.
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.VelocityDbType.TypeVersions">
            <summary>
            Initially one version exist, if class is modified and <see cref="M:VelocityDb.Session.SessionBase.UpdateClass(System.Type)"/> is called other versions can exist.
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.VelocityDbType.Type">
            <summary>
            Get the type of the schema managed class
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.VelocityDbType.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.TypeInfo.Association">
            <summary>
            A field attribute that controls what to do when deleting object and other end of association exist.
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.Association.UnpersistAction">
            <summary>
            Possible action/checks when unpersisting an object that uses this field attribute.
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Association.UnpersistAction.FailIfReversePersistent">
            <summary>
            Throw an exception if other side of association is persistent
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.Association.ReverseReferenceTypeEnum">
            <summary>
            What type of reference is used by reverse reference?
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Association.ReverseReferenceTypeEnum.ToOne">
            <summary>
            A direct reference.
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Association.ReverseReferenceTypeEnum.InSet">
            <summary>
            Reference is within a <see cref="T:System.Collections.Generic.ISet`1"/>
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Association.ReverseReferenceTypeEnum.InList">
            <summary>
            Reference is within a <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.Association.ReverseReferenceTypeEnum.InArray">
            <summary>
            Reference is within a <see cref="T:System.Array"/>
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.Association.#ctor(System.String,VelocityDb.TypeInfo.Association.ReverseReferenceTypeEnum)">
            <summary>
            
            </summary>
            <param name="reversePropertyName"></param>
            <param name="reverseReferenceType"></param>
        </member>
        <member name="M:VelocityDb.TypeInfo.Association.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="reversePropertyName"></param>
        </member>
        <member name="P:VelocityDb.TypeInfo.Association.ReversePropertyName">
            <summary>
            Name of property that retrieves other side of association
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.Association.ReverseReferenceType">
            <summary>
            Type of reference to this object at other end of association
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.AutoIncrement">
            <summary>
            A field attribute that enables a field to get a unique number for each persisted object of a certain type.
            This only works for objects persisted (directly or indirectly) with <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.AutoIncrement.#ctor(System.UInt16)">
            <summary>
            Use in class definition preceding a field declaration, i.e. [AutoIncrement(1)]
            </summary>
            <param name="start">The requested start number of the auto increment sequence. Default is 0 so that first persisted object is assigned number 1, second number 2 and so on.</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.AutoIncrement.Start">
            <summary>
            Gets the requested start number of the auto increment sequence
            </summary>
            <value>The <see cref="T:System.UInt64"/> sequence start number.</value>
        </member>
        <member name="T:VelocityDb.TypeInfo.CommonTypes">
            <summary>
            A cache of commonly instantiated <see cref="T:System.Type"/>s and their size in bytes 
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBoolean">
            <summary>
            Cache of typeof(<see cref="T:System.Boolean"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfBoolean">
            <summary>
            Cache of sizeof(<see cref="T:System.Boolean"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfString">
            <summary>
            Cache of typeof(<see cref="T:System.String"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfStringArray">
            <summary>
            Cache of typeof(<see cref="T:System.String"/>[])
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfByte">
            <summary>
            Cache of typeof(<see cref="T:System.Byte"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfByte">
            <summary>
            Cache of sizeof(<see cref="T:System.Byte"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfSByte">
            <summary>
            Cache of typeof(<see cref="T:System.SByte"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfSByte">
            <summary>
            Cache of sizeof(<see cref="T:System.SByte"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfChar">
            <summary>
            Cache of typeof(<see cref="T:System.Char"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfChar">
            <summary>
            Cache of sizeof(<see cref="T:System.Char"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfLong">
            <summary>
            Cache of typeof(<see cref="T:System.Int64"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfDecimal">
            <summary>
            Cache of typeof(<see cref="T:System.Decimal"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfDateTime">
            <summary>
            Cache of typeof(<see cref="T:System.DateTime"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfDecimal">
            <summary>
            Cache of sizeof(<see cref="T:System.Decimal"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfDouble">
            <summary>
            Cache of typeof(<see cref="T:System.Double"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfDouble">
            <summary>
            Cache of sizeof(<see cref="T:System.Double"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfInt16">
            <summary>
            Cache of typeof(<see cref="T:System.Int16"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfInt16">
            <summary>
            Cache of sizeof(<see cref="T:System.Int16"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfInt32">
            <summary>
            Cache of typeof(<see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfInt32">
            <summary>
            Cache of sizeof(<see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfInt64">
            <summary>
            Cache of typeof(<see cref="T:System.Int64"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfInt64">
            <summary>
            Cache of sizeof(<see cref="T:System.Int64"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfSingle">
            <summary>
            Cache of typeof(<see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfSingle">
            <summary>
            Cache of sizeof(<see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfUInt16">
            <summary>
            Cache of sizeof(<see cref="T:System.UInt16"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfUInt16">
            <summary>
            Cache of typeof(<see cref="T:System.UInt16"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfUInt32">
            <summary>
            Cache of typeof(<see cref="T:System.UInt32"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfUInt32">
            <summary>
            Cache of sizeof(<see cref="T:System.UInt32"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_sizeOfUInt64">
            <summary>
            Cache of sizeof(<see cref="T:System.UInt64"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfUInt64">
            <summary>
            Cache of typeof(<see cref="T:System.UInt64"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfArray">
            <summary>
            Cache of typeof(<see cref="T:System.Array"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfByteArray">
            <summary>
            Cache of typeof(<see cref="T:System.Byte"/>[])
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfTimeSpan">
            <summary>
            Cache of typeof(<see cref="T:System.TimeSpan"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfObject">
            <summary>
            Cache of typeof(<see cref="T:System.Object"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfObjectArray">
            <summary>
            Cache of typeof(<see cref="T:System.Object"/>[])
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfType">
            <summary>
            Cache of typeof(<see cref="T:System.Type"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfTypeArray">
            <summary>
            Cache of typeof(<see cref="T:System.Type"/>[])
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfGuid">
            <summary>
            Cache of typeof(<see cref="T:System.Guid"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfIOptimizedPersistable">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.IOptimizedPersistable"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfOptimizedPersistable">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.OptimizedPersistable"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfOnePerDatabase">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Indexing.OnePerDatabase"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfCompareByFieldIndex">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.Comparer.CompareByFieldIndex`1"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeSetOidShort">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeSetOidShort`1"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfISet">
            <summary>
            Cache of typeof(<see cref="T:System.Collections.Generic.ISet`1"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeSet">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeSet`1"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeLeaf">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeLeaf`2"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeLeafOidShort">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeLeafOidShort`2"/>)
            </summary>    
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeInternal">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeInternal`2"/>)
            </summary>   
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeInternalOidShort">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeInternalOidShort`2"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeLeafBase">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeLeafBase`2"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeMap">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeMap`2"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfBTreeMapOidShort">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.BTree.BTreeMapOidShort`2"/>)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfVelocityDbList">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.VelocityDbList`1"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfVelocityDbListOidShort">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.VelocityDbListOidShort`1"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfWeakReferenceList">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.WeakReferenceList`1"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfWeakShortReferenceList">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.WeakShortReferenceList`1"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfIndex">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Indexing.Index"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfValueType">
            <summary>
            Cache of typeof(<see cref="T:System.ValueType"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfVelocityDbComparer">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.Collection.Comparer.VelocityDbComparer`1"/>)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfSessionBase">
            <summary>
            Cache of typeof(SessionBase)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfList">
            <summary>
            Cache of typeof(List{})
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfArrayList">
            <summary>
            Cache of typeof(ArrayList)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfSchema">
            <summary>
            Cache of typeof(Schema)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfNullable">
            <summary>
            Cache of typeof(Nullable)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfOid">
            <summary>
            Cache of typeof(Oid)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfOidShort">
            <summary>
            Cache of typeof(OidShort)
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfWeakIOptimizedPersistableReferenceBase">
            <summary>
            Cache of typeof(WeakIOptimizedPersistableReferenceBase)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfWeakIOptimizedPersistableReference">
            <summary>
            Cache of typeof(WeakIOptimizedPersistableReference)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfObjectActivator">
            <summary>
            Cache of typeof(ObjectActivator)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfGetHandler">
            <summary>
            Cache of typeof(Func{object, object});
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfSetHandler">
            <summary>
            Cache of typeof(Action{object, object});
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfFunc">
            <summary>
            Cache of typeof(Func{})
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfDelegate">
            <summary>
            Cache of typeof(Delegate)
            </summary>    
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfUniqueConstraint">
            <summary>
            Cache of typeof(UniqueConstraint)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfIndexStringByHashCode">
            <summary>
            Cache of typeof(IndexStringByHashCode)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfUseOidShort">
            <summary>
            Cache of typeof(UseOidShort)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfEmbed">
            <summary>
            Cache of typeof(Embed)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfNonSerializedAttribute">
            <summary>
            Cache of typeof(NonSerializedAttribute)
            </summary>
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfTypeVersionArray">
            <summary>
            Cache of typeof(TypeVersion[])
            </summary> 
        </member>
        <member name="F:VelocityDb.TypeInfo.CommonTypes.s_typeOfDataForISerializable">
            <summary>
            Cache of typeof(<see cref="T:VelocityDb.TypeInfo.DataForISerializable"/>)
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VelocityDb.TypeInfo.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:VelocityDb.TypeInfo.Embed">
            <summary>
            Indicates that an object, initially only <see cref="T:System.Collections.Generic.List`1"/>,  should be embedded instead of referenced via an Id (Oid).
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.Embed.#ctor(System.Boolean)">
            <summary>
            Creates the attribute indicating store object embedded or not
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.Embed.EmbedBits">
            <summary>
            Create this objected embedded in parent object bits or create object with its own object Id
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.FieldAccessor">
            <summary>
            A field attribute that controls how many objects that will be placed on the same page as the object of the field.
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.FieldAccessor.#ctor(System.String)">
            <summary>
            Use in class definition preceding a property declaration, i.e. [FieldAccessor("myProtectedField")] where myProtectedField is the field name of the field returned by the property.
            </summary>
            <param name="fieldName">Name of field.</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.FieldAccessor.FieldName">
            <summary>
            Gets the field name of the field being accessed by the property
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:VelocityDb.TypeInfo.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.TypeInfo</c> namespace contains classes for Type information of persistently stored data
            </summary>      
        </member>
        <member name="T:VelocityDb.TypeInfo.ObjectsPerPage">
            <summary>
            A field attribute that controls how many objects that will be placed on the same page as the object of the field.
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.ObjectsPerPage.#ctor(System.UInt16)">
            <summary>
            Use in class definition preceding a field declaration, i.e. [ObjectsPerPage(1)]
            </summary>
            <param name="limitPerPage">The requested maximum number of objects on the page.</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.ObjectsPerPage.LimitPerPage">
            <summary>
            Gets the requested maximum number of objects on the page
            </summary>
            <value>The <see cref="T:System.UInt16"/> number of objects.</value>
        </member>
        <member name="T:VelocityDb.TypeInfo.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.Reference.#ctor(VelocityDb.IOptimizedPersistable,System.String)">
            <summary>
            
            </summary>
            <param name="aRef"></param>
            <param name="refFieldName"></param>
        </member>
        <member name="P:VelocityDb.TypeInfo.Reference.To">
            <summary>
            Persistent object being referenced
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.Reference.RefFieldName">
            <summary>
            Field name in To object that contains reference
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.Relation">
            <summary>
            The relation classes exist as an aid to maintain referential integrity, that is no dangling references (references to deleted objects).
            NOTE: These classes may change as they are still in a prototype phase. Let us know how we can improve them? Any ideas are appreciated!
            </summary>
        </member>
        <member name="T:VelocityDb.TypeInfo.RelationOneToOne`2">
            <summary>
            Use for one to one relations.
            </summary>
            <typeparam name="From">Type of From object</typeparam>
            <typeparam name="To">Type of To object</typeparam>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationOneToOne`2.#ctor(`0,`1,System.String,System.String,VelocityDb.Session.SessionBase)">
            <summary>
            Creates the relations between From and To objects
            </summary>
            <param name="from">From object</param>
            <param name="to">to object</param>
            <param name="fromFieldName">Field name in from object that references this relation</param>
            <param name="toFieldName">Field name in to object that references this relation</param>
            <param name="session">The active session</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToOne`2.RelatedFrom">
            <summary>
            Returns the From object
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToOne`2.RelatedTo">
            <summary>
            Returns the To object
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToOne`2.FromFieldName">
            <summary>
            Name of field referencing this object from From object
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToOne`2.ToFieldName">
            <summary>
            Name of field referencing this object from To object
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationOneToOne`2.SetupToFromAccessor(System.Type,System.Type,VelocityDb.Session.SessionBase)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="session"></param>
        </member>
        <member name="T:VelocityDb.TypeInfo.RelationOneToMany`2">
            <summary>
            Use for one to many (and many to one) relations.
            </summary>
            <typeparam name="From"><see cref="T:System.Type"/> of From object</typeparam>
            <typeparam name="To"><see cref="T:System.Type"/> of To object</typeparam>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationOneToMany`2.#ctor(System.String,VelocityDb.Session.SessionBase,`0,VelocityDb.Collection.BTree.BTreeSet{`1})">
            <summary>
            Creates the relations between From and To objects.
            </summary>
            <param name="fromFieldName">Field name in from object that references this relation</param>
            <param name="toFieldName">Field name in to object that references this relation</param>
            <param name="session">The active session</param>
            <param name="from">From object</param>
            <param name="to">Collection of To objects. If null, default <see cref="T:VelocityDb.Collection.BTree.BTreeSet`1"/> is created.</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationOneToMany`2.AddRelationTo(`1)">
            <summary>
            Adds a new relations to a To object. Added to "many" collection.
            </summary>
            <param name="to">To object to be added</param>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationOneToMany`2.RemoveRelationTo(`1)">
            <summary>
            Removes relation to a To object. Removed from "many" collection.
            </summary>
            <param name="to">To object to be removed.</param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToMany`2.RelatedFrom">
            <summary>
            Gets or sets the From object
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToMany`2.FromFieldName">
            <summary>
            Name of field referencing this object from From object
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationOneToMany`2.RelatedTo">
            <summary>
            Returns the To objects
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationOneToMany`2.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.TypeInfo.RelationManyToMany`2">
            <summary>
            Use for many to many relations
            </summary>
            <typeparam name="From">Type of From objects</typeparam>
            <typeparam name="To">Type of To objects</typeparam>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationManyToMany`2.#ctor(System.String,System.String,VelocityDb.Session.SessionBase,VelocityDb.Collection.BTree.BTreeSet{`0},VelocityDb.Collection.BTree.BTreeSet{`1})">
            <summary>
            Use for many to many relations
            </summary>
            <param name="fromFieldName">Field name in from object that references this relation</param>
            <param name="toFieldName">Field name in to object that references this relation</param>
            <param name="session">The active session</param>
            <param name="from">Collection of From objects. If null, default <see cref="T:VelocityDb.Collection.BTree.BTreeSet`1"/> is created.</param>
            <param name="to">Collection of To objects. If null, default  is created.</param>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationManyToMany`2.RelatedFrom">
            <summary>
            Returns the From objects
            </summary>
        </member>
        <member name="P:VelocityDb.TypeInfo.RelationManyToMany`2.RelatedTo">
            <summary>
            Returns the To objects
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.RelationManyToMany`2.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.TypeInfo.UseOidShort">
            <summary>
            Indicates that every field or selected fields of a serializable class should be referenced using a OidShort instead of a full Oid.
            This means that the referenced object is located in the same database as the object containing the reference.
            A ShortOid uses less space and references are not tied to a certain database number.
            </summary>
        </member>
        <member name="M:VelocityDb.TypeInfo.UseOidShort.#ctor">
            <summary>
            Creates the attribute indicating use of OidShort (page + page)
            </summary>
        </member>
        <member name="M:VelocityDb.FreeSpace.CompareTo(System.Object)">
            <summary>
            Compares objects using the object <see cref="P:VelocityDb.OptimizedPersistable.Id"/>
            </summary>
        </member>
        <member name="M:VelocityDb.FreeSpace.ToString">
             <summary>
             Displays class name plus object id
             </summary>
            <returns>
             A <see cref="T:System.String"/> containing class name, offset and size
            </returns>
        </member>
        <member name="T:VelocityDb.License">
            <summary>
            Contains a list of possible license attributes for licensing VelocityDb class library and server
            </summary>
        </member>
        <member name="F:VelocityDb.License.PlaceInDatabase">
            <summary>
            Hint about a Database location for this type of object.
            </summary>
        </member>
        <member name="F:VelocityDb.License.LicenseCheckDatabase">
            <summary>
            The Database number of the database containing a VelocityDb license(s)
            </summary>
        </member>
        <member name="M:VelocityDb.License.#ctor">
            <summary>
            Creates a new unrestricted license
            </summary>
        </member>
        <member name="M:VelocityDb.License.#ctor(System.String,System.UInt32,System.Int32)">
            <summary>
            Creates a new restricted license
            </summary>
            <param name="forHostName">Usage valid on this host only</param>
            <param name="forMaxNumberOfClients">Maximum number of server clients for which license is valid</param>
            <param name="validForHowManyDays">Restricts usage to this number of days from now</param>
        </member>
        <member name="M:VelocityDb.License.#ctor(System.String,System.UInt32,System.String,System.String,System.String,System.UInt32,System.DateTime,System.Int32,System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Creates a new restricted license
            </summary>
            <param name="customer">A string identifying the customer owning the license</param>
            <param name="customerId">The OidShort of the customer</param>
            <param name="forUserName">Usage valid on this user name</param>
            <param name="forHostName">Usage valid on this host only</param>
            <param name="forDomainName">Usage valid on this domain only</param>
            <param name="forMaxNumberOfClients">Maximum number of server clients for which license is valid</param>
            <param name="expireDate">License expiration time</param>
            <param name="versionMajor">Usage valid up to including this major version</param>
            <param name="versionMinor">Usage valid up to including this minor version</param>
            <param name="processorCount">Usage valid up to this number of processors</param>
            <param name="dateTimeCreated">DateTime of when license was originally created</param>
        </member>
        <member name="P:VelocityDb.License.AllowOtherTypesOnSamePage">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.License.DomainName">
            <summary>
            Gets the restricted domain name
            </summary>
        </member>
        <member name="P:VelocityDb.License.HostName">
            <summary>
            Gets the restricted host name
            </summary>
        </member>
        <member name="P:VelocityDb.License.DateTimeCreated">
            <summary>
            Gets the time of license creation.
            </summary>
        </member>
        <member name="P:VelocityDb.License.ExpireDate">
            <summary>
            Gets expire time.
            </summary>
        </member>
        <member name="P:VelocityDb.License.MaxNumberOfClients">
            <summary>
            Gets the maximum number of Server clients permitted by this license
            </summary>
        </member>
        <member name="P:VelocityDb.License.ObjectsPerPage">
            <summary>
            Store one License per Page
            </summary>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.License.ProcessorCount">
            <summary>
            Gets/sets maximum number of processors for which license is valid.
            </summary>
        </member>
        <member name="P:VelocityDb.License.UserName">
            <summary>
            Gets the user name restriction
            </summary>
        </member>
        <member name="P:VelocityDb.License.PlacementDatabaseNumber">
            <summary>
            Gets the preferred Database number for licenses
            </summary>
        </member>
        <member name="P:VelocityDb.License.MajorVersion">
            <summary>
            Gets/set the major version attribute of a license
            </summary>
        </member>
        <member name="P:VelocityDb.License.MinorVersion">
            <summary>
            Gets/set the minor version attribute of a license
            </summary>
        </member>
        <member name="T:VelocityDb.PageOffset">
            <summary>
            Internally Used within VelocityDB and its extensions
            </summary>
        </member>
        <member name="T:VelocityDb.Placement">
            <summary>
            This class is used when deciding where to place a new object persistently. 
            That is we have a choice of database number, page number and page number. 
            There is other ways to control the placement including <see cref="P:VelocityDb.OptimizedPersistable.ObjectsPerPage"/>, 
            <see cref="P:VelocityDb.OptimizedPersistable.PagesPerDatabase"/>,
            and it is also possible to override <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})"/>.
            </summary>
        </member>
        <member name="F:VelocityDb.Placement.DefaultPlacementDatabaseNumber">
            <summary>
            If no other Database number is selected when persisting an object then this number is choosen.
            </summary>
        </member>
        <member name="F:VelocityDb.Placement.DefaultPlacementPage">
            <summary>
            If no other Page number is selected when persisting an object then this number is choosen.
            </summary>
        </member>
        <member name="M:VelocityDb.Placement.#ctor(System.Boolean,VelocityDb.IOptimizedPersistable,System.UInt16,System.UInt16,System.Boolean,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Placement into same <see cref="T:VelocityDb.Database"/>
            </summary>
            <param name="persistRefs"></param>
            <param name="pObj"></param>
            <param name="objectsPerPage"></param>
            <param name="pagesPerDatabase"></param>
            <param name="tryOtherDatabaseIfLockConflict"></param>
            <param name="maxNumberOfDatabases"></param>
            <param name="allowOtherTypesOnSamePage"></param>
            <param name="flushFullPages"></param>
        </member>
        <member name="M:VelocityDb.Placement.#ctor(System.UInt32,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Creates a Placement used for choosing a place to persist objects
            </summary>
            <param name="db">Database number requested for placement</param>
            <param name="page">Page number requested for placement</param>
            <param name="slot">Slot number requested for placement</param>
            <param name="objectsPerPage">Limit the number of objects per page</param>
            <param name="pagesPerDatabase">Limit the number of pages per database</param>
            <param name="persistRefs">When persisting an object, shall references be persisted at the same time or later when flushing pages to disk</param>
            <param name="tryOtherDatabaseIfLockConflict">Is another Database acceptable</param>
            <param name="maxNumberOfDatabases">Maximum numner of databases to try for placement</param>
            <param name="allowOtherTypesOnSamePage">Is it OK to place object on a page which contains other types</param>
            <param name="flushFullPages">Is it OK toflush encounteted full pages?</param>
        </member>
        <member name="M:VelocityDb.Placement.#ctor(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,VelocityDb.IOptimizedPersistable,System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Creates a Placement used for choosing a place to persist objects
            </summary>
            <param name="session">The session being used</param>
            <param name="placementProviderObject">If persistent, placement uses thid objects db, page and slot as a atarting point for placements</param>
            <param name="objectToPlace">An object of the type we are going to persist with this placement object</param>
            <param name="persistRefs">Is the placement going to request that referenced objects also gets persisted?</param>
            <param name="maxNumberOfDatabases">Maximum numner of databases to try for placement</param>
            <param name="flushFullPages">Shall a detected full page be flushed if such page is found while persisting an object with this placement</param>
        </member>
        <member name="P:VelocityDb.Placement.TryDatabaseNumber">
            <summary>
            Gets the current Database number to try with first for object placement.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.EndDatabaseNumber">
            <summary>
            The last Database number acceptable for placement
            </summary>
        </member>
        <member name="M:VelocityDb.Placement.IncrementTryDatabaseNumber">
            <summary>
            Incremnts the Database number used when placing (persisting) objects
            </summary>
            <returns>The Database number before incrementing</returns>
        </member>
        <member name="P:VelocityDb.Placement.IsAutoPlacement">
            <summary>
            Is this an instance of AutoPlacement
            </summary>
        </member>
        <member name="M:VelocityDb.Placement.IncrementTryPageNumber">
            <summary>
            Increments the tryPageNumber by 1
            </summary>
            <returns>The tryPageNumber before the increment</returns>
        </member>
        <member name="M:VelocityDb.Placement.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Placement.AllowOtherTypesOnSamePage">
            <summary>
            Gets/sets permission to create multiple types on the same page.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.TryPageNumber">
            <summary>
            Gets/sets the page number to try with first when persisting a new object.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.MaxPagesPerDatabase">
            <summary>
            Gets/sets the limit on the number of pages per database.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.MaxObjectsPerPage">
            <summary>
            Gets/Sets the limit on how many objects to create on a single page.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.TrySlotNumber">
            <summary>
            Gets/sets the page number to try next when persisting an object.
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.StartDatabaseNumber">
            <summary>
            The first/original Database number used by this Placement
            </summary>
        </member>
        <member name="P:VelocityDb.Placement.StartPageNumber">
            <summary>
            The first/original Page number used by this Placement
            </summary>
        </member>
        <member name="T:VelocityDb.DataCache">
            <summary>
            Object maintains a list of pages accessed by a session, pages are removed from the list when there is not enough memory available. This makes such pages eligible for garbage collection while in list pages are prevented from being garbage collected.
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.MaximumMemoryUse">
            <summary>
            Maximum number of bytes to allow for this Process (reduces cached objects and pages when memory allocated reaches this soft limit)
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.AvailableRamMB">
            <summary>
            Current available memory in MB as calculated by using PerformanceCounter or current use relative to MaximumMemoryUse
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.PageCacheEnabled">
            <summary>
            Enable or disable page cache. In cases where pages are not going to be revisited, performance may be improved by disabling the page cache. In other cases leave the page cache enabled (the default)
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.MinimumAvailableMegaBytes">
            <summary>
            Decide the minimum amount of available memory before reducing page caching and flushing updated pages. Only used by 32-bit process.
            </summary>
        </member>
        <member name="M:VelocityDb.DataCache.Clear">
            <summary>
            Clear cache of cached pages
            </summary>
        </member>
        <member name="P:VelocityDb.DataCache.MemoryUsedByThisProcess">
            <summary>
            The amount of virtual memory, in bytes, allocated for this process.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.AlreadyInCommitException">
            <summary>
            Exception thrown when attempting to commit a transaction when we already are within transaction commit code.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.AlreadyInTransactionException">
            <summary>
            Exception thrown when attempting to start a transaction when an active transaction already exist.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.DatabaseAlreadyExistsException">
            <summary>
            Exception thrown when trying to create a <see cref="T:VelocityDb.Database"/> that already exist (file system file exist).
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.DatabaseDoesNotExistException">
            <summary>
            Exception thrown when the requested ><see cref="T:VelocityDb.Database"/> does not exist.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.DatabaseReadLockException">
            <summary>
            Exception thrown when a <see cref="T:VelocityDb.Database"/> level read lock failed.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.DesKeyMissingException">
            <summary>
            Exception thrown when an internal error was detected. This type of error is most likly due to a bug in VelocityDb.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.FieldDoesNotExistException">
            <summary>
            Exception thrown when specifying a field name that does not exist in the given class/struct.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.IndexDatabaseNotSpecifiedException">
            <summary>
            Exception thrown when attempting to open an in database index without specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.IndexDatabaseOrBTreeMissingException">
            <summary>
            Exception thrown when attempting to open an in database index without specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.IndexDatabaseSpecifiedForGlobalIndexException">
            <summary>
            Exception thrown when attempting to open a global index and specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.InternalErrorException">
            <summary>
            Exception thrown when an internal error was detected. This type of error is most likly due to a bug in VelocityDb.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.InTransactionException">
            <summary>
            Exception thrown when calling certain SessionBase api that requires that session IS NOT in an active transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.InUpdateTransactionException">
            <summary>
            Exception thrown when calling certain SessionBase api that requires that session IS NOT in an active update transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.InvalidChangeOfDatabaseLocation">
            <summary>
            Exception thrown when trying to do an invalid change of a <see cref="T:VelocityDb.DatabaseLocation"/>. It could be a change to the start database number that if permitted skips one or more other DatabaseLocations.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.InvalidChangeOfDefaultLocationException">
            <summary>
            Exception thrown when trying to do an invalid change of the startup <see cref="T:VelocityDb.DatabaseLocation"/>.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.MaxNumberOfDatabasesException">
            <summary>
            Exception thrown when trying to create a <see cref="T:VelocityDb.Database"/> but no more Database numbers are available. The Maximum Database number is <see cref="F:System.UInt32.MaxValue"/> or 13 if no valid license is found.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Session</c> namespace contains all exceptions that may be thrown by VelocityDB code.
            </summary>      
        </member>
        <member name="T:VelocityDb.Exceptions.NotInTransactionException">
            <summary>
            Exception thrown when trying to do persistent operations without first starting a transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.NoValidVelocityDBLicenseFoundException">
            <summary>
            Exception thrown when trying to add/update database schema and no valid VelocityDB license is found in license database (4.odb).
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.NullObjectException">
            <summary>
            Exception thrown when an object unexpectedly is null.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.ObjectDoesNotExistException">
            <summary>
            Exception thrown when the requested ><see cref="T:VelocityDb.IOptimizedPersistable"/> does not exist.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.ObjectNotInSameDatabaseAsOidShortCollectionException">
            <summary>
            Exception thrown when object is not in the same database as a ShortOid collection <see cref="T:VelocityDb.Database"/> failed.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.OpenDatabaseException">
            <summary>
            Exception thrown when openeing a <see cref="T:VelocityDb.Database"/> failed.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.OptimisticLockingFailed">
            <summary>
            Exception thrown when a optimistic locking failed due to another transcation having updated a Page or Database.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.PageDeadLockException">
            <summary>
            Exception thrown when a <see cref="T:VelocityDb.Page"/> level lock failed due to a deadlock with another transaction
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.PageDoesNotExistException">
            <summary>
            Exception thrown when the requested ><see cref="T:VelocityDb.Page"/> does not exist.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.PageReadLockException">
            <summary>
            Exception thrown when failing to get a <see cref="T:VelocityDb.Page"/> level read lock.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.PageUpdateLockException">
            <summary>
            Exception thrown when a <see cref="T:VelocityDb.Page"/> level update lock failed.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.PersistedObjectExcpectedException">
            <summary>
            Exception thrown when a persisted object wsa expected but was not.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.ReferentialIntegrityException">
            <summary>
            Exception thrown when an internal error was detected. This type of error is most likly due to a bug in VelocityDb.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.RequestedPlacementDatabaseNumberNotValidException">
            <summary>
            Exception thrown when a requested placement Database number is invalid.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.RequestedPlacementPageNumberNotValidException">
            <summary>
            Exception thrown when a requested placement Page number is invalid.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.SubscriptionsNotAvailableWithNoServerSessionException">
            <summary>
            Exception thrown when trying to use event subscription api with NON server session. Subscriptions require use of server.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.SystemDatabaseNotFoundWithReadonlyTransactionException">
            <summary>
            Exception thrown when a read only transaction try to open a non existing Database 0
            </summary>
        </member>
        <member name="M:VelocityDb.Exceptions.SystemDatabaseNotFoundWithReadonlyTransactionException.#ctor(System.String)">
            <summary>
            Use for unexpected events
            </summary>
            <param name="message">Describe the unexpected event</param>
        </member>
        <member name="T:VelocityDb.Exceptions.TryingToBeginReadOnlyTransactionWhileInUpdateTransactionException">
            <summary>
            Exception thrown when attempting to start a read only transaction while in an update transaction.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.TryingToDeleteDeletedDatabaseException">
            <summary>
            Exception thrown when attempting to delete a Database that already was deleted in the same transaction
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.UnexpectedException">
            <summary>
            Exception thrown when something unexpected happened and no specific exception exist for it.
            </summary>
        </member>
        <member name="M:VelocityDb.Exceptions.UnexpectedException.#ctor(System.String)">
            <summary>
            Use for unexpected events
            </summary>
            <param name="message">Describe the unexpected event</param>
        </member>
        <member name="T:VelocityDb.Exceptions.UniqueConstraintException">
            <summary>
            Exception thrown when attempting to open an in database index without specifying a database.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.UpdateLockFailedException">
            <summary>
            Exception thrown when an update lock failed.
            </summary>
        </member>
        <member name="T:VelocityDb.Exceptions.WeakIOptimizedPersistableReferenceMustBePersistentException">
            <summary>
            Exception thrown when a persisted object wsa expected but was not.
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.Index">
            <summary>
            Use only with <see cref="T:VelocityDb.IOptimizedPersistable"/> 
            See http://www.velocitydb.com/UserGuide.aspx#_Toc430849968
            </summary>
        </member>
        <member name="M:VelocityDb.Indexing.Index.#ctor">
            <summary>
            Index by default field which is <see cref="P:VelocityDb.IOptimizedPersistable.Id"/> 
            </summary>
        </member>
        <member name="M:VelocityDb.Indexing.Index.#ctor(System.String)">
            <summary>
            Create index by one or more field names separated by comma. First field is used first in lookups then when there is multiple matches, field 2 is used and so on.
            </summary>
            <param name="fieldNames">Field names in lookup order separated by comma.</param>
        </member>
        <member name="P:VelocityDb.Indexing.Index.FieldNames">
            <summary>
            Field names used by this index.
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.Indexes">
            <summary>
            Tracks all indexes in a federation
            </summary>
        </member>
        <member name="P:VelocityDb.Indexing.Indexes.PlacementDatabaseNumber">
            <summary>
            Hint about where to persist DatabaseLocation
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.IndexStringByHashCode">
            <summary>
             Sort string field by a computed hash instead of normal string ordering.
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.NamespaceDoc">
            <summary>    
            The <c>VelocityDB.Indexing</c> namespace contains classes for the VelocityDB indexing feature
            </summary>      
        </member>
        <member name="T:VelocityDb.Indexing.OnePerDatabase">
            <summary>
             Use this attribute if you want each index to contain objects of a single database, this type of index is stored within the same database as its indexed objects.
            </summary>
        </member>
        <member name="T:VelocityDb.Indexing.UniqueConstraint">
            <summary>
             Unique index values can be required by using the UniqueConstraint attribute
            </summary>
        </member>
        <member name="M:VelocityDb.Indexing.UniqueConstraint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:VelocityDb.Internal.KnownFolders">
            <summary>
            Class containing methods to retrieve specific file system paths.
            See https://www.codeproject.com/Articles/878605/Getting-all-Special-Folders-in-NET
            </summary>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.GetPath(VelocityDb.Internal.KnownFolder)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does not require the
            folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path could not be retrieved.</exception>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.GetPath(VelocityDb.Internal.KnownFolder,System.Boolean)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does not require the
            folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile template) will be used.
            This requires administrative rights.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path could not be retrieved.</exception>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.GetDefaultPath(VelocityDb.Internal.KnownFolder)">
            <summary>
            Gets the default path to the specified known folder. This does not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which default path will be returned.</param>
            <returns>The current (and possibly redirected) path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path could not be retrieved.</exception>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.GetDefaultPath(VelocityDb.Internal.KnownFolder,System.Boolean)">
            <summary>
            Gets the default path to the specified known folder. This does not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which default path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile template) will be used.
            This requires administrative rights.</param>
            <returns>The current (and possibly redirected) path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path could not be retrieved.</exception>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.Initialize(VelocityDb.Internal.KnownFolder)">
            <summary>
            Creates and initializes the known folder.
            </summary>
            <param name="knownFolder">The known folder which will be initialized.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the known folder could not be initialized.</exception>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.Initialize(VelocityDb.Internal.KnownFolder,System.Boolean)">
            <summary>
            Creates and initializes the known folder.
            </summary>
            <param name="knownFolder">The known folder which will be initialized.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile
                template) will be used. This requires administrative rights.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the known folder could not be initialized.</exception>
        </member>
        <member name="M:VelocityDb.Internal.KnownFolders.SHGetKnownFolderPath(System.Guid,System.UInt32,System.IntPtr,System.IntPtr@)">
            <summary>
            Retrieves the full path of a known folder identified by the folder's KnownFolderID.
            </summary>
            <param name="rfid">A KnownFolderID that identifies the folder.</param>
            <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or
            more of the KnownFolderFlag values.</param>
            <param name="hToken">An access token that represents a particular user. If this parameter is NULL, which is
            the most common usage, the function requests the known folder for the current user. Assigning a value of -1
            indicates the Default User. The default user profile is duplicated when any new user account is created.
            Note that access to the Default User folders requires administrator privileges.</param>
            <param name="ppszPath">When this method returns, contains the address of a string that specifies the path of
            the known folder. The returned path does not include a trailing backslash.</param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="T:VelocityDb.Internal.KnownFolder">
            <summary>
            Standard folders registered with the system. These folders are installed with Windows Vista and later operating
            systems, and a computer will have only folders appropriate to it installed.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.AccountPictures">
            <summary>
            The per-user Account Pictures folder. Introduced in Windows 8.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\AccountPictures&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.AdminTools">
            <summary>
            The per-user Administrative Tools folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs\Administrative Tools&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ApplicationShortcuts">
            <summary>
            The per-user Application Shortcuts folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Application Shortcuts&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CameraRoll">
            <summary>
            The per-user Camera Roll folder. Introduced in Windows 8.1.
            Defaults to &quot;.%USERPROFILE%\Pictures\Camera Roll&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CDBurning">
            <summary>
            The per-user Temporary Burn Folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Burn\Burn&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CommonAdminTools">
            <summary>
            The common Administrative Tools folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\Administrative Tools&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CommonOemLinks">
            <summary>
            The common OEM Links folder.
            Defaults to &quot;%ALLUSERSPROFILE%\OEM Links&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CommonPrograms">
            <summary>
            The common Programs folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CommonStartMenu">
            <summary>
            The common Start Menu folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CommonStartup">
            <summary>
            The common Startup folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\StartUp&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.CommonTemplates">
            <summary>
            The common Templates folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Templates&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Contacts">
            <summary>
            The per-user Contacts folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Contacts&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Cookies">
            <summary>
            The per-user Cookies folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Cookies&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Desktop">
            <summary>
            The per-user Desktop folder.
            Defaults to &quot;%USERPROFILE%\Desktop&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.DeviceMetadataStore">
            <summary>
            The common DeviceMetadataStore folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\DeviceMetadataStore&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Documents">
            <summary>
            The per-user Documents folder.
            Defaults to &quot;%USERPROFILE%\Documents&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.DocumentsLibrary">
            <summary>
            The per-user Documents library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Documents.library-ms&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Downloads">
            <summary>
            The per-user Downloads folder.
            Defaults to &quot;%USERPROFILE%\Downloads&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Favorites">
            <summary>
            The per-user Favorites folder.
            Defaults to &quot;%USERPROFILE%\Favorites&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Fonts">
            <summary>
            The fixed Fonts folder.
            Points to &quot;%WINDIR%\Fonts&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.GameTasks">
            <summary>
            The per-user GameExplorer folder. Introduced in Windows Vista.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\GameExplorer&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.History">
            <summary>
            The per-user History folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\History&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ImplicitAppShortcuts">
            <summary>
            The per-user ImplicitAppShortcuts folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned\ImplicitAppShortcuts&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.InternetCache">
            <summary>
            The per-user Temporary Internet Files folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Temporary Internet Files&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Libraries">
            <summary>
            The per-user Libraries folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Links">
            <summary>
            The per-user Links folder.
            Defaults to &quot;%USERPROFILE%\Links&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.LocalAppData">
            <summary>
            The per-user Local folder.
            Defaults to &quot;%LOCALAPPDATA%&quot; (&quot;%USERPROFILE%\AppData\Local&quot;)&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.LocalAppDataLow">
            <summary>
            The per-user LocalLow folder.
            Defaults to &quot;%USERPROFILE%\AppData\LocalLow&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.LocalizedResourcesDir">
            <summary>
            The fixed LocalizedResourcesDir folder.
            Points to &quot;%WINDIR%\resources\0409&quot; (code page).
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Music">
            <summary>
            The per-user Music folder.
            Defaults to &quot;%USERPROFILE%\Music&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.MusicLibrary">
            <summary>
            The per-user Music library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Music.library-ms&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.NetHood">
            <summary>
            The per-user Network Shortcuts folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Network Shortcuts&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.OriginalImages">
            <summary>
            The per-user Original Images folder. Introduced in Windows Vista.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows Photo Gallery\Original Images&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PhotoAlbums">
            <summary>
            The per-user Slide Shows folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Pictures\Slide Shows&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PicturesLibrary">
            <summary>
            The per-user Pictures library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Pictures.library-ms&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Pictures">
            <summary>
            The per-user Pictures folder.
            Defaults to &quot;%USERPROFILE%\Pictures&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Playlists">
            <summary>
            The per-user Playlists folder.
            Defaults to &quot;%USERPROFILE%\Music\Playlists&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PrintHood">
            <summary>
            The per-user Printer Shortcuts folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Printer Shortcuts&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Profile">
            <summary>
            The fixed user profile folder.
            Defaults to &quot;%USERPROFILE%&quot; (&quot;%SYSTEMDRIVE%\USERS\%USERNAME%&quot;)&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramData">
            <summary>
            The fixed ProgramData folder.
            Points to &quot;%ALLUSERSPROFILE%&quot; (&quot;%PROGRAMDATA%&quot;,
            &quot;%SYSTEMDRIVE%\ProgramData&quot;).
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramFiles">
            <summary>
            The fixed Program Files folder.
            This is the same as the ProgramFilesX86 known folder in 32-bit applications or the ProgramFilesX64 known
            folder in 64-bit applications.
            Points to %SYSTEMDRIVE%\Program Files on a 32-bit operating system or in 64-bit applications on a 64-bit
            operating system and to %SYSTEMDRIVE%\Program Files (x86) in 32-bit applications on a 64-bit operating
            system.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramFilesX64">
            <summary>
            The fixed Program Files folder (64-bit forced).
            This known folder is unsupported in 32-bit applications.
            Points to %SYSTEMDRIVE%\Program Files.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramFilesX86">
            <summary>
            The fixed Program Files folder (32-bit forced).
            This is the same as the ProgramFiles known folder in 32-bit applications.
            Points to &quot;%SYSTEMDRIVE%\Program Files&quot; on a 32-bit operating system and to 
            &quot;%SYSTEMDRIVE%\Program Files (x86)&quot; on a 64-bit operating system.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramFilesCommon">
            <summary>
            The fixed Common Files folder.
            This is the same as the ProgramFilesCommonX86 known folder in 32-bit applications or the
            ProgramFilesCommonX64 known folder in 64-bit applications.
            Points to&quot; %PROGRAMFILES%\Common Files&quot; on a 32-bit operating system or in 64-bit applications on
            a 64-bit operating system and to &quot;%PROGRAMFILES(X86)%\Common Files&quot; in 32-bit applications on a
            64-bit operating system.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramFilesCommonX64">
            <summary>
            The fixed Common Files folder (64-bit forced).
            This known folder is unsupported in 32-bit applications.
            Points to &quot;%PROGRAMFILES%\Common Files&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ProgramFilesCommonX86">
            <summary>
            The fixed Common Files folder (32-bit forced).
            This is the same as the ProgramFilesCommon known folder in 32-bit applications.
            Points to &quot;%PROGRAMFILES%\Common Files&quot; on a 32-bit operating system and to
            &quot;%PROGRAMFILES(X86)%\Common Files&quot; on a 64-bit operating system.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Programs">
            <summary>
            The per-user Programs folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Public">
            <summary>
            The fixed Public folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%&quot; (&quot;%SYSTEMDRIVE%\Users\Public)&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicDesktop">
            <summary>
            The common Public Desktop folder.
            Defaults to &quot;%PUBLIC%\Desktop&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicDocuments">
            <summary>
            The common Public Documents folder.
            Defaults to &quot;%PUBLIC%\Documents&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicDownloads">
            <summary>
            The common Public Downloads folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%\Downloads&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicGameTasks">
            <summary>
            The common GameExplorer folder. Introduced in Windows Vista.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\GameExplorer&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicLibraries">
            <summary>
            The common Libraries folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Libraries&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicMusic">
            <summary>
            The common Public Music folder.
            Defaults to &quot;%PUBLIC%\Music&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicPictures">
            <summary>
            The common Public Pictures folder.
            Defaults to &quot;%PUBLIC%\Pictures&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicRingtones">
            <summary>
            The common Ringtones folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Ringtones&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicUserTiles">
            <summary>
            The common Public Account Pictures folder. Introduced in Windows 8.
            Defaults to &quot;%PUBLIC%\AccountPictures&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.PublicVideos">
            <summary>
            The common Public Videos folder.
            Defaults to &quot;%PUBLIC%\Videos&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.QuickLaunch">
            <summary>
            The per-user Quick Launch folder.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Recent">
            <summary>
            The per-user Recent Items folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Recent&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.RecordedTVLibrary">
            <summary>
            The common Recorded TV library. Introduced in Windows 7.
            Defaults to &quot;%PUBLIC%\RecordedTV.library-ms&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.ResourceDir">
            <summary>
            The fixed Resources folder.
            Points to &quot;%WINDIR%\Resources&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Ringtones">
            <summary>
            The per-user Ringtones folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Ringtones&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.RoamingAppData">
            <summary>
            The per-user Roaming folder.
            Defaults to &quot;%APPDATA%&quot; (&quot;%USERPROFILE%\AppData\Roaming&quot;).
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.RoamedTileImages">
            <summary>
            The per-user RoamedTileImages folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\RoamedTileImages&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.RoamingTiles">
            <summary>
            The per-user RoamingTiles folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\RoamingTiles&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SampleMusic">
            <summary>
            The common Sample Music folder.
            Defaults to &quot;%PUBLIC%\Music\Sample Music&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SamplePictures">
            <summary>
            The common Sample Pictures folder.
            Defaults to &quot;%PUBLIC%\Pictures\Sample Pictures&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SamplePlaylists">
            <summary>
            The common Sample Playlists folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%\Music\Sample Playlists&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SampleVideos">
            <summary>
            The common Sample Videos folder.
            Defaults to &quot;%PUBLIC%\Videos\Sample Videos&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SavedGames">
            <summary>
            The per-user Saved Games folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Saved Games&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SavedSearches">
            <summary>
            The per-user Searches folder.
            Defaults to &quot;%USERPROFILE%\Searches&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Screenshots">
            <summary>
            The per-user Screenshots folder. Introduced in Windows 8.
            Defaults to &quot;%USERPROFILE%\Pictures\Screenshots&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SearchHistory">
            <summary>
            The per-user History folder. Introduced in Windows 8.1.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\History&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SearchTemplates">
            <summary>
            The per-user Templates folder. Introduced in Windows 8.1.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\Templates&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SendTo">
            <summary>
            The per-user SendTo folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\SendTo&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SidebarDefaultParts">
            <summary>
            The common Gadgets folder. Introduced in Windows 7.
            Defaults to &quot;%ProgramFiles%\Windows Sidebar\Gadgets&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SidebarParts">
            <summary>
            The per-user Gadgets folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows Sidebar\Gadgets&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SkyDrive">
            <summary>
            The per-user OneDrive folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SkyDriveCameraRoll">
            <summary>
            The per-user OneDrive Camera Roll folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Pictures\Camera Roll&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SkyDriveDocuments">
            <summary>
            The per-user OneDrive Documents folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Documents&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SkyDrivePictures">
            <summary>
            The per-user OneDrive Pictures folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Pictures&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.StartMenu">
            <summary>
            The per-user Start Menu folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Startup">
            <summary>
            The per-user Startup folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs\StartUp&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.System">
            <summary>
            The fixed System32 folder.
            This is the same as the SystemX86 known folder in 32-bit applications.
            Points to &quot;%WINDIR%\system32&quot; on 32-bit operating systems or in 64-bit applications on a 64-bit
            operating system and to &quot;%WINDIR%\syswow64&quot; in 32-bit applications on a 64-bit operating system.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.SystemX86">
            <summary>
            The fixed System32 folder (32-bit forced).
            This is the same as the System known folder in 32-bit applications.
            Points to &quot;%WINDIR%\syswow64&quot; in 64-bit applications or in 32-bit applications on a 64-bit
            operating system and to &quot;%WINDIR%\system32&quot; on 32-bit operating systems.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Templates">
            <summary>
            The per-user Templates folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Templates&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.UserPinned">
            <summary>
            The per-user User Pinned folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.UserProfiles">
            <summary>
            The fixed Users folder. Introduced in Windows Vista.
            Points to &quot;%SYSTEMDRIVE%\Users&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.UserProgramFiles">
            <summary>
            The per-user Programs folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Programs.&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.UserProgramFilesCommon">
            <summary>
            The per-user common Programs folder. INtroduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Programs\Common&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Videos">
            <summary>
            The per-user Videos folder.
            Defaults to &quot;%USERPROFILE%\Videos&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.VideosLibrary">
            <summary>
            The per-user Videos library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Videos.library-ms&quot;.
            </summary>
        </member>
        <member name="F:VelocityDb.Internal.KnownFolder.Windows">
            <summary>
            The fixed Windows folder.
            Points to &quot;%WINDIR%&quot;.
            </summary>
        </member>
        <member name="T:VelocityDb.Internal.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Session</c> namespace contains VelocityDB internal/private types
            </summary>      
        </member>
        <member name="P:VelocityDb.Internal.PageSlotsWeak.Item(System.UInt16)">
            <summary>
            Use only for replacing values when cloning
            </summary>
            <param name="slotNumber"></param>
            <returns></returns>
        </member>
        <member name="T:VelocityDb.CacheEnum">
            <summary>
            Choices for object caching
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.No">
            <summary>
            Do not cache
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.Yes">
            <summary>
            Always cache
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.is64Bit">
            <summary>
            Cache if running as 64 bit process
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.RamAvailable5Gb">
            <summary>
            Cache if at least 5GB memory is available
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.RamAvailable10Gb">
            <summary>
            Cache if at least 10GB memory is available
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.RamAvailable20Gb">
            <summary>
            Cache if at least 20GB memory is available
            </summary>
        </member>
        <member name="F:VelocityDb.CacheEnum.Available100Gb">
            <summary>
            Cache if at least 100GB memory is available
            </summary>
        </member>
        <member name="T:VelocityDb.OpFlags">
            <summary>
            Flag bits for a persistent object
            </summary>
        </member>
        <member name="F:VelocityDb.OpFlags.IsUpdated">
            <summary>
            Object is updated
            </summary>
        </member>
        <member name="F:VelocityDb.OpFlags.MembersLoaded">
            <summary>
            All members have been loaded
            </summary>
        </member>
        <member name="F:VelocityDb.OpFlags.RemovedFromIndices">
            <summary>
            Call to Update() removed object from indices. If <see cref="M:VelocityDb.Session.SessionBase.UpdateObject(VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/> was used with 3rd parameter false, object is not removed from indices (flag value set accordingly)
            </summary>
        </member>
        <member name="T:VelocityDb.IOptimizedPersistable">
            <summary>
            add optimized persistence by implementing this interface. We provide <see cref="T:VelocityDb.OptimizedPersistable"/> as a base class that implements this interface.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.AllowOtherTypesOnSamePage">
            <summary>
            By default true but override as returning false so that this type of objects isn't sharing pages with other type of objects.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.Cache">
            <summary>
            By default, the an object cache is determined by a <see cref="T:VelocityDb.Session.SessionBase"/> constructor parameter but certain types of objects may be re opened more frequently than others, for such types override this to return a value.
            Caching objects this way can cause out of date object references to stay active due to lacking code to invalidate a cached object when referenced objects are replaced. 
            We will add this automatic invalidation as soon as possible but for now use caution when caching objects. Caching objects that does not strongly reference other objects is OK to do.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.FlushIfPageFull">
            <summary>
            By default we flush (write) any updated page we find when looking for an object placement page and the page is considered full (depends on how many objects we permit/page)
            </summary>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.FlushTransients">
            <summary>
            Flushes batched up objects such as objects added with <see cref="M:VelocityDb.Collection.BTree.BTreeBase`2.AddFast(`0)"/> 
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.Id">
            <summary>
            Gets the id of this object. The id is structured as <see cref="T:VelocityDb.Oid"/>
            </summary>
            <value>The id of this object or 0 if object is not persistent</value>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk and all data members (fields) have been loaded. Override this to provide your own initializations of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk before all data members (fields) have been fully loaded. Override this to provide your own initializations of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.IsPersistent">
            <summary>
            Gets the persistent state of an object. An object is considered persistent when it has an <see cref="T:VelocityDb.Oid"/>, that is the <see cref="P:VelocityDb.IOptimizedPersistable.Id"/> is not 0
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.IsUpdated">
            <summary>
            Gets the updated state of the object
            </summary>
            <value>true if updated; otherwise false</value>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.LazyLoadFields">
            <summary>
            By default all fields are loaded when opening a persistent object but an option is provided to load members on demand (lazy loading).
            </summary> 
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.MaxNumberOfDatabases">
            <summary>
            Possibly restrict instances of to a single Database. By default this property is UInt32.MaxValue but classes like BTreeSetOidShort, BTreeMapShortOid ... override this property to return 1 since short references are restricted to a single Database.
            </summary>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.ObjectsPerPage">
            <summary>
            A default for number of objects per database page used when persisting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisted using <see cref="M:VelocityDb.IOptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automatically made persistent.
            </summary>
            <returns>The requested number of objects per page.</returns>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.FieldsLoaded">
            <summary>
            Gets the field members load state. By default, all members are loaded when a persistent object is opened but if an overrode of <see cref="P:VelocityDb.OptimizedPersistable.LazyLoadFields"/> returns true then the object members are loaded by calling <see cref="!:OptimizedPersistable.LoadFields"/>
            </summary>
            <value>true if all members are loaded; otherwise false</value>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.GetPage">
            <summary>
            Get the persistent storage <see cref="T:VelocityDb.Page"/> of this object
            </summary>
            <returns>The persistent storage <see cref="T:VelocityDb.Page"/>of this object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.SetPage(VelocityDb.Page)">
            <summary>
            Sets the persistent storage <see cref="T:VelocityDb.Page"/> of this object
            </summary>
            <param name="page">A persistent storage <see cref="T:VelocityDb.Page"/></param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.GetWrappedObject">
            <summary>
            Internally used when <see cref="T:VelocityDb.IOptimizedPersistable"/> is a wrapper for a non <see cref="T:VelocityDb.IOptimizedPersistable"/>
            </summary>
            <returns>Wrapped object if set; otherwise this object</returns>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.PagesPerDatabase">
            <summary>
            A default for number of objects per database page used when persisting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisting using <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automatically made persistent.
            </summary> 
            <returns>The requested number of pages per database</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <summary>
            Persists this object.
            </summary>
            <param name="place">The placement rules to follow when persisting this object</param>
            <param name="session">The session managing this object</param>
            <param name="toPersist">A queue of objects remaining to be persisted. Pass as a parameter to session.Persist</param>
            <param name="persistRefs">If true, objects referenced from this object will also be persisted</param>
            <param name="disableFlush">If true, disables possible flushing of updated pages while persisting this object; otherwise page flushing may occur</param>
            <returns>The object id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <summary>
            Persists this object.
            </summary>
            <param name="placeHint">Use placement as specified by this object type, see <see cref="P:VelocityDb.OptimizedPersistable.PlacementDatabaseNumber"/>, <see cref="P:VelocityDb.OptimizedPersistable.ObjectsPerPage"/> and <see cref="P:VelocityDb.OptimizedPersistable.PagesPerDatabase"/></param>
            <param name="session">The session managing this object</param>
            <param name="persistRefs">Persist any referenced object now or delay until flush/commit</param>
            <param name="disableFlush">Controls possible flushing of updated pages. Set to true if you want to prevent updated pages from being flushed to disk and setting such pages to a non updated state.</param>
            <returns>The object id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.PersistMyReferences(VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Persists references from this object
            </summary>
            <param name="session">The session managing this object</param>
            <param name="inFlush">are we in a page flush</param>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.PlacementDatabaseNumber">
            <summary>
            Gets the Database Id number to use when placing (persisting) an instance of this class when no other placement directive has been given.
            </summary>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Provides a way to customize how an object is read. Used by a code generator
            </summary>
            <param name="typeVersion">the type version of the object being read</param>
            <param name="memberBytes">the raw bytes to read the object from</param>
            <param name="offset">current offset into the raw object bytes</param>
            <param name="session">the active session</param>
            <param name="page">the page of the object</param>
            <param name="useOidShort">is object using short references</param>
            <param name="schema">the active schema</param>
            <param name="openRefs">open references objects</param>
            <param name="toLoadMembers">a list of field members to load</param>
            <param name="graphDepth">current depth in object read</param>
            <param name="graphDepthToLoad">requested max object depth to read</param>
            <param name="primitivesOnly">if true, only load primitive members (not referenced objects)</param>
        </member>
        <member name="P:VelocityDb.IOptimizedPersistable.RemovedFromIndices">
            <summary>
            <c>true</c> if call to <see cref="!:Update(bool)"/> or <see cref="M:VelocityDb.Session.SessionBase.UpdateObject(VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/> caused this object to be removed from possible indices
            </summary>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.WriteMe(VelocityDb.TypeInfo.TypeVersion,System.Boolean,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Provides a way to customize how an object is written. Used by a code generator
            </summary>
            <param name="typeVersion">the type version of the object being written</param>
            <param name="addShapeNumber">add type version number to object bytes</param>
            <param name="pageInfo">the page info for the page to written to</param>
            <param name="owner">owning object</param>
            <param name="session">the active session</param>
            <param name="inFlush">are we in a page flush</param>
            <returns>Bytes representing this object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.GetTypeVersion">
            <summary>
            The database engine needs this internally
            </summary>
            <returns>The <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> of this object</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.SetTypeVersion(VelocityDb.TypeInfo.TypeVersion)">
            <summary>
            The database engine needs this internally
            </summary>
            <param name="shape">The <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> to use for this object</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.ShallowCopyTo(VelocityDb.Page)">
            <summary>
            Copies current object to a page
            </summary>
            <param name="page">The page to copy to</param>
            <returns>Id of object copy</returns>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. It does not automatically make referenced objects unpersisted. Best way to do so is to override this virtual function in your own classes.
            </summary>
            <param name="session">The managing session</param>
        </member>
        <member name="M:VelocityDb.IOptimizedPersistable.Update">
            <summary>
            Call this function before updating any fields of this object
            </summary>
            <returns>true if update was successful; otherwise false</returns>
        </member>
        <member name="T:VelocityDb.IReferenceTracked">
            <summary>
            Maintains a set of all <see cref="T:VelocityDb.TypeInfo.Reference"/>s to this object
            </summary>
        </member>
        <member name="P:VelocityDb.IReferenceTracked.References">
            <summary>
            Get a collection of references to this object
            </summary>
        </member>
        <member name="T:VelocityDb.LZ4n.NamespaceDoc">
            <summary>    
            The <c>VelocityDB.LZ4n</c> namespace contains session classes for LZ4 compression.
            
            Copyright (c) 2013, Milosz Krajewski
            All rights reserved.
            Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
            
            Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
            Redistributions in binary form must reproduce the above copyright notice, this list of conditions
            and the following disclaimer in the documentation and/or other materials provided with the distribution.
            
            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
            WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
            A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
            FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
            LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
            INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
            OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
            IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            </summary>      
        </member>
        <member name="T:VelocityDb.OfType">
            <summary>
            An object of this type is a base class of type returned by <see cref="M:VelocityDb.Session.SessionBase.AllObjects``1(System.Boolean,System.Boolean)"/> or <see cref="M:VelocityDb.Database.AllObjects``1(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VelocityDb.OfType.#ctor(System.Type,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of persisted objects to enumerate</param>
            <param name="session">The active session</param>
            <param name="includeSubclasses">Also return instances of sub classes</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
        </member>
        <member name="T:VelocityDb.OfType.OfTypeIterator">
            <summary>
            Iterator for type <see cref="T:VelocityDb.OfType"/> 
            </summary>
        </member>
        <member name="M:VelocityDb.OfType.OfTypeIterator.GetEnumerator">
            <summary>
            Enumeration of all objects of type T
            </summary>
            <returns>The enumerator of T</returns>
        </member>
        <member name="M:VelocityDb.OfType.OfTypeIterator.SkipIterator(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:VelocityDb.OfType.OfTypeIterator.TakeIterator(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:VelocityDb.OfType.#ctor(System.Type,VelocityDb.Database,System.Boolean)">
            <summary>
            Constructs this enumeration wrapper object
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to look for.</param>
            <param name="db">The active db</param>
            <param name="includeSubClasses">Also return instances of sub classes</param>
        </member>
        <member name="M:VelocityDb.OfType.GetEnumerator">
            <summary>
            Enumeration of all objects of the selected <see cref="T:System.Type"/> 
            </summary>
            <returns>The enumeration</returns>
        </member>
        <member name="M:VelocityDb.OfType.Count">
            <summary>
            Get a count of instances of the given type. This value is computed by a quick iteration over all objects of the requested type.
            </summary>
            <returns>Number of instances found of the given <see cref="T:System.Type"/> </returns>
        </member>
        <member name="M:VelocityDb.DatabaseIterator.ElementAt(System.Int64,VelocityDb.OfType,System.Int64@,System.Boolean)">
            <summary>
            Gets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <param name="allObjects">object of type collection</param>
            <param name="atIndex">index reached within this database</param>
            <param name="reset"></param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="T:VelocityDb.OfTypeExtension">
            <summary>
            A few extensions to improve performance of Linq for Objects queries
            </summary>
        </member>
        <member name="M:VelocityDb.OfTypeExtension.ElementAt(VelocityDb.OfType,System.Int32)">
            <summary>
            Override LINQ for faster access
            </summary>
            <param name="source">The source enumeration</param>
            <param name="index">The index requested</param>
            <returns>Element at requested index</returns>
        </member>
        <member name="M:VelocityDb.OfTypeExtension.Skip(VelocityDb.OfType,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">The Type being extended</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="T:VelocityDb.Oid">
            <summary>
            The object identifier containing a 32 bit database part, a 16 bit page part and a 16 bit page part. These parts are combined into a 64bit unsigned number <see cref="P:VelocityDb.OptimizedPersistable.Id"/>.
            </summary>
        </member>
        <member name="M:VelocityDb.Oid.#ctor(System.UInt64)">
            <summary>
            Creates an Oid
            </summary>
            <param name="id">Higest 32 bit is Database number, then follows the 16 bit Page number and the 16 bit page number</param>
        </member>
        <member name="M:VelocityDb.Oid.#ctor(System.UInt32,VelocityDb.OidShort)">
            <summary>
            Creates an Oid given a Database number and an OidShort (page-slot)
            </summary>
            <param name="dbId">The Database number</param>
            <param name="pageSlotId">The page and slot numbers as an OidShort</param>
        </member>
        <member name="M:VelocityDb.Oid.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates an Oid given a Database number and an OidShort (page-slot)
            </summary>
            <param name="dbId">The Database number</param>
            <param name="pageSlotId">The page and slot numbers as a UInt32</param>
        </member>
        <member name="M:VelocityDb.Oid.Encode(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Constructs a UInt64 from the components Database number, Page number and page number
            </summary>
            <param name="db">A Database number</param>
            <param name="page">A Page number</param>
            <param name="slot">A slot number</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Oid.Equals(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares by Id
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Oid.Encode(System.UInt32,System.UInt32)">
            <summary>
            Constructs a UInt64 from the components Database number and an encoded UInt32 contains page and slot number
            </summary>
            <param name="db">Database number</param>
            <param name="pageSlot">Encoded page and slot number</param>
            <returns>A number containing the full object identifier</returns>
        </member>
        <member name="M:VelocityDb.Oid.CompareTo(VelocityDb.Oid)">
            <summary>
            Compares two Oid objects by id
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>a negative number if less, 0 if equal or else a positive number</returns>
        </member>
        <member name="M:VelocityDb.Oid.GetHashCode">
            <summary>
            Computes a hash code based on Id.
            </summary>
        </member>
        <member name="M:VelocityDb.Oid.GetHashCode(VelocityDb.Oid)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Oid.Id">
            <summary>
            Gets the underlaying UInt64 that contains the encoded Oid.
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.IdShort">
            <summary>
            Gets the page-slot parts of the underlaying UInt64 that contains the encoded Oid.
            </summary>
        </member>
        <member name="M:VelocityDb.Oid.DatabaseNumber(System.UInt64)">
            <summary>
            Extracts the Database number
            </summary>
            <param name="id">The combined Database number, Page number and page number</param>
            <returns>The Database number</returns>
        </member>
        <member name="M:VelocityDb.Oid.PageNumber(System.UInt64)">
            <summary>
            Extracts the Page number
            </summary>
            <param name="id">The combined Database number, Page number and page number</param>
            <returns>The Page number</returns>
        </member>
        <member name="M:VelocityDb.Oid.SamePageAs(System.UInt64,System.UInt64)">
            <summary>
            Find out if Page number is the same in two different UInt64 numbers (encoded Oid)
            </summary>
            <param name="id">A combined Database number, Page number and page number</param>
            <param name="anId">Another combined Database number, Page number and skot number</param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Oid.SlotNumber(System.UInt64)">
            <summary>
            Extracts the page number
            </summary>
            <param name="id">A combined Database number, Page number and page number</param>
            <returns>A page number</returns>
        </member>
        <member name="M:VelocityDb.Oid.SlotNumber(System.UInt64,System.UInt16)">
            <summary>
            Sets the page number
            </summary>
            <param name="oid">A combined Database number, Page number and page number</param>
            <param name="slotNumber">A slot number to use in the combined UInt64 value</param>
            <returns>A combined Database number, Page number and an updated page number</returns>
        </member>
        <member name="M:VelocityDb.Oid.AsString(System.UInt64)">
            <summary>
            Builds a string with DatabaseNumber-PageNumber-SlotNumber
            </summary>
            <param name="id">A combined Database number, Page number and page number</param>
            <returns>DatabaseNumber-PageNumber-SlotNumber</returns>
        </member>
        <member name="M:VelocityDb.Oid.ToString">
            <summary>
            Builds a string with DatabaseNumber-PageNumber-SlotNumber
            </summary>
            <returns>DatabaseNumber-PageNumber-SlotNumber</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_GreaterThan(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id > b.id</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_LessThanOrEqual(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id less or equal to b.id</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_GreaterThanOrEqual(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id >= b.id</returns>
        </member>
        <member name="M:VelocityDb.Oid.op_LessThan(VelocityDb.Oid,VelocityDb.Oid)">
            <summary>
            Compares the id of two Oid's
            </summary>
            <param name="a">First Oid</param>
            <param name="b">Second Oid</param>
            <returns>a.id less than b.id</returns>
        </member>
        <member name="P:VelocityDb.Oid.Database">
            <summary>
            Gets the database number part of the Oid
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.Page">
            <summary>
            Gets the page number part of the Oid
            </summary>
        </member>
        <member name="P:VelocityDb.Oid.Slot">
            <summary>
            Gets the slot number part of the Oid
            </summary>
        </member>
        <member name="T:VelocityDb.OidShort">
            <summary>
            The short object identifier containing a 16 bit page part and a 16 bit page part. This is used for short references within a single databases.
            </summary>
        </member>
        <member name="M:VelocityDb.OidShort.Encode(System.UInt16,System.UInt16)">
            <summary>
            Merges a page number and a page number into a single number
            </summary>
            <param name="page">A Page number</param>
            <param name="slot">A slot number</param>
            <returns>The combined Page and page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.#ctor(System.UInt64)">
            <summary>
            Constructs an OidShort given a 64bit number by using the 32 lower bits
            </summary>
            <param name="id">The full encoded Id from which to construct the OidShort</param>
        </member>
        <member name="M:VelocityDb.OidShort.#ctor(System.UInt32)">
            <summary>
            Constructs an OidShort given a 32bit number
            </summary>
            <param name="id">The page and slot encoded Id from which to construct the OidShort</param>
        </member>
        <member name="M:VelocityDb.OidShort.CompareTo(VelocityDb.OidShort)">
            <summary>
            Compares two OidShort objects by id
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>a negative number if less, 0 if equal or else a positive number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.Compare(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares by Id
            </summary>
            <param name="aId">First object</param>
            <param name="bId">Second object</param>
            <returns>Comparison value, -1 for less, 0 for equal and 1 for greater than</returns>
        </member>
        <member name="M:VelocityDb.OidShort.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.Equals(VelocityDb.OidShort,VelocityDb.OidShort)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.GetHashCode(VelocityDb.OidShort)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OidShort.op_Equality(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares id of two OidShort
            </summary>
            <param name="a">first OidShort</param>
            <param name="b">other OidShort</param>
            <returns>true if id's are ==</returns>
        </member>
        <member name="M:VelocityDb.OidShort.op_Inequality(VelocityDb.OidShort,VelocityDb.OidShort)">
            <summary>
            Compares id of two OidShort
            </summary>
            <param name="a">first OidShort</param>
            <param name="b">other OidShort</param>
            <returns>true if id's are !=</returns>
        </member>
        <member name="P:VelocityDb.OidShort.Id">
            <summary>
            Gets the OidShort encoded as a UInt32
            </summary>
        </member>
        <member name="M:VelocityDb.OidShort.PageNumber(System.UInt32)">
            <summary>
            Extracts a Page number from a combined Page-Slot number
            </summary>
            <param name="id">Combined Page and page number</param>
            <returns>A Page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.SamePageAs(System.UInt32,System.UInt32)">
            <summary>
            Determines if two encoded OidShort have the same Page number
            </summary>
            <param name="id"></param>
            <param name="anId"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OidShort.SlotNumber(System.UInt32)">
            <summary>
            Extracts a page number
            </summary>
            <param name="id">Combined Page and page number</param>
            <returns>A page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.SlotNumber(System.UInt32,System.UInt16)">
            <summary>
            Sets a page number
            </summary>
            <param name="oid">Combined Page and page number</param>
            <param name="slotNumber">Slot number to use</param>
            <returns>A combined Page number with an updated page number</returns>
        </member>
        <member name="M:VelocityDb.OidShort.AsString(System.UInt32)">
            <summary>
            Builds a string with DatabaseNumber-PageNumber-SlotNumber
            </summary>
            <param name="id">A combined Page number and page number</param>
            <returns>PageNumber-SlotNumber</returns>
        </member>
        <member name="M:VelocityDb.OidShort.ToString">
            <summary>
            Builds a string with PageNumber-SlotNumber
            </summary>
            <returns>PageNumber-SlotNumber</returns>
        </member>
        <member name="T:VelocityDb.OptimizedPersistable">
            <summary>
            Base class for all persistent capable classes except for embedded objects which do not need to be subclasses of this class.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.#ctor(System.UInt64)">
            <summary>
            This constructor can be used in cases where the object id is known but you don't want to open the object, maybe you just want to add this object to a BTreeSet.
            </summary> 
            <param name="id">Object id to use for this object</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.#ctor">
            <summary>
            The default constructor can be used to create simple OptimizedPersistable objects.
            </summary>   
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Clone">
            <summary>
            See <see cref="M:System.Object.MemberwiseClone"/>
            </summary>
            <returns>A non persisted clone</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.CompareTo(System.Object)">
            <summary>
            Compares objects using the object <see cref="P:VelocityDb.OptimizedPersistable.Id"/>
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object. If this object or other object isn't persistent we call <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj">Object to compare with</param>
            <value>true if the specified Object is equal to the current Object; otherwise, false.</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.DatabaseNumber">
            <summary>
            Gets the database number of this object.
            </summary>
            <value>The database number of this object or 0 if object is not persistent</value>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetDataMembers">
            <summary>
            Gets a list of the fields meta data objects
            </summary>
            <returns>List of DataMember</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetFieldValues">
            <summary>
            Returns a list of field values of this object or returns it as an array (if this is an array)
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetPage">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.SetPage(VelocityDb.Page)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.OptimizedPersistableFieldValues">
            <summary>
            Gets a list of all field values of the current object that are subclasses of OptimizedPersistable
            </summary>
            <returns>List of OptimizedPersistable</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetHashCode">
            <summary>
            Computes a hash code based on Oid of object.
            Make sure to persist objects before using GetHashCode() or override GetHashCode()
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Page">
            <summary>Gets the Page of this object.
            <value>The <see cref="P:VelocityDb.OptimizedPersistable.Page"/></value>
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.PageNumber">
            <summary>
            Gets the page number part of the object Oid (Id)
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Id">
            <summary>
            Gets the id of this object. The id is structured as <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>
            </summary>
            <value>The id of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.IsUpdated">
            <summary>
            Gets the updated state of the object
            </summary>
            <value>true if updated; otherwise false</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.ShortId">
            <summary>
            Gets the short id of this object. The id is structured as <see cref="P:VelocityDb.OptimizedPersistable.OidShort"/>
            </summary>
            <value>The short id of this object or 0 if object is not persistent</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.OidShort">
            <summary>
            Gets the OidShort part of the object Oid
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.ObjectsPerPage">
            <summary>
            A default for number of objects per database page used when persisting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisted using <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automatically made persistent.
            </summary>
            <returns>The requested number of objects per page.</returns>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.PagesPerDatabase">
            <summary>
            A default for number of objects per database page used when persisting objects without an explicit <see cref="T:VelocityDb.Placement"/> object or if persisted using <see cref="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)"/>
            This happens when objects are persisted by reachability from a persistent object.
            All objects reachable from a persistent object are automatically made persistent.
            </summary> 
            <returns>The requested number of pages per database</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.OidOf(System.Object)">
            <summary>Gets the Oid (encoded as an UInt64) of a non OptimizedPersistable object or 0 if the object isn't persistent on the same page as this object.</summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.PersistentVersion">
             <summary>
             Gets the page version of a persistent object
             </summary>
            <returns>
             The page version.
            </returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Placement,VelocityDb.Session.SessionBase,System.Boolean,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <summary>
            Persists this object. Override in your subclasses when you want fields of your class to be persisted in some special way.
            </summary>
            <param name="place">The placement rules to follow when persisting this object</param>
            <param name="session">The session managing this object</param>
            <param name="toPersist">A queue of objects remaining to be persisted. Pass as a parameter to session.Persist</param>
            <param name="persistRefs">If true, objects referenced from this object will also be persisted</param>
            <param name="disableFlush">If true, disables possible flushing of updated pages while persisting this object; otherwise page flushing may occur</param>
            <returns>The object id of this persistent object</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Persist(VelocityDb.Session.SessionBase,VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <summary>
            Persists this object.
            </summary>
            <param name="placeHint">Use placement as specified by this object type, see <see cref="P:VelocityDb.OptimizedPersistable.PlacementDatabaseNumber"/>, <see cref="P:VelocityDb.OptimizedPersistable.ObjectsPerPage"/> and <see cref="P:VelocityDb.OptimizedPersistable.PagesPerDatabase"/>For best performance this should be a recently created object that you want the current object to be persisted near.</param>
            <param name="session">The session managing this object</param>
            <param name="persistRefs">Persist any referenced object now or delay until flush/commit</param>
            <param name="disableFlush">Controls possible flushing of updated pages. Set to true if you want to prevent updated pages from being flushed to disk and setting such pages to a non updated state.</param>
            <returns>The object id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.PersistMyReferences(VelocityDb.Session.SessionBase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.AllowOtherTypesOnSamePage">
            <summary>
            Objects can be stored more efficiently if all object types on the page share the same type. By default mixed types are allowed. Override this to return false for types that should not share pages with other types.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Cache">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.FlushIfPageFull">
            <summary>
            By default we flush (write) any updated page we find when looking for an object placement page and the page is considered full (depends on how many objects we permit/page)
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.FlushTransients">
            <summary>
            Process data in transient fields (if any), do whatever is required to persist such data if needed. By default does nothing.
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.LazyLoadFields">
            <summary>
            By default all fields are loaded when opening a persistent object but an option is provided to load members on demand (lazy loading).
            </summary> 
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.FieldsLoaded">
            <summary>
            Gets the field members load state. By default, all members are loaded when a persistent object is opened but if an overrode of <see cref="P:VelocityDb.OptimizedPersistable.LazyLoadFields"/> returns true then the object members are loaded by calling <see cref="!:OptimizedPersistable.LoadFields"/>
            </summary>
            <value>true if all members are loaded; otherwise false</value>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.PlacementDatabaseNumber">
            <summary>
            Gets the Database Id number to use when placing (persisting) an instance of this class when no other placement directive has been given.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Update">
            <summary>
            Marks an object as being updated so that object will be written at commit transaction. Call before making object changes!
            </summary>
            <returns>true if update successful</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Update(System.Action)">
            <summary>
            Marks an object as being updated so that object will be written at commit transaction. Call before making object changes! Add code to update object in <see cref="T:System.Action"/> parameter.
            </summary>
            <param name="codeBlock">Block of code doing actual update to the object</param>
            <returns>true if update successful</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.UpdateNonIndexField">
            <summary>
            Marks an object as being updated so that object will be written at commit transaction. Call before updating a NON indexed field.
            Same as <see cref="M:VelocityDb.OptimizedPersistable.Update"/> but avoids deleting object from indices (if any). If updating a field used in any index, call <see cref="M:VelocityDb.OptimizedPersistable.Update"/> instead
            or you may end up with one or more corrupt indices.
            </summary>
            <returns>true if update successful</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Update(System.Boolean,System.Boolean)">
            <summary>
            Marks an object as being updated so that object will be written at commit transaction. Call before making object changes!
            </summary>
            <param name="disableFlush">Controls possible flushing of updated pages. Set to true if you want to prevent updated pages from being flushed to disk and setting such pages to a non updated state.</param>
            <returns>true if update successful</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.InitializeAfterRecreate(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk before all data members (fields) have been fully loaded. Override this to provide your own initializations of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.InitializeAfterRead(VelocityDb.Session.SessionBase)">
            <summary>
            This function is called when an object has been read from disk and all data members (fields) have been loaded. Override this to provide your own initializations of transient data.
            </summary>
            <param name="session">The active session managing this object</param>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.IsPersistent">
            <summary>
            Gets the persistent state of an object. An object is considered persistent when it has an <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>, that is the <see cref="P:VelocityDb.OptimizedPersistable.Id"/> is not 0
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Oid">
            <summary>
            Gets the object identifier represented as an <see cref="P:VelocityDb.OptimizedPersistable.Oid"/>.
            </summary>
            <value>The <see cref="P:VelocityDb.OptimizedPersistable.Oid"/> of the object</value>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase)">
            <summary>
            Removes an object from the persistent store and makes the object a transient object. It does not automatically make referenced objects unpersisted. Best way to do so is to override this virtual function in your own classes.
            </summary>
            <param name="session">The managing session</param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ReadMeUsingSchemaReflection(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by code generator. By default objects are read and written using persisted schema information and reflection.
            </summary>
            <param name="typeVersion">Version of a type</param>
            <param name="memberBytes">Bytes containing object to read</param>
            <param name="offset">Offset into memberBytes</param>
            <param name="pObj">The object being read in</param>
            <param name="session">The active session</param>
            <param name="page">Page of object being read</param>
            <param name="useOidShort">Does object use short object references (32bit)?</param>
            <param name="schema">Schema information</param>
            <param name="openRefs">Shall references from object also be filled in now</param>
            <param name="toLoadMembers">Members remaining to be read</param>
            <param name="graphDepth">Current graph depth read</param>
            <param name="graphDepthToLoad">Stop reading at this graph depth</param>
            <param name="primitivesOnly"></param>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.RemovedFromIndices">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.WriteMeUsingSchemaReflection(VelocityDb.TypeInfo.TypeVersion,VelocityDb.IOptimizedPersistable,System.Boolean,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Used by code generator. This is the default way of writing objects using schema information and .NET reflection info.
            </summary>
            <param name="typeVersion">The version of the type being read</param>
            <param name="pObj">The object being written</param>
            <param name="addShapeNumber">Shall we include bytes containing the type version of the object?</param>
            <param name="pageInfo">PageInfo for the current page</param>
            <param name="owner">Owner of object being written</param>
            <param name="session">The active session</param>
            <param name="inFlush">Is page flushing OK while preparing this object to be written?</param>
            <returns>Bytes of this object</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ReadMe(VelocityDb.TypeInfo.TypeVersion,System.Byte[],System.Int32@,VelocityDb.Session.SessionBase,VelocityDb.Page,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by code generator
            </summary>
            <param name="typeVersion">The version of the type being read</param>
            <param name="memberBytes"></param>
            <param name="offset"></param>
            <param name="session"></param>
            <param name="page"></param>
            <param name="useOidShort"></param>
            <param name="schema"></param>
            <param name="openRefs"></param>
            <param name="toLoadMembers"></param>
            <param name="graphDepth"></param>
            <param name="graphDepthToLoad"></param>
            <param name="primitivesOnly"></param>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Write">
            <summary>
            By calling this you force a persisted (has an Id) object to be written to disk (if updated) and indices (if any) to be updated. Other objects on the same page will also be written.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.WriteMe(VelocityDb.TypeInfo.TypeVersion,System.Boolean,VelocityDb.PageInfo,VelocityDb.IOptimizedPersistable,VelocityDb.Session.SessionBase,System.Boolean)">
            <summary>
            Used by code generator.
            </summary>
            <param name="typeVersion"></param>
            <param name="addShapeNumber"></param>
            <param name="pageInfo"></param>
            <param name="owner"></param>
            <param name="session"></param>
            <param name="inFlush"></param>
            <returns></returns>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.Session">
            <summary>
            Gets the session of this object or null if this object isn't yet persisted.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetSession">
            <summary>
            Gets the session of this object or null if this object isn't yet persisted.
            </summary>
            <returns>The active <see cref="T:VelocityDb.Session.SessionBase"/> of this object</returns>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.SlotNumber">
            <summary>
            Gets the page number from the object identifier
            </summary>
            <value>the page number of this object</value>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ToString">
             <summary>
             Displays class name plus object id
             </summary>
            <returns>
             A <see cref="T:System.String"/> containing class name and object id.
            </returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ListToString(System.Collections.IList,VelocityDb.Page)">
            <summary>
            This is a support function for the VelocityDbBrowser
            </summary>
            <param name="list">A list to output as a string</param>
            <param name="page">The page containing the list</param>
            <returns>A string representing the input list.</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Open(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a persistent object located in the same Database as this object
            </summary>
            <param name="pageSlot">The OidShort encoded as a UInt32 of the object to open within the same Database as this object</param>
            <param name="update">Open the object for update?</param>
            <param name="inFlush">if true, disallow page flushing while opening the object</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.Open``1(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a persistent object located in the same Database as this object
            </summary>
            <param name="pageSlot">The OidShort encoded as a UInt32 of the object to open within the same Database as this object</param>
            <param name="update">Open the object for update?</param>
            <param name="inFlush">if true, disallow page flushing while opening the object</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.MakeTransient">
            <summary>
            Use when you need to use a persistent object from one session in another seesion without knowing its persistent Id.
            This does not do the same as <see cref="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase)"/> which in addition to making object transient also removes object from its <see cref="T:VelocityDb.Database"/>
            </summary>
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.MaxNumberOfDatabases">
            <summary>
            Possibly restrict instances of to a single Database. By default this property is UInt32.MaxValue but classes like BTreeSetOidShort, BTreeMapShortOid ... override this property to return 1 since short references are restricted to a single Database.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.ShallowCopyTo(VelocityDb.Page)">
            <summary>
            Internal use for now
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetTypeVersion">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.SetTypeVersion(VelocityDb.TypeInfo.TypeVersion)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.OptimizedPersistable.WrappedObject">
            <summary>
            Objects that are not subclasses of OptimizedPersistable may be wrapped by an OptimizedPersistable, if so this gets the wrapped object or else gets this object.
            </summary>
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.GetWrappedObject">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.OptimizedPersistable.UpdateTypeVersion">
            <summary>
            Updates the object and make this object use the latest Type definition for its class. The object now will now adjust for data attribute changes.
            </summary>
        </member>
        <member name="T:VelocityDb.Page">
            <summary>Each <see cref="P:VelocityDb.Page.Database"/> consist of a number of variable sized pages. 
            A page can be compressed and may be encrypted and contains one or more objects. 
            Page compression is controlled by the <see cref="T:VelocityDb.DatabaseLocation"/> of the <see cref="P:VelocityDb.Page.Database"/> containing a page.
            Each page has a <see cref="P:VelocityDb.Page.PageInfo"/> that provides info about a page and can be updated to turn on/off compression and encryption for a specific page.
            </summary>
        </member>
        <member name="M:VelocityDb.Page.StringToByteArray(System.String)">
            <summary>
            Converts a string into an UTF8 encoded byte array
            </summary>
            <param name="str">a string to convert</param>
            <returns>a UTF8 encoding</returns>
        </member>
        <member name="M:VelocityDb.Page.ClearCashedObjects(VelocityDb.Session.SessionBase)">
            <summary>
            Clears all objects cached on the page but does not clear objects cached by weak references.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:VelocityDb.Page.Dispose">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Page.#ctor(VelocityDb.Database,System.UInt16,System.UInt32,System.UInt16,System.Boolean)">
            <summary>
            Internal use and usage in VelocityDbExteanions project
            </summary>
            <param name="db"><see cref="P:VelocityDb.Page.Database"/> this <see cref="T:VelocityDb.Page"/> belongs to</param>
            <param name="pageNumber">Page number of this page</param>
            <param name="shapeNumber">Short Id of object schema type if page contains just a single type of objects</param>
            <param name="objectsPerPage">Max how many objects to store on this page</param>
            <param name="doCache">Cache this page in its database?</param>
        </member>
        <member name="M:VelocityDb.Page.CompareTo(VelocityDb.Page)">
            <summary>
            Compares Pages by PageNumber
            </summary>
            <param name="otherPage">The Page to compare with</param>
            <returns>-1 if this PageNumber is less than obj.PageNumber, 0 if equal and 1 if greater than</returns>
        </member>
        <member name="M:VelocityDb.Page.PageShortIds">
            <summary>
            Enumerates all objects short ids on this Page
            </summary>
            <returns>Enumeration of all slot short ids on this Page</returns>
        </member>
        <member name="M:VelocityDb.Page.GetEnumerator">
            <summary>
            Enumerates all objects on this Page
            </summary>
            <returns>Enumeration of all slots on this Page</returns>
        </member>
        <member name="M:VelocityDb.Page.ObjectsLazyLoaded(System.Int32)">
            <summary>
            Enumerates all objects on this Page. Object graph loaded up to specified max depth.
            </summary>
            <param name="depthToLoad">Max how many levels deep to load each object</param>
            <returns>Enumeration of all slots on this Page</returns>
        </member>
        <member name="P:VelocityDb.Page.PageInfo">
            <summary>
            Gets the PageInfo for this Page
            </summary>
        </member>
        <member name="M:VelocityDb.Page.FinishUpCsvImport">
            <summary>
            Schema page requires special handling in Import from CSV files
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Offset">
            <summary>
            Current page version starts at this offset in conatining <see cref="P:VelocityDb.Page.Database"/>.
            </summary>
        </member>
        <member name="M:VelocityDb.Page.Slot(System.UInt64,System.Boolean,VelocityDb.Session.SessionBase,VelocityDb.TypeInfo.Schema,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.TypeInfo.TypeVersion)">
            <summary>
            Retrieves an object from persistent storage
            </summary>
            <param name="oid">Id of object to retrieve</param>
            <param name="openRefs">Shall we open references from this object?</param>
            <param name="session">The active session</param>
            <param name="schema">The active schema</param>
            <param name="iteration">Is this called as part of an iteration</param>
            <param name="toLoadMembers">List of members to load</param>
            <param name="graphDepth">The current load graph depth</param>
            <param name="graphDepthToLoad">Max graph depth to load</param>
            <param name="shape">The type version of the object to retrieve</param>
            <returns>The retrieved object</returns>
        </member>
        <member name="P:VelocityDb.Page.IsUpdated">
            <summary>
            Is this Page updated?
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Id">
            <summary>
            The Oid (encoded as UInt64) of this page
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Oid">
            <summary>
            The Oid of this page
            </summary>
        </member>
        <member name="P:VelocityDb.Page.ShortId">
            <summary>
            The OidShort (encoded as UInt32) of this page
            </summary>   
        </member>
        <member name="P:VelocityDb.Page.OnlyStub">
            <summary>
            Is this Page fully read into memory or just the PageInfo?
            </summary>
        </member>
        <member name="P:VelocityDb.Page.Database">
            <summary>
            The <see cref="P:VelocityDb.Page.Database"/> of this Page.
            </summary>
        </member>
        <member name="P:VelocityDb.Page.PageNumber">
            <summary>
            The page number of this Page in the containing <see cref="P:VelocityDb.Page.Database"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Page.UnpersistObject(VelocityDb.IOptimizedPersistable)">
            <summary>
            Use this as an alternative to <see cref="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase)"/> or when using the interface class <see cref="T:VelocityDb.IOptimizedPersistable"/>
            </summary>
            <param name="pObj">The object to be unpersisted</param>
        </member>
        <member name="M:VelocityDb.Page.DeleteObject(System.UInt64)">
            <summary>
            Use this as an alternative to <see cref="M:VelocityDb.OptimizedPersistable.Unpersist(VelocityDb.Session.SessionBase)"/> or when using the interface class <see cref="T:VelocityDb.IOptimizedPersistable"/>
            </summary>
            <param name="id">The object Id of the object to be deleted</param>
        </member>
        <member name="M:VelocityDb.Page.ToString">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.PageCache">
            <summary>
            Maintains string references to <see cref="T:VelocityDb.Page"/>s within a <see cref="T:VelocityDb.Database"/>  
            </summary>
        </member>
        <member name="P:VelocityDb.PageCache.Item(System.UInt16)">
            <summary>
            Get or set a page in the page cache
            </summary>
            <param name="pageNumber">Page number within a database for requested page</param>
            <returns>A page if it exist in the page cache</returns>
        </member>
        <member name="M:VelocityDb.PageCache.GetEnumerator">
            <summary>
            Enumeration of all objects of the cached <see cref="T:VelocityDb.Page"/>s
            </summary>
            <returns>The enumeration</returns>
        </member>
        <member name="P:VelocityDb.PageCache.Length">
            <summary>
            Max number of pages in page cache
            </summary>
        </member>
        <member name="T:VelocityDb.PageInfo">
            <summary>Each <see cref="T:VelocityDb.Page"/> has a PageInfo that provides info about a page and can be used to turn on/off compression and encryption for a page.
            </summary>
        </member>
        <member name="T:VelocityDb.PageInfo.encryptionKind">
            <summary>
            Use <see cref="F:VelocityDb.PageInfo.encryptionKind.desEncrypted"/> for encrypted pages, set encryption private key in <see cref="T:VelocityDb.DatabaseLocation"/>. Use <see cref="F:VelocityDb.PageInfo.encryptionKind.noEncryption"/> when no encryption is desired.
            Other choices in this enum are not yet publicly available. Other kinds of encryption can be provided upon request. We can even make the interface public allowing application defined encryption. 
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.noEncryption">
            <summary>No <see cref="T:VelocityDb.Page"/> encryption</summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.desEncrypted">
            <summary>Use DES <see cref="T:VelocityDb.Page"/> encryption</summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.rsaEncrypted2048">
            <summary>Use RSA 2048bits <see cref="T:VelocityDb.Page"/> encryption (not yet made publicly available)</summary>
        </member>
        <member name="F:VelocityDb.PageInfo.encryptionKind.rsaSigned2048">
            <summary>Use RSA 2048bits <see cref="T:VelocityDb.Page"/> signing (not yet made publicly available)</summary>
        </member>
        <member name="T:VelocityDb.PageInfo.compressionKind">
            <summary>
            Selection of choices foe <see cref="T:VelocityDb.Page"/> compression.
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.compressionKind.None">
            <summary>
            No <see cref="T:VelocityDb.Page"/> compression
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.compressionKind.GZip">
            <summary>
            <see cref="T:System.IO.Compression.GZipStream"/> <see cref="T:VelocityDb.Page"/> compression
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.compressionKind.LZ4">
            <summary>
            LZ4 (safe) <see cref="T:VelocityDb.Page"/> compression
               LZ4 - Fast LZ compression algorithm
               Copyright (C) 2011-2012, Yann Collet.
               BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
               Redistribution and use in source and binary forms, with or without
               modification, are permitted provided that the following conditions are met:
               * Redistributions of source code must retain the above copyright
               notice, this list of conditions and the following disclaimer.
               * Redistributions in binary form must reproduce the above
               copyright notice, this list of conditions and the following disclaimer
               in the documentation and/or other materials provided with the distribution.
               THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
               "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
               LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
               A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
               OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
               SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
               LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
               DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
               THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
               (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
               OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
               
            You can contact the author at :
            - LZ4 homepage : http://fastcompression.blogspot.com/p/lz4.html
            - LZ4 source repository : http://code.google.com/p/lz4/
            
            Port to .NET https://lz4net.codeplex.com/
            Copyright (c) 2013, Milosz Krajewski
            </summary>
        </member>
        <member name="F:VelocityDb.PageInfo.s_pageInfoByteCount">
            <summary>
            The size of the <see cref="T:VelocityDb.PageInfo"/> at the start of each <see cref="T:VelocityDb.Page"/>.
            </summary>                              
        </member>
        <member name="P:VelocityDb.PageInfo.Compressed">
            <summary>
            A <see cref="T:VelocityDb.Page"/> can be compressed or not.
            </summary>
            <value>The <see cref="T:System.Boolean"/></value>
        </member>
        <member name="P:VelocityDb.PageInfo.Encryption">
            <summary>
            A <see cref="T:VelocityDb.Page"/> can be encrypted with DES or not.
            </summary>
            <value>The <see cref="T:VelocityDb.PageInfo.encryptionKind"/></value>
        </member>
        <member name="P:VelocityDb.PageInfo.FirstFreeSlot">
            <summary>
            The first available page on the <see cref="T:VelocityDb.Page"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.PageInfo.NoFreeSlotInBetweenInUseSlots">
            <summary>
            Is there no gaps of unused slots in between the in use slots (all contigous in use slots)?
            </summary>
        </member>
        <member name="P:VelocityDb.PageInfo.NumberOfSlots">
            <summary>
            The number of objects/slots on the <see cref="T:VelocityDb.Page"/>.
            </summary>
            <value>The <see cref="T:System.UInt16"/> of objects/slots on the page</value>
        </member>
        <member name="P:VelocityDb.PageInfo.OnDiskSize">
            <summary>
            The byte size of the <see cref="T:VelocityDb.Page"/> when it was last written to disk.
            </summary>
            <value>The <see cref="T:System.UInt32"/> of bytes</value>
        </member>
        <member name="P:VelocityDb.PageInfo.UncompressedSize">
            <summary>
            The byte size of the <see cref="T:VelocityDb.Page"/> when it was last written to disk (before any compression was applied).
            </summary>
            <value>The <see cref="T:System.UInt32"/> of bytes</value>
        </member>
        <member name="P:VelocityDb.PageInfo.ShapeNumber">
            <summary>
            If non 0, all objects on the page have the same Type.
            </summary>
        </member>
        <member name="P:VelocityDb.PageInfo.VersionNumber">
            <summary>
            Each <see cref="T:VelocityDb.Page"/> gets its page version incremented in every transaction where the it is updated.
            </summary>
            <value>The current <see cref="T:System.UInt64"/> page version</value>    
        </member>
        <member name="T:VelocityDb.ReferenceTracked">
            <summary>
            Tracks references to this object and signals <see cref="T:VelocityDb.Exceptions.ReferentialIntegrityException"/> if unpersisted before while still being referenced.
            </summary>
        </member>
        <member name="M:VelocityDb.ReferenceTracked.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VelocityDb.ReferenceTracked.References">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.ReferenceTracked.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.ServerRequests.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.ServerRequests</c> namespace contains classes for interfacing with the VelocityDbServer
            </summary>      
        </member>
        <member name="T:VelocityDb.Session.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Session</c> namespace contains session classes for interfacing with VelocityDb
            </summary>      
        </member>
        <member name="T:VelocityDb.Session.ReplicaInfo">
            <summary>
            Specifies a location for a replica of primary <see cref="T:VelocityDb.DatabaseLocation"/> containing at least the system databases (0.odb, 1.odb, 2.odb ...)
            </summary>
        </member>
        <member name="P:VelocityDb.Session.ReplicaInfo.Host">
            <summary>
            Host name (defaults to local host)
            </summary>
        </member>
        <member name="P:VelocityDb.Session.ReplicaInfo.Path">
            <summary>
            Directory path to databases
            </summary>
        </member>
        <member name="T:VelocityDb.Session.ServerClientSession">
            <summary>
            Use this session class when <see cref="T:VelocityDb.Page"/> level locking is required and/or not all <see cref="T:VelocityDb.Database"/>s are local and not reachable by UNC paths.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,VelocityDb.CacheEnum,System.Boolean)">
            <summary>
            Creates a new session.
            </summary>
            <param name="systemDir">The startup location directory path (do not use UNC path). Use path as it is on the host owning the directory. Path can be an absolute (full) path or a path relative to <see cref="F:VelocityDb.Session.SessionBase.s_baseDatabasePath"/>. Change default of <see cref="F:VelocityDb.Session.SessionBase.s_baseDatabasePath"/> on server by starting server with a forth parameter specifying the base path</param>
            <param name="systemHost">Hostname of the host owning the systemDir</param>
            <param name="waitForLockMilliseconds">The desired maximum lock wait time</param>
            <param name="optimisticLocking">Use optimistic locking. With optimistic locking, readers are always permitted and multiple updaters are permitted to update the same Databases/Pages but only the first transaction to commit or flush an updated Database/Page will be successful in making the commit change. Other updaters will get an OptimisticLockingException if they try to commit/flush updates to the same Pages/Database.
            See http://en.wikipedia.org/wiki/Optimistic_concurrency_control for further explanation of optimistic locking. If optimistic locking is not enabled then pessimistic locking is used. See: http://en.wikipedia.org/wiki/Concurrency_control </param>
            <param name="inMemoryOnly">Disable all disk access by using this option. Best if used in combination with backup <see cref="T:VelocityDb.DatabaseLocation"/>. See High availability sample application</param>
            <param name="enablePageCache">If strong reference page caching isn't desired, turn it of by setting to false</param>
            <param name="objectCachingDefaultPolicy">Determines default value of <see cref="P:VelocityDb.OptimizedPersistable.Cache"/></param>
            <param name="enableDatabaseCache">Is this session going to enable strong reference <see cref="T:VelocityDb.Database"/> caching?</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.Abort">
            <summary>
            Aborts a transaction, it undoes all persistent changes made within the transaction
            </summary>
        </member>
        <member name="P:VelocityDb.Session.ServerClientSession.AddToIndexInSeperateThread">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDb.Session.ServerClientSession"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.ServerClientSession.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Write threads not yet available with <see cref="T:VelocityDb.Session.ServerClientSession"/>.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginRead(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginReadWithEvents(System.Boolean)">
            <summary>
            Start a read only transaction and gets a list of created/updated objects as subscribed to by this session
            </summary>
            <param name="doRecoveryCheck">If true a recovery check is done, otherwise recovery check is bypassed.</param>
            <returns>list of object Oid of objects updated by other sessions</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.BeginUpdateWithEvents(System.Boolean)">
            <summary>
            Starts a transaction that may be creating new persistent data and/or updating persistent data and gets a list of created/updated objects as subscribed to by this session
            </summary>
            <param name="doRecoveryCheck">If true a recovery check is done, otherwise recovery check is bypassed.</param>
            <returns>list of object Oid of objects updated by other sessions</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.ClearServerCache">
            <summary>
            Used as an aid when debugging server data, internal use, avoid using for now.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.CommitFinalize">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.CommitPrepare(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.Compact(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.Compact">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.CopyAllDatabasesTo(System.String,System.Boolean)">
            <summary>
            Copies all databases to a selected directory on the local host.
            </summary>
            <param name="directory">Path to a directory</param>
            <param name="systemDatabaseLocationOnly">Only copy databases in system database location</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.CopySystemDirectoryFrom(VelocityDb.Session.SessionBase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.DeleteDatabase(VelocityDb.Database,System.Collections.Generic.SortedSet{VelocityDb.Database},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.DeleteLocation(VelocityDb.DatabaseLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.FlushUpdates">
            <summary>
            Send all updated pages to the server(s) managing those pages, freeing up memory in client.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.FlushUpdatesServers">
            <summary>
            Make servers Write all updated data. This may free up some memory on the servers. Only effects sessions using VelocityDbServer(s)
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.FlushPage(VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},VelocityDb.Internal.DatabaseUpdatedPages,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.getPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.readSlotFromDisk(System.UInt16,VelocityDb.Page)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.OpenLocationDatabases(VelocityDb.DatabaseLocation,System.Boolean)">
            <summary>
            Opens all the databases in a given location
            </summary>
            <param name="location">The location for which to open databases</param>
            <param name="update">Shall each database be opened for update?</param>
            <returns>A list of opened databases</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.OpenAllDatabases(System.Boolean)">
            <summary>
            Open all databases
            </summary>
            <param name="update">Open for update?</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.InUseNumberOfPages(VelocityDb.Database)">
            <summary>
            Gets the number of pages currently in use by a Database
            </summary>
            <param name="db">The Database to request info about</param>
            <returns>The number of pages currently in use</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.SubscribeToChanges(System.Type,System.String)">
            <summary>
            Subscribe to committed database changes of instances of a type when an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a boolean property. When property returns true, a change notification is send otherwise no notification is send. Leave as null to get a notification any time any instance of the selected type changes</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.GetChangeEvents">
            <summary>
            Get all subscribed to change events.
            </summary>
            <returns>A List of Oid</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.NewLocation(VelocityDb.DatabaseLocation)">
            <summary>
            Creates a new DatabaseLocation or updates existing ones
            </summary>
            <param name="location">The input location</param>
            <returns>The new DatabaseLocation or an existing one</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.OpenDatabase(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a Database
            </summary>
            <param name="dbNum">The Database number of the database to open</param>
            <param name="update">Open the Database for update?</param>
            <param name="signalError">Signal errors if errors found when opening the Database?</param>
            <returns>The opened Database</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.reopenDatabaseForUpdate(VelocityDb.Database,VelocityDb.TypeInfo.Schema,System.Boolean@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.RestoreFrom(VelocityDb.DatabaseLocation,System.DateTime)">
            <summary>
            Restores Databases and pages from a backup DatabaseLocation. Existing data will be merged with the restored data unless existing Databases to restore are deleted before the restore.
            </summary>
            <param name="backupLocation">The location to restore from</param>
            <param name="upToTime">Restore location up to a given DateTime. Data backed up after this time will not be restored.</param>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.UpdateDatabase(VelocityDb.Database)">
            <summary>
            Request an update lock on a database
            </summary>
            <param name="db">The database to update</param>
            <returns>true if Database was updated, otherwise throws an exception</returns>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSession.UnsubscribeToChanges(System.Type,System.String)">
            <summary>
            Unsubscribe to committed database changes of instances of a type when an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are no longer interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a Boolean property.</param>
        </member>
        <member name="T:VelocityDb.Session.ServerClientSessionShared">
            <summary>
            Use as a shared session for multiple reader threads connected to one or more VelocityDBServer(s).
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,VelocityDb.CacheEnum,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Abort">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.ServerClientSessionShared.AddToIndexInSeperateThread">
            <summary>
            Allow adding objects to indices to be done in a worker thread instead of in main thread.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.BeginRead(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.BeginUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.CachedPage(VelocityDb.Database,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.ClearCache">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.ClearCashedPages">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Checkpoint">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.ClearPageCache">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.CrossTransactionCache(VelocityDb.Database,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.CommitFinalize">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.CommitPrepare(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Compact">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Compact(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.CopyAllDatabasesTo(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.CopyDatabaseTo(VelocityDb.Database,VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.ServerClientSessionShared.Databases">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.DeleteDatabase(VelocityDb.Database,System.Collections.Generic.SortedSet{VelocityDb.Database},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.DeleteLocation(VelocityDb.DatabaseLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.DeletePage(VelocityDb.Database,VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.deleteFromIndexes(VelocityDb.IOptimizedPersistable,VelocityDb.Page,VelocityDb.TypeInfo.TypeVersion,VelocityDb.TypeInfo.TypeVersion)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.ExclusiveLockDatabase(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.LicenseCheck">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.LoadMembers(VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,VelocityDb.Page,System.UInt16,System.Int32,System.Byte[],System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.TypeInfo.TypeVersion,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.FlushPage(VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},VelocityDb.Internal.DatabaseUpdatedPages,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.FlushPageOf(VelocityDb.OptimizedPersistable)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.FlushUpdates">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.FlushUpdates(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.FlushUpdates(VelocityDb.Database,VelocityDb.Internal.DatabaseUpdatedPages,System.Boolean@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.FlushUpdatesServers">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.ForceDatabaseCacheValidation">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.GlobalObjWrapperGet(System.Object,VelocityDb.IOptimizedPersistable@)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.GlobalObjWrapperAdd(System.Object,VelocityDb.IOptimizedPersistable)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.getLocalPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.getLocalNextPage(VelocityDb.Placement,System.UInt16,System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.GetNextPage(System.UInt32@,System.UInt16@,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.getPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.ReOpenDatabaseLocations">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.RestoreFrom(VelocityDb.DatabaseLocation,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.OpenDatabase(System.UInt32,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.openLocalDatabase(System.UInt32,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,VelocityDb.DatabaseLocations,System.Boolean@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.OpenAllDatabases(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.OpenLocationDatabases(VelocityDb.DatabaseLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.OpenDatabase(System.UInt32,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Boolean@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Persist(VelocityDb.Placement,VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,System.UInt16,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.PossiblyFlushUpdatedPages(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.setDbName(VelocityDb.Database,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.sendPage(VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.SubscribeToChanges(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.UpdateDatabase(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.ServerClientSessionShared.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Allow object serialization and page writes to happen in worker threads, one per database, instead of in main session thread.
            <see cref="P:VelocityDb.Session.ServerClientSessionShared.AddToIndexInSeperateThread"/> must also be enabled for this to work.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Unpersist(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Unstubify(VelocityDb.Page,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.UpdateObject(VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.UpdateObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.OpenSchema(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.NewLocation(VelocityDb.DatabaseLocation)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Open(System.UInt32,System.UInt16,System.UInt16,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Open(System.UInt64,System.Boolean,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.ServerClientSessionShared.Verify">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Session.SessionBase">
            <summary>
            Transaction control, database creation and special persistent object api.
            Each session can use 4,294,967,295 <see cref="T:VelocityDb.Database"/>s. Each <see cref="T:VelocityDb.Database"/> may have up to 65,535 <see cref="T:VelocityDb.Page"/>s and a page can be up to 2 GB in size (.Net restriction of a byte array).
            The maximum data size a single session can manage is: 4,294,967,295 * 65,535 * 2147483648 = 604453686294542391705600 bytes or about half a Yottabyte http://en.wikipedia.org/wiki/Yottabyte
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.s_typeDatabaseIdOffsetFromTypeShortId">
            <summary>
            Determines database Id to use for a certain VelocityDbType instance
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.s_typeDatabaseIdOverflowOffset">
            <summary>
            If additional databases are required for storing instances of some type, start by attempting creating database at this offset from original
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.s_typeDatabaseIdOverflowIndexCollisionOffset">
            <summary>
            If additional databases are required for storing instances of some index, start by attempting creating database at this offset from original
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.s_serverTcpIpPortNumber">
            <summary>
            By default port number 7031 (7032 if .net core) is used for communication with VelocityDBServer. Change the value here and also in VelocityDbServer.exe.config if you need to use a different port number.
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.IndexDescriptorDatabaseNumber">
            <summary>
            Database 3 is dedicated to keeping track of index usage
            </summary>
        </member>
        <member name="F:VelocityDb.Session.SessionBase.m_enlistment">
            <summary>
            internal use
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.ClearAllCachedObjectsWhenDetectingUpdatedDatabase">
            <summary>
            By default we clear all cached object when at the beginning of a transaction we detect an updated <see cref="T:VelocityDb.Database"/> within our cached databases.
            Same logic is applied when calling <see cref="M:VelocityDb.Session.SessionBase.ForceDatabaseCacheValidation"/>.
            We do so because most of the time an object in one database have (strong) references to objects in other databases. 
            If Database A is NOT updated but database B is and an object in database A is cached with a strong reference to an object in database B then our cached
            object in database A may contain a stale/incorrect reference to object in database B. This is why we, by default, invalidate all cached objects when we
            detect a modified database within our cached databases. However, if you design your database schema without strong references between databases then you
            do not need to invalidate cached objects for other databases, only the ones that have changed. By consistently using <see cref="T:VelocityDb.WeakIOptimizedPersistableReference`1"/>, 
            <see cref="T:VelocityDb.Collection.BTree.BTreeSet`1"/> and <see cref="T:VelocityDb.Collection.BTree.BTreeMap`2"/>, you can keep references weak between databases. In such cases, set this property to false.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.EmbedISerializableLists">
            <summary>
            Starting in version 7.1.6, <see cref="T:System.Collections.Generic.List`1"/> bits are NOT by default stored with its parent object, instead each such <see cref="T:System.Collections.Generic.List`1"/> is stored with its own object Id.
            This change was necessary in order to handle circular references via <see cref="T:System.Collections.Generic.List`1"/> objects within an <see cref="T:System.Runtime.Serialization.ISerializable"/> serialization.
            Set this value to true if you have existing persisted <see cref="T:System.Runtime.Serialization.ISerializable"/> with <see cref="T:System.Collections.Generic.List`1"/> or else we will try to read the lists as non embedded when they are not.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.FileBytesChunkSize">
            <summary>
            When transferring complete files from a server, we send the file bytes in chunks of this size.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.TextEncoding">
            <summary>
            All text encoding is done with utf8
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DefaultNumberOfObjectsPerPage">
            <summary>
            Default number of objects per page is 9999
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DefaultStringComparer">
            <summary>
            Set the StringComparer to use when no application provided comparator is provided. By default we will then use StringComparer.Ordinal.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DoWindowsAuthentication">
            <summary>
            By default do not use windows authentication when talking to VelocitydbServer's on other hosts.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.MaxUpdateTransactionLogHistory">
            <summary>
            Determines max number of UpdateTransaction objects we maintain in update transaction log in Database 0, initially set to 9990
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.NotifyBeforeCommit">
            <summary>
            Set to an Action of your choice if you want to get notified right before commit of an update transaction.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.EnableSyncByTrackingChanges">
            <summary>
            Enable database and page change tracking. Turn off within an update transaction so that prior change set can be deleted.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.UpdatedOids">
            <summary>
            Collected <see cref="T:VelocityDb.Oid"/> for updated objects within an update transaction. 
            Ids are only collected if <see cref="P:VelocityDb.Session.SessionBase.NotifyBeforeCommit"/> is non null.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.NewOids">
            <summary>
            Collected <see cref="T:VelocityDb.Oid"/> for newly persisted objects within an update transaction. 
            Ids are only collected if <see cref="P:VelocityDb.Session.SessionBase.NotifyBeforeCommit"/> is non null.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DeletedOids">
            <summary>
            Collected <see cref="T:VelocityDb.Oid"/> for unpersisted objects within an update transaction. 
            Ids are only collected if <see cref="P:VelocityDb.Session.SessionBase.NotifyBeforeCommit"/> is non null.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.BTreeAddFastTransientBatchSize">
            <summary>
            Default batch size for BTree AddFast api, initially set to 100
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DefaultCompressPages">
            <summary>
            By default false, set to true if you want to change the default for newly created <see cref="T:VelocityDb.DatabaseLocation"/>.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.IsWorkerThread">
            <summary>
            Tell if code is executed by index or page write worker thread
            </summary>
            <returns>True, if worker thread is active thread; otherwise false</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.AddToIndexInSeperateThread">
            <summary>
            Allow adding objects to indices to be done in a worker thread instead of in main thread.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Allow object serialization and page writes to happen in worker threads, one per database, instead of in main session thread.
            <see cref="P:VelocityDb.Session.SessionBase.AddToIndexInSeperateThread"/> must also be enabled for this to work.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.StrongReferenceDatabaseCaching">
            <summary>
            Is current session caching <see cref="T:VelocityDb.Database"/>s using strong references or just by weak references.
            Set in session constructor or by calling <see cref="M:VelocityDb.Session.SessionBase.CrossTransactionCacheAllDatabases(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.MinStringLengthToIntern">
            <summary>
            Get the minimum size a string must have before VelocityDB internals interns, <see cref="M:System.String.Intern(System.String)"/>, string when read from a <see cref="T:VelocityDb.Database"/>.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.MaxStringLengthToIntern">
            <summary>
            Get the maximum size a string must have before VelocityDB internals interns, <see cref="M:System.String.Intern(System.String)"/>, string when read from a <see cref="T:VelocityDb.Database"/>.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetMinMaxStringIntern(System.UInt16,System.UInt16)">
            <summary>
            A persistent string read into memory from a <see cref="T:VelocityDb.Database"/> is interned using <see cref="M:System.String.Intern(System.String)"/> to speed up comparisons and conserve memory (when the same string occurs in many places)
            </summary>
            <param name="minSize">Selected minimum plus one string length of a string to be interned</param>
            <param name="maxSize">Selected maximum string length for a string to be interned</param>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.BaseDatabasePath">
            <summary>
            If specified boot path (system database path) in session constructor isn't an absolute path then this base path is prefixed to make an absolute path.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum,System.Boolean,System.Boolean)">
            <summary>
            Constructor for the base session class
            </summary>
            <param name="systemDir">A directory for your startup/default <see cref="T:VelocityDb.DatabaseLocation"/> This directory is the home for databases: 0.odb, 1.odb, 2.odb ...</param>
            <param name="systemHost">The host owning the startup directory</param>
            <param name="waitForLockMilliseconds">How long shall we wait for a lock before giving up?</param>
            <param name="optimisticLocking">Is this session requesting optimistic locking?</param>
            <param name="enablePageCache">Is this session going to enable strong reference <see cref="T:VelocityDb.Page"/> caching?</param>
            <param name="objectCachingDefaultPolicy">Determines default value of <see cref="P:VelocityDb.OptimizedPersistable.Cache"/></param>
            <param name="inMemoryOnly">A <see cref="T:VelocityDb.Session.ServerClientSession"/> can optionally be used with in memory only pages and objects, make sure base class knows about it.</param>
            <param name="enableDatabaseCache">Is this session going to enable strong reference <see cref="T:VelocityDb.Database"/> caching?</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.AnyPageWritten(VelocityDb.Database)">
            <summary>
            Find out if any pages have been written for a given database in this update transaction
            </summary>
            <param name="db">The database of interest</param>
            <returns>true if any pages have been written, otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Abort">
            <summary>
            Transaction control, abort the current transaction
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.EnableAutoPageFlush">
            <summary>
            Pages may be flushed when memory available is low unless you set tis property to false. You would want it to be enabled unless you are trying to share a non SessionNoServerShared session by working on different databases in multiple threads. As in Wikipedia sample application.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.WaitForIndexUpdates(System.Boolean)">
            <summary>
            Internal Use and in VelocityDBExtensions
            </summary>
            <param name="throwIfError"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.AllObjects``1(System.Boolean,System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in all Databases
            </summary>
            <typeparam name="T">The type of object we are looking for</typeparam>
            <param name="includeSubclasses">Also return instances of sub classes or classes that implements the specified interface class</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
            <returns>The enumeration wrapper object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets an object used for enumerating all objects in all Databases
            </summary>
            <param name="type">Type to look for</param>
            <param name="includeSubclasses">Also return instances of sub classes or classes that implements the specified interface class</param>
            <param name="databasePerType">Assume that persisted objects where made persistent the simple way using <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/>. When persisting this way, each object type gets its own <see cref="T:VelocityDb.Database"/> which makes finding these objects easier and faster</param>
            <returns>The enumeration wrapper <see cref="M:VelocityDb.Session.SessionBase.OfType(System.Type,System.Boolean,System.Boolean)"/>object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1">
            <summary>
            Gets an index of all objects of a certain type
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <returns>The index</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1(VelocityDb.Database)">
            <summary>
            Gets an index of all objects of a certain type within a given database (attribute OnePerDatabase must be used).
            If you have updated objects persisted in a prior transaction that you want part of an index. Call <see cref="M:VelocityDb.Session.SessionBase.FlushUpdates"></see>
            or call <see cref="M:VelocityDb.OptimizedPersistable.Write"></see>/> to add such an object to index before querying using an index./>
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <param name="inDatabase">Use index as created within this <see cref="T:VelocityDb.Database"/></param>
            <returns>The index</returns>    
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1(System.String)">
            <summary>
            Gets an index of all objects of a certain type
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <param name="indexedByFieldName">The field used for sorting the indexed objects</param>
            <returns>The index</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Index``1(System.String,VelocityDb.Database)">
            <summary>
            Gets an index of all objects of a certain type within a given database (attribute OnePerDatabase must be used)
            </summary>
            <typeparam name="T">The type of object indexed</typeparam>
            <param name="indexedByFieldName">The field used for sorting the indexed objects</param>
            <param name="inDatabase">Database containing index</param>
            <returns>The index</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.AssumeLocalHost">
            <summary>
            SessionNoServer ignores DatabaseLocation host value, it assumes localhost, ServerSessionClient does not assume local host, it follows the DatabaseLocation HostName value.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ForceDatabaseCacheValidation">
            <summary>
            Cached data is set to be validated whenever a new transaction is started. 
            This function is provided as a way to force cache validation within a transaction without requiring a commit followed by a new transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.PossiblyInvalidateCachedSlots">
            <summary>
            Invalidates cached objects in all databases if at least one database was updated
            </summary>
            <returns><c>true</c> if any database was updated; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ReplacePersistedType(System.Type,System.Type)">
            <summary>
            Updates the <see cref="T:System.Type"/> assocuiated with a <see cref="T:VelocityDb.TypeInfo.VelocityDbType"/>. This can be used when you want to rename a class or move a class to a different namespace.
            You will need to have the prior <see cref="T:System.Type"/> loaded as it it is defined in the current <see cref="T:VelocityDb.TypeInfo.Schema"/> for this to work. Once the update has been done, you should no longer need
            to keep the old <see cref="T:System.Type"/> loaded.  Be sure to backup all your data before doing this.
            </summary>
            <param name="oldType">The <see cref="T:System.Type"/> currently used within the <see cref="T:VelocityDb.TypeInfo.Schema"/></param>
            <param name="newType">The <see cref="T:System.Type"/> you want to replace with in the <see cref="T:VelocityDb.TypeInfo.Schema"/>. This new <see cref="T:System.Type"/> must NOT already be part of the schema.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ReplacePersistedType(System.String,System.Type)">
            <summary>
            Updates the <see cref="T:System.Type"/> assocuiated with a <see cref="T:VelocityDb.TypeInfo.VelocityDbType"/>. This can be used when you want to rename a class or move a class to a different namespace.
            You will need to have the prior <see cref="T:System.Type"/> loaded as it it is defined in the current <see cref="T:VelocityDb.TypeInfo.Schema"/> for this to work. Once the update has been done, you should no longer need
            to keep the old <see cref="T:System.Type"/> loaded.  Be sure to backup all your data before doing this.
            </summary>
            <param name="oldTypeFullAssemblyName">The assembly qualified name of the <see cref="T:System.Type"/> currently used within the <see cref="T:VelocityDb.TypeInfo.Schema"/></param>
            <param name="newType">The <see cref="T:System.Type"/> you want to replace with in the <see cref="T:VelocityDb.TypeInfo.Schema"/>. This new <see cref="T:System.Type"/> must NOT already be part of the schema.</param>
            <returns><c>true</c> if old type name was found; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetCachedSchema(System.Boolean)">
            <summary>
            internal use
            </summary>
            <param name="forceRefresh">if <c>true</c>, force refresh of cached schema</param>
            <returns><c>true</c> if schema was refreshed</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginRead(System.Boolean)">
            <summary>
            Transaction control, begin a read only transaction
            </summary>
            <param name="doRecoveryCheck">By default we do not check for a failed update transaction that requires reverting one or more database changes. 
            We don't do it by default because it can be a little costly.
            Change this parameter to <c>true</c> if you prefer ensured consistency over better performance or make change only if you encounter an exception in the transaction.</param>
            <returns>A transaction helper object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginUpdate">
            <summary>
            Transaction control, begin an update transaction.
            </summary>
            <returns>A <see cref="T:VelocityDb.Session.SessionBase.Transaction"/> helper object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.BeginUpdate(System.Boolean)">
            <summary>
            Transaction control, begin an update transaction.
            </summary>
            <param name="doRecoveryCheck">Set to false only when moving system databases to a new directory</param>
            <returns>A <see cref="T:VelocityDb.Session.SessionBase.Transaction"/> helper object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CachedPage(VelocityDb.Database,System.UInt16)">
            <summary>
            Looks for a cached page
            </summary>
            <param name="db">The Database containing the page</param>
            <param name="pageNumber">The page number of the page</param>
            <returns>The cached page or null if not found in cache</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Checkpoint">
            <summary>
            Same as <see cref="M:VelocityDb.Session.SessionBase.Commit(System.Boolean,System.Boolean)"/> followed by <see cref="M:VelocityDb.Session.SessionBase.BeginUpdate"/>
            </summary>
            <returns><see cref="T:VelocityDb.Session.SessionBase.Transaction"/> started</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.ClientCache">
            <summary>
            Gets the client page cache object
            </summary>
            <value>The <see cref="T:VelocityDb.DataCache"/></value>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.IsDisposed">
            <summary>
            Check if session has been disposed
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Dispose(System.Boolean)">
            <summary>
            Aborts and active transaction and closes any network streams.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Close">
            <summary>
            Place for code to be executed when done with a session (much like Dispose()), base version currently does nothing.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCache">
            <summary>
            Clears page cache and closes databases. Avoid using this one for now.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCashedPages">
            <summary>
            Clear cache of cached pages
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearPageCache">
            <summary>
            Clears cached pages from cache including page weak references.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CompareTo(VelocityDb.Session.SessionBase)">
            <summary>
            The defualt compare of two SessionBase is by system (bootup) host name and directory
            </summary>
            <param name="otherSession">The session to compare with</param>
            <returns>-1 if this session is less than the other, 0 if equal, otherwise 1</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CrossTransactionCacheAllDatabases(System.Boolean)">
            <summary>
            By default databases are referenced by strong references instead of <see cref="T:System.WeakReference"/> across transaction boundaries. 
            This means that such Database may or may not be available as a cached database depending on garbage collection activity and if such database also has a strong reference.
            This function lets you add a strong reference to all Databases so the cached Database may be used if version wasn't changed by a different thread since prior transaction.
            A strong reference is removed for any database that get invalidated due to a transaction abort or if another transaction commits a change to it.
            Check current session state with <see cref="P:VelocityDb.Session.SessionBase.StrongReferenceDatabaseCaching"/>
            </summary>
            <param name="enable">Add or remove strong reference. If true, add a strong reference</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CrossTransactionCache(VelocityDb.Database,System.Boolean)">
            <summary>
            By default databases are only referenced by a <see cref="T:System.WeakReference"/> across transaction boundaries. 
            This means that such Database may or may not be available as a cached database depending on garbage collection activity and if such database also has a strong reference.
            This function lets you add a strong reference to a Database so the cached Database may be used if version wasn't changed by a different thread since prior transaction.
            The strong reference is removed once the Database is reopened.
            </summary>
            <param name="db">The Database to cache</param>
            <param name="enable">Add or remove strong reference. If true, add a strong reference</param>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.DatabaseLocations">
            <summary>
            Gets the DatabaseLocations<see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/> for the session.
            </summary>
            <value>The <see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/></value>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CloseDatabase(VelocityDb.Database)">
            <summary>
            Closes a Database
            </summary>
            <param name="db">The Database to close</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CommitPrepare(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="doRecoveryCheck"></param>
            <param name="isRestore"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CommitFinalize">
            <summary>
            Second part of two phase Commit writes out Database 0 updates.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Commit(System.Boolean,System.Boolean)">
            <summary>
            Transaction control, commit the current transaction
            </summary>
            <param name="doRecoveryCheck">Only case for not doing it is when committing a <see cref="M:VelocityDb.Session.SessionBase.RestoreFrom(System.String,System.String,System.UInt32,System.DateTime)"/> </param>
            <param name="isRestore">Inform session that this is part of a restore</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CopyDatabaseTo(VelocityDb.Database,VelocityDb.Database)">
            <summary>
            internal use
            </summary>
            <param name="db">copy from</param>
            <param name="dbClone">copy to</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CopyAllDatabasesTo(System.String,System.Boolean)">
            <summary>
            Copies all databases to a selected directory on the local host.
            </summary>
            <param name="directory">Path to a directory</param>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.Databases">
            <summary>
            Gets a list of the currently opened databases
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DefaultDatabaseLocation">
            <summary>
            Gets the default (startup) DatabaseLocation
            </summary>
            <returns>The <see cref="T:VelocityDb.DatabaseLocation"/> containing at least the system <see cref="T:VelocityDb.Database"/>s (0.odb, 1.odb, 2.odb, 3.odb and 4.odb)</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteDatabase(VelocityDb.Database)">
            <summary>
            Delete a database, actual database file delete happens after a successful transaction commit.
            </summary>
            <param name="db">The <see cref="T:VelocityDb.Database"/> to delete</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Compact">
            <summary>
            Reduce size of databases, if possible, by first attempting to relocate pages to free areas towards the beginning of each <see cref="T:VelocityDb.Database"/> file and then by truncating files where unused space begins.
            Run Compact() outside the scope of any transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Compact(VelocityDb.Database)">
            <summary>
            Reduce size of database, if possible, by truncating file where unused space begins
            </summary>
            <param name="db"><see cref="T:VelocityDb.Database"/> to compact</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdates">
            <summary>
            Write all updated data. This may free up some memory.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdatesServers">
            <summary>
            Make servers Write all updated data. This may free up some memory on the servers. Only effects sessions using VelocityDbServer(s)
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushPageOf(VelocityDb.OptimizedPersistable)">
            <summary>
            By calling this you force a persisted (has an Id) object to be written to disk (if updated) and indices (if any) to be updated. Other objects on the same page page will also be written.
            </summary>
            <param name="pObj">An object indicating what <see cref="T:VelocityDb.Page"/> to flush</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdates(VelocityDb.Database)">
            <summary>
            Write any updated/new pages for a specific Database
            </summary>
            <param name="db">The database for which we want to write all updated pages</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FlushUpdates(VelocityDb.Database,VelocityDb.Internal.DatabaseUpdatedPages,System.Boolean@,System.Boolean)">
            <summary>
            Write all updated data for a particular database. This may free up some memory.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FileOpen(System.IO.FileAccess,System.String@,System.IO.FileShare,System.IO.FileMode,System.Int32,System.Boolean,System.IO.FileInfo,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="fileInfo">Info about file to open</param>
            <param name="fileAccess">Option for file access</param>
            <param name="errorMessage">Error messages stored in this string</param>
            <param name="fileShare">Option for file share</param>
            <param name="fileMode">Option for file mode</param>
            <param name="waitForLockMilliseconds">How long to wait for file to become available for open</param>
            <param name="useExternalStorage">Use sd card (windows phone)</param>
            <param name="signalError">If true, signal error if we fail to open file; otherwise ignore errors and return null</param>
            <returns>File stream of opened file</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FileOpen(System.IO.FileInfo,System.IO.FileAccess,System.String@,System.IO.FileShare,System.IO.FileMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="fileAccess">Option for file access</param>
            <param name="errorMessage">Error messages stored in this string</param>
            <param name="fileShare">Option for file share</param>
            <param name="fileInfo">Info about file to open</param>
            <param name="fileMode">Option for file mode</param>
            <param name="waitForLockMilliseconds">How long to wait for file to become available for open</param>
            <param name="useExternalStorage">Parameter used for WindowsPhone API for accessing memory cards</param>
            <param name="signalError">If true, signal error if we fail to open file; otherwise ignore errors and return null</param>
            <returns>File stream of opened file</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FileOpen(VelocityDb.Database,System.IO.FileAccess,System.String@,System.IO.FileMode,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Opens a <see cref="T:VelocityDb.Database"/>file for read/update. Internal use only.
            </summary>
            <param name="db"><see cref="T:VelocityDb.Database"/> for which we want to open <see cref="T:System.IO.Stream"/></param>
            <param name="fileAccess">Opening for read or update?</param>
            <param name="errorMessage">Used for passing error messages back to caller</param>
            <param name="fileMode"><see cref="T:System.IO.FileMode"/> used for opening file</param>
            <param name="excusiveAccess">Do we want exclusive access to file?</param>
            <param name="waitOverride">How long are we willing to wait for a file lock to clear?</param>
            <param name="signalError">Throw exception if we can't open file within wait time?</param>
            <returns>A <see cref="T:System.IO.Stream"/> used for accessing <see cref="T:VelocityDb.Database"/> data</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.FileShareReader">
            <summary>
            <see cref="T:System.IO.FileShare"/> for reader is <see cref="F:System.IO.FileShare.ReadWrite"/> with optimistic locking; otherwise <see cref="F:System.IO.FileShare.Read"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.FileShareUpdater">
            <summary>
            <see cref="T:System.IO.FileShare"/> for updater is <see cref="F:System.IO.FileShare.Read"/> with optimistic locking; otherwise <see cref="F:System.IO.FileShare.None"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.GetEnumerator">
            <summary>
            Enumerates all open databases for this session
            </summary>
            <returns>Enumeration of open databases</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Dispose">
            <summary>
            Closes this session
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.InCommit">
            <summary>
            Indicates if we are within a transaction commit.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.InTransaction">
            <summary>
            Indicates if we are within an active transaction.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.InUpdateTransaction">
            <summary>
            Indicates if we are within an active update transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RelocateDefaultDatabaseLocation">
            <summary>
            After moving/copying directory containing your <see cref="T:VelocityDb.Database"/>s 0.odb, 1.odb ... call this before starting a transaction to update host and directory of the default <see cref="T:VelocityDb.DatabaseLocation"/>.
            This function does not move the database files, it only updates the <see cref="T:VelocityDb.DatabaseLocation"/>.
            </summary>
            <returns>The default <see cref="T:VelocityDb.DatabaseLocation"/></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RelocateDatabaseLocationFor(System.UInt32,System.String,System.String)">
            <summary>
            After moving/copying directory containing your <see cref="T:VelocityDb.Database"/> with id dbId call this before starting a transaction to update host and directory of the associated <see cref="T:VelocityDb.DatabaseLocation"/>.
            This function does not move the database files, it only updates the <see cref="T:VelocityDb.DatabaseLocation"/>.
            </summary>
            <param name="dbId">Id of one of the <see cref="T:VelocityDb.Database"/>s in location being relocated</param>
            <param name="hostName">New host name</param>
            <param name="directory">New directory path</param>
            <returns>Updated <see cref="T:VelocityDb.DatabaseLocation"/></returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.LocalHost">
            <summary>
            Get the host name of your local host (the machine you are using)
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.LocateDb(System.UInt32)">
            <summary>
            Lookup the <see cref="T:VelocityDb.DatabaseLocation"/> of a <see cref="T:VelocityDb.Database"/> with a specified database number.
            </summary>
            <param name="dbNum">Database id to look for</param>
            <returns>The current <see cref="T:VelocityDb.DatabaseLocation"/> containing the requested <see cref="T:VelocityDb.Database"/>.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ContainsDatabase(VelocityDb.DatabaseLocation,System.UInt32,System.String)">
            <summary>
            Check if database file exist in a given <see cref="T:VelocityDb.DatabaseLocation"/>
            </summary>
            <param name="location">Location to check</param>
            <param name="dbNum">Database number/id</param>
            <param name="extension">File name extension/id</param>
            <returns><c>true</c> if exist; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <summary>
            Create a new Database with a given database number
            </summary>
            <param name="dbNum">Database number of the database to create</param>
            <param name="megaBytesPresize">If you know that the Database will be large, presizing it may avoid file fragmentation. Default value is 0</param>
            <param name="name">Optionally name the new <see cref="T:VelocityDb.Database"/></param>
            <param name="signalError">Optionally signal an error if creation of new <see cref="T:VelocityDb.Database"/> fails</param>
            <returns>The newly created <see cref="T:VelocityDb.Database"/> or throws and exception if the <see cref="T:VelocityDb.Database"/> already exist</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.NewDatabases">
            <summary>
            Get a list of all new databases created within this transaction
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteLocation(VelocityDb.DatabaseLocation,System.Boolean)">
            <summary>
            Deletes a <see cref="T:VelocityDb.DatabaseLocation"/>, location must first mot have any Databases in it
            </summary>
            <param name="location">The DatabaseLocation to delete</param>
            <param name="catalogOnly">Of true, only delete catalog entry. Leave the directory as is.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteObject(System.UInt64)">
            <summary>
            A way to delete an object without requiring that the object be opened first
            </summary>
            <param name="id">The Id of the object to delete</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Unpersist(System.Object)">
            <summary>
            Use this when you want to delete objects that are not assignable as <see cref="T:VelocityDb.IOptimizedPersistable"/>
            </summary>
            <param name="obj">The object to be deleted from persistent storage</param>
            <returns><c>true</c> if object found and deleted; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeletePage(VelocityDb.Database,VelocityDb.Page)">
            <summary>
            Deletes a page from a database. (part of database Sync beta version - not yet fully designed and tested)
            Used by SyncWith when syncing databases with another replica of the current databases
            </summary>
            <param name="db">Database containing page to delete</param>
            <param name="page">Page to delete</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeployGenerateReaderWriter(System.Type,System.String)">
            <summary>
            Part of code generator, not yet ready for public release
            </summary>
            <param name="type">Type to generate reader and writer code for</param>
            <param name="directory">A directory for generated code</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeployInternalTypes(System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="outputDirectory"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.NewLocation(VelocityDb.DatabaseLocation)">
            <summary>
            Creates a new DatabaseLocation or updates existing ones
            </summary>
            <param name="location">The input location</param>
            <returns>The new DatabaseLocation or an existing one</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.ObjectCachingDefaultPolicy">
            <summary>
            Get/Set default value for <see cref="P:VelocityDb.OptimizedPersistable.Cache"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Objects``1">
            <summary>
            Enumerates all the objects of a given type
            </summary>
            <typeparam name="T">The type of object we are looking for</typeparam>
            <returns>An enumeration of type T</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.OptimisticLocking">
            <summary>
            Is the active <see cref="T:VelocityDb.Database"/> and/or <see cref="T:VelocityDb.Page"/> locking using optimistic locking model or not?
            See https://en.wikipedia.org/wiki/Optimistic_concurrency_control and https://en.wikipedia.org/wiki/Record_locking
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.CreateDirectory(System.String)">
            <summary>
            Creates a directory
            </summary>
            <param name="path"></param>
            <returns><c>true</c> if path exist; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DeleteFile(System.IO.FileInfo)">
            <summary>
            Delete a file. For internal use.
            </summary>
            <param name="fileInfo">info about file to delete</param>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.InMemoryOnly">
            <summary>
            Gets information about this session, is it an in-memory only session or a session that persists data
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenPage(VelocityDb.Database,System.UInt16,System.Boolean)">
            <summary>
            Opens a page for read, used by DatabaseManager for page browsing
            </summary>
            <param name="db">Database containing the requested page</param>
            <param name="pageNumber">Page number of the requested page</param>
            <param name="stubOnly">Open page but don't retrieve slot bytes? (lazy load)</param>
            <returns>The requested page</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.GetVersion">
            <summary>
            Gets the version of <see cref="T:VelocityDb.Database"/> 0
            </summary>
            <returns>Database 0 version</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.HighestInUseDatabaseNumber">
            <summary>
            Figure out what the highest in use database number is and return it.
            </summary>
            <returns>The currently largest Database Id in use reachable from this session</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.HighestInUseLocalDatabaseNumber">
            <summary>
            Figure out what the highest in use database number is on the local host and return it.
            </summary>
            <returns>The currently largest Database Id in use reachable from this session located on localhost</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ParseCsvRow(System.String)">
            <summary>
            Parses a row in a csv file and returns an iterator of column string values
            </summary>
            <param name="r">Csv row string data to be parsed</param>
            <returns>Iterator of column values</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.FirstFreePage(VelocityDb.Database,System.UInt16)">
            <summary>
            Gets the page number of the first unallocated page in the specified Database
            </summary>
            <param name="db">The database to query</param>
            <param name="pageNumber">The page number to start search from</param>
            <returns>The first available page number.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.InUseNumberOfPages(VelocityDb.Database)">
            <summary>
            Gets the number of pages currently in use by a Database
            </summary>
            <param name="db">The Database to request info about</param>
            <returns>The number of pages currently in use</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.IsSameHost(System.String,System.String)">
            <summary>
            Determine if two host names represent the same tcp/ip host
            </summary>
            <param name="host1">Host name 1</param>
            <param name="host2">Host name 2</param>
            <returns>True if host is the same; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.IdOf(System.Object)">
            <summary>
            Finds the object id of a persistent object
            </summary>
            <param name="obj">The object to find the id for</param>
            <returns>The object id or 0 if object was not found</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OidOf(System.Object)">
            <summary>
            Finds the object id of a persistent object
            </summary>
            <param name="obj">The object to find the id for</param>
            <returns>The object id or 0 if object was not found</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OidShortOf(System.Object)">
            <summary>
            Finds the object id of a persistent object
            </summary>
            <param name="obj">The object to find the id for</param>
            <returns>The object id or 0 if object was not found</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt64)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="oid">The id of the object to open</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open``1(System.UInt64)">
            <summary>
            Opens a persistent object
            </summary>
            <typeparam name="T">the expected type of the opened object</typeparam>
            <param name="oid">The id of the object to open</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Database,System.UInt64)">
            <summary>
             Opens a persistent object
            </summary>
            <param name="db">Object we are looking for is contained in this database</param>
            <param name="oid">The id of the object to open</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Oid,System.Boolean)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="oid">The id of the object to open</param>
            <param name="update">Open it for update?</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open``1(VelocityDb.Oid,System.Boolean)">
            <summary>
            Opens a persistent object
            </summary>
            <typeparam name="T">the expected type of the opened object</typeparam>
            <param name="oid">The id of the object to open</param>
            <param name="update">Open it for update?</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt32,VelocityDb.OidShort,System.Boolean)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="dbNum">The database number if the object to open</param>
            <param name="oid">The short id (page + slot) of the object to open</param>
            <param name="update">Open it for update?</param>
            <returns>The opened object or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenDatabase(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Opens a Database
            </summary>
            <param name="dbNum">The Database number of the database to open</param>
            <param name="update">Open the Database for update?</param>
            <param name="signalError">Signal errors if errors found when opening the Database?</param>
            <returns>The opened Database</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenDatabaseLocations">
            <summary>
            Open the <see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/> object and store it in the session.
            </summary>
            <returns>The <see cref="P:VelocityDb.Session.SessionBase.DatabaseLocations"/> used by this session</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt32,System.UInt16,System.UInt16,System.Boolean,System.Int32)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="dbNum">Database number of the object to open</param>
            <param name="pageNum">Page number of the object to open</param>
            <param name="slotNum">Slot number of the object to open</param>
            <param name="update">Open the object for update?</param>
            <param name="graphDepthToLoad">Limit depth of graph to open</param>
            <returns>The opened object or null if it does not exist</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt64,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Opens a persistent object
            </summary>
            <param name="oid">The Id of the object to open</param>
            <param name="update">Open the object for update?</param>
            <param name="inFlush">if true, disallow page flushing while opening the object</param>
            <param name="graphDepthToLoad">Set this if you want to limit the depth of the graph loaded by this open.</param>
            <returns>A persistent object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32)">
            <summary>
            For internal usage only, used in generated code
            </summary>
            <param name="db"></param>
            <param name="oid"></param>
            <param name="update"></param>
            <param name="toLoadMembers"></param>
            <param name="inFlush"></param>
            <param name="graphDepth"></param>
            <param name="graphDepthToLoad"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            For internal use only in generated code
            </summary>
            <param name="oid">Id of the object to open</param>
            <param name="update">Update object when opening it</param>
            <param name="toLoadMembers">Internal list of objects to be loaded as part of graph load</param>
            <param name="inFlush">Permit page flushes as side affect of opening object?</param>
            <param name="graphDepth">Current graph depth of graph load</param>
            <param name="graphDepthToLoad">Max graph depth to load</param>
            <param name="signalNotExistError">Signal an exception if object/page/database does not exist.</param>
            <returns>a persistent object</returns>
            <exclude />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            For internal use only in generated code
            </summary>
            <param name="db"></param>
            <param name="oid">Id of the object to open, must match with Database id</param>
            <param name="update">Update object when opening it</param>
            <param name="toLoadMembers">Internal list of objects to be loaded as part of graph load</param>
            <param name="inFlush">Permit page flushes as side affect of opening object?</param>
            <param name="graphDepth">Current graph depth of graph load</param>
            <param name="graphDepthToLoad">Max graph depth to load</param>
            <param name="signalNotExistError">Signal an exception if object/page/database does not exist.</param>
            <returns>a persistent object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenAllDatabases(System.Boolean)">
            <summary>
            Open all databases
            </summary>
            <param name="update">Open for update?</param>
            <returns>List of <see cref="T:VelocityDb.Database"/></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenLocationDatabases(VelocityDb.DatabaseLocation,System.Boolean)">
            <summary>
            Opens all the databases in a given location
            </summary>
            <param name="location">The location for which to open databases</param>
            <param name="update">Shall each database be opened for update?</param>
            <returns>A list of opened databases</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.Placement,VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,System.UInt16,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <summary>
            Persists an object
            </summary>
            <param name="place">Placement object determining where to persist the object</param>
            <param name="pObj">The object to persist</param>
            <param name="schema">The active session schema</param>
            <param name="slotLimitPerPage">Override of how many slots per page to permit</param>
            <param name="inFlush">Set to true to disallow page flushes as a side affect</param>
            <param name="toPersist">A list of objects waiting to be persisted</param>
            <returns>Id of persisted object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.Placement,VelocityDb.IOptimizedPersistable)">
            <summary>
            Persist an object that is an OptimizedPersistable or a subclass
            </summary>
            <param name="place">Provides placement guidance</param>
            <param name="obj">The object to persist</param>
            <returns>The Id of the persistent object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(System.Object,VelocityDb.Placement,System.Boolean)">
            <summary>
            Persist an object that may or may not be a subclass of OptimizedPersistable
            </summary>
            <param name="obj">The object to persist.</param>
            <param name="place">A placement guidance</param>
            <param name="inFlush">If true, disallow page flushing</param>
            <returns>The Id of the persisted object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DatabaseNumberOf(System.Type)">
            <summary>
            Get the database number associated with a specific type. Your application can store any type of object in any database but if the application exclusively 
            use <see cref="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})"/> or <see cref="M:VelocityDb.Session.SessionBase.Persist(System.Object)"/> then this is the database Id that will be used given a type.
            </summary>
            <param name="type">The type for which you want to get the associated database number (Id)</param>
            <returns>The database number associated with the provided type</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})">
            <summary>
            This is the recommended way of persisting objects, it is simple and efficient. Each type is stored in its own database unless object class overrides <see cref="P:VelocityDb.IOptimizedPersistable.PlacementDatabaseNumber"/>
            and returns something other than <see cref="F:VelocityDb.Placement.DefaultPlacementDatabaseNumber"/>.
            </summary>
            <param name="ipObj">The object to make persistent</param>
            <param name="objectsPerPage">Override of objects per page, only respected when persisting first object of some type</param>
            <returns>The Id of the persisted object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(System.Object)">
            <summary>
            This is the recommended way of persisting objects, it is simple and efficient. Each type is stored in its own database.
            </summary>
            <param name="obj">The object to make persistent</param>
            <returns>The Id of the persisted object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Persist(System.Object,VelocityDb.IOptimizedPersistable,System.Boolean)">
            <summary>
            Persist an object that may or may not be a subclass of OptimizedPersistable
            </summary>
            <param name="obj">The object to persist.</param>
            <param name="parent">A parent object of the object to persist.</param>
            <param name="inFlush">If true, disallow page flushing</param>
            <returns>The Id of the persisted object.</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RegisterClass(System.Type)">
            <summary>
            Register a class in the persistent schema.
            It is a good idea to do this explicitly instead of having it happen the first time an object of an unregistered class is made persistent
            </summary>
            <param name="type">The type to register in the persistent schema</param>
            <returns><see cref="T:VelocityDb.TypeInfo.TypeVersion"/> corresponding to type registered</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCachedObjects">
            <summary>
            Clears the cache of cached objects.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ClearCachedObjects(VelocityDb.Database)">
            <summary>
            Clears the cache of cached objects within a <see cref="T:VelocityDb.Database"/>.
            </summary>
            <param name="db">Clear cached objects within this database.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.DatabaseStillExist(VelocityDb.Database)">
            <summary>
            Check if <see cref="T:VelocityDb.Database"/> still exist
            </summary>
            <param name="db"><see cref="T:VelocityDb.Database"/> to check</param>
            <returns><c>true</c> if exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.MoveFile(VelocityDb.Database,System.String)">
            <summary>
            Move a .new file to .odb when a new <see cref="T:VelocityDb.Database"/> has been committed.
            </summary>
            <param name="db">Database owning the file</param>
            <param name="newPath">Full path of moved <see cref="T:VelocityDb.Database"/></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.LoadUpToDateDatabasePageFromStream(VelocityDb.Database,VelocityDb.TypeInfo.Schema,System.IO.Stream,System.Boolean@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Instantiates up to date Database object from database file data. Used by AzureSession
            </summary>
            <param name="dbReadOnly">Current version of the database as in session cache</param>
            <param name="schema">Current schema</param>
            <param name="readStream">Stream to read from</param>
            <param name="updated"><c>true</c> if <see cref="T:VelocityDb.Database"/> was updated</param>
            <param name="forceReplace">Force replacing cached database object with new one</param>
            <param name="asUpdated">Indicates if we want to update <see cref="T:VelocityDb.Database"/></param>
            <param name="signalError">Indicates if we want to throw an exception if we can't open <see cref="T:VelocityDb.Database"/></param>
            <returns><see cref="T:VelocityDb.Database"/> object as was or an updated version of it</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.LoadFields(VelocityDb.IOptimizedPersistable,System.Int32)">
            <summary>
            Loads all field values of an object if they are not already loaded.
            </summary>
            <param name="pObj">Persistent object for which to load field values.</param>
            <param name="depth">Set this if you want to limit the depth of the graph loaded by this open.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.reopenLocalDatabaseForRead(VelocityDb.Database,VelocityDb.TypeInfo.Schema,System.Boolean@,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Used with OptemisticLocking, reopen Database so that we can detect an updated database with updated page offsets
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RestoreFrom(System.String,System.String,System.UInt32,System.DateTime)">
            <summary>
            Restores a <see cref="T:VelocityDb.DatabaseLocation"/>
            </summary>
            <param name="host">Host name of backup</param>
            <param name="path">Directory path to backup</param>
            <param name="backupDbNum">Initial database number used by backup <see cref="T:VelocityDb.DatabaseLocation"/></param>
            <param name="upToTime">Restore data up to this time</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.ReplacePage(VelocityDb.Database,VelocityDb.Page,VelocityDb.Page)">
            <summary>
            Only to be used in VelocityDbExtensions while syncing databases
            </summary>
            <param name="databaseToUpdate">Database being synced</param>
            <param name="pageToUpdate">Page to sync</param>
            <param name="pageToRead">Page to sync from</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.RestoreFrom(VelocityDb.DatabaseLocation,System.DateTime)">
            <summary>
            Restores Databases and pages from a backup DatabaseLocation. Existing data will be merged with the restored data unless existing Databases to restore are deleted before the restore.
            </summary>
            <param name="backupLocation">The location to restore from</param>
            <param name="upToTime">Restore location up to a given DateTime. Data backed up after this time will not be restored.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.GlobalObjWrapperGet(System.Object,VelocityDb.IOptimizedPersistable@)">
            <summary>
            Lookup wrapper object for a non IOptimizedPersistable object
            </summary>
            <param name="lookupObj">object to look for</param>
            <param name="pObj">wrapper object</param>
            <returns>Wrapper object</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.OpenSchema(System.Boolean)">
            <summary>
            Get the session active schema
            </summary>
            <param name="update">Do update the schema?</param>
            <returns>The active schema</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.TransactionNumber">
            <summary>
            Gets the transaction number of the current session
            </summary>
            <value>The transaction number</value>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.TryDatabase(VelocityDb.Placement)">
            <summary>
            Gets the current database to try
            </summary>
            <param name="place">the placement object to retrieve from</param>
            <returns>A database or null if not cached</returns>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.UseExternalStorageApi">
            <summary>
            This is specifically for Windows Phone API, set to true when you want to access databases from a memory card.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateDatabase(VelocityDb.Database)">
            <summary>
            Request an update lock on a database
            </summary>
            <param name="db">The database to update</param>
            <returns>true if Database was updated, otherwise throws an exception</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateClass(System.Type)">
            <summary>
            Let VelocityDB know that changes have been made to a class so that the schema manager will create a new <see cref="T:VelocityDb.TypeInfo.TypeVersion"/> and use the new version for all new objects of the specified Type.
            </summary>
            <param name="type">The type that has been updated (new/removed/modified fields)</param>
            <returns>The new Type description</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.PossiblyFlushUpdatedPages(System.UInt32)">
            <summary>
            Call this function if you may have updated many pages to possibly free up memory if too much memory is in use.
            </summary>
            <param name="numberOfUpdatedPagesPermittedWithoutFlushCheck">Only do check if the number of updated pages is greater than this number</param>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.TraceIndexUsage">
            <summary>
            If set to true, each time an index (BTreeSet) is used in a LINQ query expression, we output a line about that to the console output.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetTraceAllDbActivity(System.Boolean)">
            <summary>
            Enable some Trace output about persistent events related to all databases and pages. Add a Trace listener to get to Console window: Trace.Listeners.Add(new ConsoleTraceListener());
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SetTraceDbActivity(System.UInt32)">
            <summary>
            Enable some Trace output about persistent events related to a Database. Add a Trace listener to get to Console window: Trace.Listeners.Add(new ConsoleTraceListener());
            </summary>
            <param name="dbId">The Database number of the Database to enable persistent trace information for.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.SubscribeToChanges(System.Type,System.String)">
            <summary>
            Subscribe to committed database changes of instances of a type when an an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a Boolean property. When property returns true, a change notification is send otherwise no notification is send. Leave as null to get a notification any time any instance of the selected type changes</param>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.SystemDirectory">
            <summary>
            Get the path to the directory of the system <see cref="T:VelocityDb.Database"/>s (0.odb, 1.odb, 2.odb ...) of this session.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.SystemHostName">
            <summary>
            Get the host name of the system <see cref="T:VelocityDb.Database"/>s (0.odb, 1.odb, 2.odb ...) of this session.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.StringToType(System.String)">
            <summary>
            Gets a <see cref="T:System.Type"/> given a string representation of a type
            </summary>
            <param name="typeAsString">The string representation of a <see cref="T:System.Type"/></param>
            <returns>Type from string</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UnsubscribeToChanges(System.Type,System.String)">
            <summary>
            Unsubscribe to committed database changes of instances of a type when an optional property evaluates to true.
            </summary>
            <param name="aType">The type you are no longer interested in being notified about when persistent instances changes within a database.</param>
            <param name="notifyIfTrueProperty">The name of a property part of the type specified as aType, this should be a Boolean property.</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdatePage(VelocityDb.Page@)">
            <summary>
            Update a <see cref="T:VelocityDb.Page"/>. Used by VelocityDBExtensions project
            </summary>
            <param name="page"><see cref="T:VelocityDb.Page"/> to update</param>
            <returns><c>true</c> if updated OK; otherwise <c>false</c></returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <summary>
            Updates an object
            </summary>
            <param name="obj">Object to be updated</param>
            <param name="inFlush">Are we doing this as part of a page flush? Set to true to avoid a recursive page flush</param>
            <param name="deleteObjFromIndexes">Set to false if you know that this object is not part of any index. Safe to leave set to true in any case</param>
            <returns>True if object is updated; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(System.Object)">
            <summary>
            Tag an object as updated so that it will be updated persistently
            </summary>
            <param name="obj">The object to update.</param>
            <returns><c>true</c> if object updated; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(System.Object,System.Action)">
            <summary>
            Provides a way to update an object in a multi thraeded scenario where we must make sure that object page isn't flushed until updates to object are done.
            </summary>
            <param name="obj">Object to update</param>
            <param name="codeBlock">Block of code doing actual update to the object</param>
            <returns><c>true</c> if object updated; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(VelocityDb.IOptimizedPersistable)">
            <summary>
            Tag an object as updated so that it will be updated persistently
            </summary>
            <param name="obj">The object to update.</param>
            <returns><c>true</c> if object updated; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.UpdateObject(VelocityDb.IOptimizedPersistable,System.Action)">
            <summary>
            Provides a way to update an object in a multi thraeded scenario where we must make sure that object page isn't flushed until updates to object are done.
            </summary>
            <param name="obj">Object to update</param>
            <param name="codeBlock">Block of code doing actual update to the object</param>
            <returns><c>true</c> if object updated; otherwise false</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Verify">
            <summary>
            Verifies that databases are valid by reading and following references. An exception is thrown if an issue is found.
            </summary>
        </member>
        <member name="P:VelocityDb.Session.SessionBase.WaitForLockMilliseconds">
            <summary>
            Get/Set the max time waiting for a lock to clear with pessimistic locking
            </summary>
        </member>
        <member name="T:VelocityDb.Session.SessionBase.Transaction">
            <summary>
            Helper object to enable automatic rollback/abort of transaction if transaction isn't committed within it's scope.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Transaction.#ctor(VelocityDb.Session.SessionBase)">
            <summary>
            Internal Use, returned when starting a <see cref="T:VelocityDb.Session.SessionBase"/> transaction 
            </summary>
            <param name="session">The active session</param>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Transaction.Rollback">
            <summary>
            Aborts the current transaction and rolls it back. Same as <see cref="M:VelocityDb.Session.SessionBase.Abort"/>
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Transaction.Commit">
            <summary>
            Commits the active transaction
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.Transaction.Dispose">
            <summary>
            If in update transaction; rollback (abort) transaction. If in read only transaction; commit transaction.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionBase.System#Transactions#IEnlistmentNotification#Prepare(System.Transactions.PreparingEnlistment)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.System#Transactions#IEnlistmentNotification#Commit(System.Transactions.Enlistment)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.System#Transactions#IEnlistmentNotification#Rollback(System.Transactions.Enlistment)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionBase.System#Transactions#IEnlistmentNotification#InDoubt(System.Transactions.Enlistment)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Session.TypeExtensions">
            <summary>
            Some extensions to Type
            </summary>
        </member>
        <member name="M:VelocityDb.Session.TypeExtensions.ToGenericTypeString(System.Type,System.Type[])">
            <summary>
            Gets a string representation of a Type corresponding to how it looks in C# code
            </summary>
            <param name="t">The type to get the string for</param>
            <param name="arg">Internally used parameter (optional)</param>
            <returns>A string representation of a type</returns>
        </member>
        <member name="M:VelocityDb.Session.TypeExtensions.ExpandsToNonPrimitiveTypes(System.Type)">
            <summary>
            Used by Database Manager
            </summary>
            <param name="t">Type examined</param>
            <returns>true if type does; otherwise false</returns>
        </member>
        <member name="T:VelocityDb.Session.SessionNoServer">
            <summary>
            Use this session class when <see cref="T:VelocityDb.Database"/> level locking is acceptable and <see cref="T:VelocityDb.Database"/>s are local or reachable by UNC paths.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum,System.Boolean)">
            <summary>
            Creates a new session. For a thread safe version of this class, use <see cref="T:VelocityDb.Session.SessionNoServerShared"/>
            </summary>
            <param name="systemDir">The startup location directory path. Path can be an absolute (full) path or a path relative to <see cref="F:VelocityDb.Session.SessionBase.s_baseDatabasePath"/></param>
            <param name="waitForLockMilliseconds">The desired maximum lock wait time</param>
            <param name="optimisticLocking">Use optimistic locking. With optimistic locking, readers are always permitted and multiple updaters are permitted to update the same Databases/Pages but only the first transaction to commit or flush an updated Database/Page will be successful in making the commited chane. Other updaters will get an OptimisticLockingException if they try to commit/flush updates to the same Pages/Database.
            See http://en.wikipedia.org/wiki/Optimistic_concurrency_control for further explanation of optimistic locking. If optimistic locking is not enabled then pessimistic locking is used. See: http://en.wikipedia.org/wiki/Concurrency_control </param>
            <param name="enablePageCache">If strong reference page caching isn't desired, turn it off by setting to false</param>
            <param name="objectCachingDefaultPolicy">Determines default value of <see cref="P:VelocityDb.OptimizedPersistable.Cache"/></param>
            <param name="enableDatabaseCache">Is this session going to enable strong reference <see cref="T:VelocityDb.Database"/> caching?</param>
        </member>
        <member name="P:VelocityDb.Session.SessionNoServer.AssumeLocalHost">
            <summary>
            SessionNoServer ignores DatabaseLocation HostName since it cannot connect to a VelocityDbServer.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.CommitFinalize">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.CommitPrepare(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="doRecoveryCheck"></param>
            <param name="isRestore"></param>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServer.UpdateDatabase(VelocityDb.Database)">
            <summary>
            Request an update lock on a database
            </summary>
            <param name="db">The database to update</param>
            <returns>true if Database was updated, otherwise throws an exception</returns>
        </member>
        <member name="T:VelocityDb.Session.SessionNoServerShared">
            <summary>
            Same as SessionNoServer but SessionNoServerShared is thread safe so it can be shared between threads.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,VelocityDb.CacheEnum,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Abort">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ActualFlushPage(VelocityDb.Page,System.Boolean,System.IO.Stream,System.Collections.Generic.Dictionary{System.UInt16,System.Int64})">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.SessionNoServerShared.AddToIndexInSeperateThread">
            <summary>
            Allow adding objects to indices to be done in a worker thread instead of in main thread.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.BeginRead(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.BeginUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CachedPage(VelocityDb.Database,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Checkpoint">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ClearCache">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ClearCashedPages">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ClearPageCache">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CrossTransactionCache(VelocityDb.Database,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CommitFinalize">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Compact">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Compact(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CopyAllDatabasesTo(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.CopyDatabaseTo(VelocityDb.Database,VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.SessionNoServerShared.Databases">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.DeleteDatabase(VelocityDb.Database,System.Collections.Generic.SortedSet{VelocityDb.Database},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.DeleteLocation(VelocityDb.DatabaseLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.DeletePage(VelocityDb.Database,VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.deleteFromIndexes(VelocityDb.IOptimizedPersistable,VelocityDb.Page,VelocityDb.TypeInfo.TypeVersion,VelocityDb.TypeInfo.TypeVersion)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ExclusiveLockDatabase(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.LicenseCheck">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.LoadMembers(VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,VelocityDb.Page,System.UInt16,System.Int32,System.Byte[],System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Int32,System.Int32,VelocityDb.TypeInfo.TypeVersion,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FileOpen(VelocityDb.Database,System.IO.FileAccess,System.String@,System.IO.FileMode,System.Boolean,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FlushPage(VelocityDb.Page,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},VelocityDb.Internal.DatabaseUpdatedPages,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FlushPageOf(VelocityDb.OptimizedPersistable)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FlushUpdates">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FlushUpdates(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.FlushUpdates(VelocityDb.Database,VelocityDb.Internal.DatabaseUpdatedPages,System.Boolean@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ForceDatabaseCacheValidation">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.GlobalObjWrapperGet(System.Object,VelocityDb.IOptimizedPersistable@)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.GlobalObjWrapperAdd(System.Object,VelocityDb.IOptimizedPersistable)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.getLocalPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.getLocalNextPage(VelocityDb.Placement,System.UInt16,System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.GetNextPage(System.UInt32@,System.UInt16@,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.getPage(VelocityDb.Database,System.Collections.Generic.Dictionary{System.UInt16,System.Int64},System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.ReOpenDatabaseLocations">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.RestoreFrom(VelocityDb.DatabaseLocation,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.optimisticLockingValidate(VelocityDb.Database,VelocityDb.TypeInfo.Schema,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.OpenDatabase(System.UInt32,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.openLocalDatabase(System.UInt32,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,VelocityDb.DatabaseLocations,System.Boolean@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.OpenAllDatabases(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.OpenLocationDatabases(VelocityDb.DatabaseLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.OpenDatabase(System.UInt32,System.Boolean,VelocityDb.TypeInfo.Schema,System.Boolean,System.Boolean@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Persist(VelocityDb.Placement,VelocityDb.IOptimizedPersistable,VelocityDb.TypeInfo.Schema,System.UInt16,System.Boolean,System.Collections.Generic.Queue{VelocityDb.IOptimizedPersistable})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Persist(VelocityDb.IOptimizedPersistable,System.Nullable{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.PossiblyFlushUpdatedPages(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.SubscribeToChanges(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.UpdateDatabase(VelocityDb.Database)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Session.SessionNoServerShared.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Allow object serialization and page writes to happen in worker threads, one per database, instead of in main session thread.
            <see cref="P:VelocityDb.Session.SessionNoServerShared.AddToIndexInSeperateThread"/> must also be enabled for this to work.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Unpersist(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Unstubify(VelocityDb.Page,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.UpdateObject(VelocityDb.IOptimizedPersistable,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.UpdateObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.OpenSchema(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.NewLocation(VelocityDb.DatabaseLocation)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Open(System.UInt32,System.UInt16,System.UInt16,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Open(System.UInt64,System.Boolean,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Open(VelocityDb.Database,System.UInt64,System.Boolean,System.Collections.Generic.List{VelocityDb.IOptimizedPersistable},System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Session.SessionNoServerShared.Verify">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Session.SessionPool">
            <summary>
            Provides a pool of sessions for reuse instead of creating new session instances every time a session is needed.
            The pooled sessions includes cached databases, pages and objects.
            Keep the pool size to a minimum too avoid excessive memory usage.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionPool.#ctor(System.Int32,System.Func{VelocityDb.Session.SessionBase})">
            <summary>
            Creates a session pool, store this pool somewhere where tour application threads can get to it. 
            </summary>
            <param name="poolSize">The maximum number of session maintained in the pool</param>
            <param name="createSessionFunc">A function provided by you that creates a session of your choice with your choice of parameters. Could be something as simple as: () => new SessionNoServer("MyDbDir")</param>
        </member>
        <member name="M:VelocityDb.Session.SessionPool.Dispose">
            <summary>
            Disposes all sessions in this pool
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionPool.Dispose(System.Boolean)">
            <summary>
            Aborts and active sessions and closes any network streams.
            </summary>
        </member>
        <member name="M:VelocityDb.Session.SessionPool.GetSession(System.Int32@)">
            <summary>
            Get a session locked for use by caller.
            </summary>
            <param name="identifier">The id of the returned session. Make sure you always call FreeSession with this id provided or else session is locked forever. One way is to call FreeSession in a finally block.</param>
            <returns>A reserved/locked session</returns>
        </member>
        <member name="M:VelocityDb.Session.SessionPool.FreeSession(System.Int32,VelocityDb.Session.SessionBase)">
            <summary>
            Always call this function so that your session is unlocked and becomes available to others
            </summary>
            <param name="identifier">The identifier provided by <see cref="M:VelocityDb.Session.SessionPool.GetSession(System.Int32@)"/></param>
            <param name="session">The session provided by <see cref="M:VelocityDb.Session.SessionPool.GetSession(System.Int32@)"/></param>
        </member>
        <member name="T:VelocityDb.Sync.Change">
            <summary>
            Used for tracking changes for use with syncing database sessions
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.Change.AllowOtherTypesOnSamePage">
            <summary>
            We only want this type of object on any page containing this type so don't use pages with other type of objects when placing an object of this type
            </summary>
        </member>
        <member name="M:VelocityDb.Sync.Change.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.Sync.Change.CompareTo(VelocityDb.Sync.Change)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.Sync.Change.DatabaseId">
            <summary>
            Database number of changed <see cref="T:VelocityDb.Database"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.Change.PageId">
            <summary>
            Page number of changed <see cref="T:VelocityDb.Page"/>
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.Change.Deleted">
            <summary>
            Is this a change involving a database/page delete
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.Change.Version">
            <summary>
            Version of page being updated
            </summary>
        </member>
        <member name="T:VelocityDb.Sync.Changes">
            <summary>
            Keeps track of changes within a set of databases (a federation). Preliminary version.
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.Changes.ChangeList">
            <summary>
            A list of <see cref="T:VelocityDb.Sync.TransactionChanges"/> made to the federation
            </summary>
        </member>
        <member name="M:VelocityDb.Sync.Changes.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.Sync.NamespaceDoc">
            <summary>    
            The <c>VelocityDb.Sync</c> namespace contains classes for enabling data sync between different sets of databases
            </summary>      
        </member>
        <member name="T:VelocityDb.Sync.ReplicaSync">
            <summary>
            Contains info of latest transaction synced with databases at a specified host and path
            </summary>
        </member>
        <member name="M:VelocityDb.Sync.ReplicaSync.#ctor(VelocityDb.Session.SessionBase,System.UInt64)">
            <summary>
            Creates sync log object
            </summary>
            <param name="syncFromSession">The sync from session</param>
            <param name="transaction">Last transaction synced</param>
        </member>
        <member name="P:VelocityDb.Sync.ReplicaSync.SyncFromPath">
            <summary>
            Path to databases synced with
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.ReplicaSync.SyncFromHost">
            <summary>
            Host of databases synced with
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.ReplicaSync.TransactionNumber">
            <summary>
            Last transaction number synced with
            </summary>
        </member>
        <member name="T:VelocityDb.Sync.TransactionChanges">
            <summary>
            A log of all changes made within a certain transaction.
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.TransactionChanges.ChangeList">
            <summary>
            List of changes made
            </summary>
        </member>
        <member name="P:VelocityDb.Sync.TransactionChanges.TransactionNumber">
            <summary>
            Transaction id for these changes.
            </summary>
        </member>
        <member name="M:VelocityDb.Sync.TransactionChanges.Unpersist(VelocityDb.Session.SessionBase)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDb.ValidationAttribute">
            <summary>
            Base class used to create validation attributes.
            </summary>
        </member>
        <member name="P:VelocityDb.ValidationAttribute.ErrorMessage">
            <summary>
            Gets or sets an error message to associated with a validation control if validation fails.
            </summary>
        </member>
        <member name="P:VelocityDb.ValidationAttribute.ErrorMessageResourceName">
            <summary>
            Gets or sets the error resource name in order to look up the error message
            text from a resource if validation fails.
            </summary>
        </member>
        <member name="P:VelocityDb.ValidationAttribute.ErrorMessageResourceType">
            <summary>
            Gets or sets the resource type to use for message look-up if validation fails.
            </summary>
        </member>
        <member name="M:VelocityDb.ValidationAttribute.IsValid(System.Object)">
            <summary>
            Validates the specified value with respect to
            the current validation attribute.
            </summary>
            <param name="value">Value of the object to validate.</param>
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReference`1">
            <summary>When a persistent object is opened, all its referenced objects are opened as well. In order to limit the number of opened objects, you need to use this class.
            A reference from an instance of this class will not cause the referenced object to be opened. It will be opened when you ask for it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the weak referenced object, must be <see cref="T:VelocityDb.OptimizedPersistable"/></typeparam>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.#ctor(System.UInt64)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            </summary>
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.#ctor(VelocityDb.Oid)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            </summary>
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.#ctor(`0)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object. This object must be persisted before adding as a weak reference.
            </summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReference`1.Id">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReference`1.ShortId">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.GetTarget(System.Boolean,VelocityDb.Session.SessionBase)">
            <summary>
            Gets the persistent object referenced by the weak reference
            </summary>
            <param name="update">Open the persistent object for update?</param>
            <param name="session">The session managing the persistent object</param>
            <returns>The object referenced by this weak reference</returns>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReference`1.ToString">
            <summary>Append the Oid of the referenced object to the string.</summary>
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReferenceX`1">
            <summary>Deprecated, use WeakIOptimizedPersistableReference instead (so name conflict can be avoided)
            When a persistent object is opened, all its referenced objects are opened as well. In order to limit the number of opened objects, you need to use this class.
            A reference from an instance of this class will not cause the referenced object to be opened. It will be opened when you ask for it.
            <typeparam name="T">The <see cref="T:System.Type"/> of the weak referenced object, must be <see cref="T:VelocityDb.OptimizedPersistable"/></typeparam>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.#ctor(System.UInt64)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.#ctor(VelocityDb.Oid)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object
            <param name="oid">Can be created using Oid.Encode(databaseNumber, pageNumber, pageNumber)</param>
            </summary>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.#ctor(`0)">
            <summary>
            Creates a weak reference to some OptimizedPersistable object. This object must be persisted before adding as a weak reference.
            </summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceX`1.Id">
            <inheritdoc />
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceX`1.ShortId">
            <inheritdoc />
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.GetTarget(System.Boolean,VelocityDb.Session.SessionBase)">
            <summary>
            Gets the persistent object referenced by the weak reference
            </summary>
            <param name="update">Open the persistent object for update?</param>
            <param name="session">The session managing the persistent object</param>
            <returns>The object referenced by this weak reference</returns>
        </member>
        <member name="M:VelocityDb.WeakIOptimizedPersistableReferenceX`1.ToString">
            <summary>Append the Oid of the referenced object to the string.</summary>
        </member>
        <member name="T:VelocityDb.WeakIOptimizedPersistableReferenceBase">
            <summary>This is the base class for all weak references.</summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceBase.Id">
            <summary>
            Id of weak referenced object
            </summary>
        </member>
        <member name="P:VelocityDb.WeakIOptimizedPersistableReferenceBase.ShortId">
            <summary>
            Short reference ID of weak reference
            </summary>
        </member>
        <member name="T:VelocityDB.LZ4n.LZ4Codec">
            <summary>Unsafe LZ4 codec.</summary>
        </member>
        <member name="F:VelocityDB.LZ4n.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:VelocityDB.LZ4n.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.BlockCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>Copies block of memory.</summary>
            <param name="src">The source.</param>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.BlockFill(System.Byte*,System.Int32,System.Byte)">
            <summary>Copies block of memory.</summary>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64(System.Byte*,System.Byte*,System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Decode64(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:VelocityDB.LZ4n.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:VelocityDB.Server.FederationServer.RequestsLoop">
            <summary>
            The main loop processing requests from all clients
            </summary>
        </member>
        <member name="M:VelocityDB.Server.FederationServerReplication.RequestsLoop">
            <summary>
            The main loop processing requests from all clients
            </summary>
        </member>
        <member name="T:VelocityDB.Server.NamespaceDoc">
            <summary>    
            The <c>VelocityDB.Server</c> namespace contains classes used only by VelocityDBServer.
            </summary>      
        </member>
        <member name="P:VelocityDB.Server.ServerClient.AddToIndexInSeperateThread">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDB.Server.ServerClient"/>.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerClient.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Write threads not yet available with <see cref="T:VelocityDB.Server.ServerClient"/>.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerClient.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDB.Server.ServerClientReplicationSlave.FederationServer">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDB.Server.ServerClient"/>.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerClientReplicationSlave.newDatabase(VelocityDB.Server.ServerTcpClient)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDB.Server.ServerSession.AddToIndexInSeperateThread">
            <summary>
            Indexing thread not yet available with <see cref="T:VelocityDB.Server.ServerSession"/>.
            </summary>
        </member>
        <member name="P:VelocityDB.Server.ServerSession.WriteToDiskInSeperateDatabaseThreads">
            <summary>
            Write threads not yet available with <see cref="T:VelocityDB.Server.ServerSession"/>.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerSession.BeginRead(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDB.Server.ServerSession.InTransaction">
            <summary>
            Indicates if we are within an active transaction.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerSlaveSession.CommitFinalize">
            <inheritdoc />
        </member>
        <member name="M:VelocityDB.Server.ServerSlaveSession.CommitPrepare(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:VelocityDB.Server.ServerSlaveSession.InTransaction">
            <summary>
            Indicates if we are within an active transaction.
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerSlaveSession.NewDatabase(System.UInt32,System.UInt32,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:VelocityDB.Server.ServerTcpClient">
            <summary>
            The main class for handling messages to VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClient.s_shutdown">
            <summary>
            Controls when to shut down the server
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClient.s_odbServerLog">
            <summary>
            A log of errors and events happening in this VelocityDbServer
            </summary>
        </member>
        <member name="F:VelocityDB.Server.ServerTcpClient.s_acceptDone">
            <summary>
            Sync of Accept calls
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Constructs a server client which manages a remote or local ServerClientSession
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.Abort">
            <summary>
            Aborts a client transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.AcceptTcpClient(System.IAsyncResult)">
            <summary>
            Accepts connections
            </summary>
            <param name="ar">Wrapps a TcpListener</param>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.DoWaitWork">
            <summary>
            Do some memory management work or disk flushes while client isn't busy
            </summary>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.Connect">
            <summary>
            Handle a connect request
            </summary>
            <returns>A reply to a connect request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.connectSlave">
            <summary>
            Handles a ConnectSlaveRequest
            </summary>
            <returns>Reply to request</returns>
        </member>
        <member name="M:VelocityDB.Server.ServerTcpClient.processRequest(System.Byte[]@,System.Boolean@,System.Boolean@)">
            <summary>
            Dispatcher of all kinds of requests
            </summary>
            <param name="pageInfoBytes">Some requests return PageInfo bytes using this parameter</param>
            <param name="error">Is set to true if any errors happened</param>
            <param name="pageStatusOnly">Is set to true if page status returned (not bytes)</param>
            <returns>Reply to a request</returns>
        </member>
        <member name="P:VelocityDB.Server.ServerTcpClient.IsSlave">
            <summary>
            Is this Server client a slave (not master - not owning Db 1- 10) ?
            </summary>
        </member>
        <member name="T:VelocityDB.Server.WeakReferenceSet`1">
            <summary>
            List with an Id containing object Ids ordered by index.
            </summary>
            <typeparam name="T">The type of objects contained in this kind of list</typeparam>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.Add(`0)">
            <summary>
            Adds an item to a list
            </summary>
            <param name="item">item being added</param>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.BinarySearch(`0,System.Boolean@)">
            <summary>
            Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="aKey">The object to locate</param>
            <param name="isEqual">True if match is found; otherwise false</param>
            <returns>The index of the object if found; otherwise index at which located would be located</returns>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.Clear">
            <summary>
            Removes all items from the list and frees the array
            </summary>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.Contains(`0)">
            <summary>
            Checks if an item is contained in the list
            </summary>
            <param name="item">the item to look for</param>
            <returns>true if item was found; otherwise false</returns>
        </member>
        <member name="P:VelocityDB.Server.WeakReferenceSet`1.Count">
            <summary>
            Number of items in list
            </summary>  
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates items in a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.IndexOf(`0)">
            <summary>
            Finds the first index of an item
            </summary>
            <param name="item">item to look for</param>
            <returns>-1 if item was not found or first index of item</returns>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index
            </summary>
            <param name="index">insert at this index</param>
            <param name="item">the item being inserted</param>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index
            </summary>
            <param name="index">the index of the item to remove</param>
        </member>
        <member name="P:VelocityDB.Server.WeakReferenceSet`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at a certain index
            </summary>
            <param name="index">the item index</param>
            <returns>the item at the specified index</returns>
        </member>
        <member name="P:VelocityDB.Server.WeakReferenceSet`1.IsSynchronized">
            <summary>
            Always false
            </summary>
        </member>
        <member name="M:VelocityDB.Server.WeakReferenceSet`1.TryGetValue(`0,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
    </members>
</doc>
