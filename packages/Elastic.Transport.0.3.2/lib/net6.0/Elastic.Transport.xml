<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Elastic.Transport</name>
    </assembly>
    <members>
        <member name="T:Elastic.Transport.CloudNodePool">
             <summary>
             An <see cref="T:Elastic.Transport.NodePool" /> implementation that can be seeded with a cloud id
             and will signal the right defaults for the client to use for Elastic Cloud to <see cref="T:Elastic.Transport.ITransportConfiguration" />.
            
             <para>Read more about Elastic Cloud Id:</para>
             <para>https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html</para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.CloudNodePool.#ctor(System.String,Elastic.Transport.IAuthenticationHeader,Elastic.Transport.IDateTimeProvider)">
             <summary>
             An <see cref="T:Elastic.Transport.NodePool" /> implementation that can be seeded with a cloud id
             and will signal the right defaults for the client to use for Elastic Cloud to <see cref="T:Elastic.Transport.ITransportConfiguration" />.
            
             <para>Read more about Elastic Cloud Id here</para>
             <para>https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html</para>
             </summary>
             <param name="cloudId">
             The Cloud Id, this is available on your cluster's dashboard and is a string in the form of <code>cluster_name:base_64_encoded_string</code>
             <para>Base64 encoded string contains the following tokens in order separated by $:</para>
             <para>* Host Name (mandatory)</para>
             <para>* Elasticsearch UUID (mandatory)</para>
             <para>* Kibana UUID</para>
             <para>* APM UUID</para>
             <para></para>
             <para> We then use these tokens to create the URI to your Elastic Cloud cluster!</para>
             <para></para>
             <para> Read more here: https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html</para>
             </param>
             <param name="credentials"></param>
             <param name="dateTimeProvider">Optionally inject an instance of <see cref="T:Elastic.Transport.IDateTimeProvider" /> used to set <see cref="P:Elastic.Transport.NodePool.LastUpdate" /></param>
        </member>
        <member name="P:Elastic.Transport.CloudNodePool.AuthenticationHeader">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.IAuthenticationHeader" /> describing what http header to use to authenticate with the product.
            <para><see cref="T:Elastic.Transport.BasicAuthentication" /> for basic authentication</para>
            <para><see cref="T:Elastic.Transport.ApiKey" /> for simple secret token</para>
            <para><see cref="T:Elastic.Transport.Base64ApiKey" /> for Elastic Cloud style encoded api keys</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.CloudNodePool.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Elastic.Transport.Node">
            <summary>
            Represents an endpoint <see cref="P:Elastic.Transport.Node.Uri" /> with additional associated metadata on which the <see cref="T:Elastic.Transport.ITransport`1" /> can act.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Node.#ctor(System.Uri,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Represents an endpoint <see cref="P:Elastic.Transport.Node.Uri" /> with additional associated metadata on which the <see cref="T:Elastic.Transport.ITransport`1" /> can act.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Node.Features">
            <summary>
            A readonly collection backed by an <see cref="T:System.Collections.Generic.HashSet`1" /> that signals what features are enabled on the node.
            <para> This is loosely typed as to be agnostic to what solution the transport ends up talking to </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Node.Settings">
            <summary>
            Settings as returned by the server, can be used in various ways later on. E.g <see cref="P:Elastic.Transport.ITransportConfiguration.NodePredicate" /> can use it
            to only select certain nodes with a setting
            </summary>
        </member>
        <member name="P:Elastic.Transport.Node.Id">
            <summary>The id of the node, defaults to null when unknown/unspecified</summary>
        </member>
        <member name="P:Elastic.Transport.Node.Name">
            <summary>The name of the node, defaults to null when unknown/unspecified</summary>
        </member>
        <member name="P:Elastic.Transport.Node.Uri">
            <summary> The base endpoint where the node can be reached </summary>
        </member>
        <member name="P:Elastic.Transport.Node.IsAlive">
            <summary>
            Indicates whether the node is alive. <see cref="T:Elastic.Transport.ITransport`1" /> can take nodes out of rotation by calling
            <see cref="M:Elastic.Transport.Node.MarkDead(System.DateTime)" /> on <see cref="T:Elastic.Transport.Node" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Node.DeadUntil">
            <summary> When marked dead this reflects the date that the node has to be taken out of rotation till</summary>
        </member>
        <member name="P:Elastic.Transport.Node.FailedAttempts">
            <summary> The number of failed attempts trying to use this node, resets when a node is marked alive</summary>
        </member>
        <member name="P:Elastic.Transport.Node.IsResurrected">
            <summary> When set this signals the transport that a ping before first usage would be wise</summary>
        </member>
        <member name="M:Elastic.Transport.Node.HasFeature(System.String)">
            <summary>
            Returns true if the <see cref="P:Elastic.Transport.Node.Features" /> has <paramref name="feature" /> enabled, or NO features are known on the node.
            <para>The assumption being if no <see cref="P:Elastic.Transport.Node.Features" /> have been discovered ALL features are enabled</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Node.MarkDead(System.DateTime)">
            <summary>
            Marks this node as dead and set the date (see <paramref name="untill" />) after which we want it to come back alive
            </summary>
            <param name="untill">The <see cref="T:System.DateTime" /> after which this node should be considered alive again</param>
        </member>
        <member name="M:Elastic.Transport.Node.MarkAlive">
            <summary> Mark the node alive explicitly </summary>
        </member>
        <member name="M:Elastic.Transport.Node.CreatePath(System.String)">
            <summary>
            Use the nodes uri as root to create a <see cref="P:Elastic.Transport.Node.Uri" /> with <paramref name="path" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Node.Clone">
            <summary>
            Create a clone of the current node. This is used by <see cref="T:Elastic.Transport.NodePool" /> implementations that supports reseeding the
            list of nodes through <see cref="M:Elastic.Transport.NodePool.Reseed(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Node.Equals(Elastic.Transport.Node)">
            <summary> Two <see cref="T:Elastic.Transport.Node" />'s that point to the same <see cref="P:Elastic.Transport.Node.Uri" /> are considered equal</summary>
        </member>
        <member name="M:Elastic.Transport.Node.op_Equality(Elastic.Transport.Node,Elastic.Transport.Node)">
            <summary> Two <see cref="T:Elastic.Transport.Node" />'s that point to the same <see cref="P:Elastic.Transport.Node.Uri" /> are considered equal</summary>
        </member>
        <member name="M:Elastic.Transport.Node.op_Inequality(Elastic.Transport.Node,Elastic.Transport.Node)">
            <summary> Two <see cref="T:Elastic.Transport.Node" />'s that point to the same <see cref="P:Elastic.Transport.Node.Uri" /> are considered equal</summary>
        </member>
        <member name="M:Elastic.Transport.Node.op_Implicit(System.Uri)~Elastic.Transport.Node">
            <summary> Two <see cref="T:Elastic.Transport.Node" />'s that point to the same <see cref="P:Elastic.Transport.Node.Uri" /> are considered equal</summary>
        </member>
        <member name="M:Elastic.Transport.Node.Equals(System.Object)">
            <summary> Two <see cref="T:Elastic.Transport.Node" />'s that point to the same <see cref="P:Elastic.Transport.Node.Uri" /> are considered equal</summary>
        </member>
        <member name="M:Elastic.Transport.Node.GetHashCode">
            <summary> A nodes identify is solely based on its <see cref="P:Elastic.Transport.Node.Uri" /> </summary>
        </member>
        <member name="T:Elastic.Transport.NodePool">
            <summary>
            A node pool is responsible for maintaining a read only collection of <see cref="T:Elastic.Transport.Node" />(s) under <see cref="P:Elastic.Transport.NodePool.Nodes" />.
            <para>
            Unlike the name might suggest this component is not responsible for IO level pooling. For that we rely on <see cref="T:Elastic.Transport.ITransportClient" /> abstracting away
            the connection IO pooling.
            </para>
            <para>This interface signals the current connection strategy to <see cref="T:Elastic.Transport.ITransport`1" />.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.LastUpdate">
            <summary>
            The last time that this instance was updated.
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.MaxRetries">
            <summary>
            Returns the default maximum retries for the connection pool implementation.
            Most implementations default to number of nodes, note that this can be overridden
            in the connection settings.
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.Nodes">
            <summary>
            Returns a read only view of all the nodes in the cluster, which might involve creating copies of nodes e.g
            if you are using <see cref="T:Elastic.Transport.SniffingNodePool" />.
            If you do not need an isolated copy of the nodes, please read <see cref="M:Elastic.Transport.NodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> to completion.
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.SniffedOnStartup">
            <summary>
            Whether a sniff is seen on startup.
            </summary>
        </member>
        <member name="M:Elastic.Transport.NodePool.MarkAsSniffed">
            <summary>
            Whether a sniff is seen on startup. The implementation is
            responsible for setting this in a thread safe fashion.
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.SupportsPinging">
            <summary>
            Whether pinging is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.SupportsReseeding">
            <summary>
            Whether reseeding with new nodes is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.NodePool.UsingSsl">
            <summary>
            Whether SSL/TLS is being used.
            </summary>
        </member>
        <member name="M:Elastic.Transport.NodePool.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.NodePool.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Elastic.Transport.NodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Creates a view over the nodes, with changing starting positions, that wraps over on each call
            e.g Thread A might get 1,2,3,4,5 and thread B will get 2,3,4,5,1.
            if there are no live nodes yields a different dead node to try once
            </summary>
        </member>
        <member name="M:Elastic.Transport.NodePool.Reseed(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})">
            <summary>
            Reseeds the nodes. The implementation is responsible for thread safety.
            </summary>
        </member>
        <member name="T:Elastic.Transport.SingleNodePool">
            <summary> A pool to a single node or endpoint.</summary>
        </member>
        <member name="M:Elastic.Transport.SingleNodePool.#ctor(System.Uri,Elastic.Transport.IDateTimeProvider)">
            <summary> A pool to a single node or endpoint.</summary>
        </member>
        <member name="P:Elastic.Transport.SingleNodePool.LastUpdate">
            <summary>
            The last time that this instance was updated.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SingleNodePool.MaxRetries">
            <summary>
            Returns the default maximum retries for the connection pool implementation.
            Most implementations default to number of nodes, note that this can be overridden
            in the connection settings.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SingleNodePool.Nodes">
            <summary>
            Returns a read only view of all the nodes in the cluster, which might involve creating copies of nodes e.g
            if you are using <see cref="T:Elastic.Transport.SniffingNodePool" />.
            If you do not need an isolated copy of the nodes, please read <see cref="M:Elastic.Transport.NodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> to completion.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SingleNodePool.SupportsPinging">
            <summary>
            Whether pinging is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SingleNodePool.SupportsReseeding">
            <summary>
            Whether reseeding with new nodes is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SingleNodePool.UsingSsl">
            <summary>
            Whether SSL/TLS is being used.
            </summary>
        </member>
        <member name="M:Elastic.Transport.SingleNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Creates a view over the nodes, with changing starting positions, that wraps over on each call
            e.g Thread A might get 1,2,3,4,5 and thread B will get 2,3,4,5,1.
            if there are no live nodes yields a different dead node to try once
            </summary>
        </member>
        <member name="M:Elastic.Transport.SingleNodePool.Reseed(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})">
            <summary>
            Reseeds the nodes. The implementation is responsible for thread safety.
            </summary>
        </member>
        <member name="M:Elastic.Transport.SingleNodePool.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Elastic.Transport.SniffingNodePool">
            <summary>
            A node pool that enables <see cref="P:Elastic.Transport.SniffingNodePool.SupportsReseeding" /> which in turn allows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            </summary>
        </member>
        <member name="M:Elastic.Transport.SniffingNodePool.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Boolean,Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that enables <see cref="P:Elastic.Transport.SniffingNodePool.SupportsReseeding" /> which in turn allows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.SniffingNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},System.Boolean,Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that enables <see cref="P:Elastic.Transport.SniffingNodePool.SupportsReseeding" /> which in turn allows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.SniffingNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},System.Func{Elastic.Transport.Node,System.Single},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that enables <see cref="P:Elastic.Transport.SniffingNodePool.SupportsReseeding" /> which in turn allows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            </summary>&gt;
        </member>
        <member name="P:Elastic.Transport.SniffingNodePool.Nodes">
            <summary>
            Returns a read only view of all the nodes in the cluster, which might involve creating copies of nodes e.g
            if you are using <see cref="T:Elastic.Transport.SniffingNodePool" />.
            If you do not need an isolated copy of the nodes, please read <see cref="M:Elastic.Transport.NodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> to completion.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SniffingNodePool.SupportsPinging">
            <summary>
            Whether pinging is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.SniffingNodePool.SupportsReseeding">
            <summary>
            Whether reseeding with new nodes is supported.
            </summary>
        </member>
        <member name="M:Elastic.Transport.SniffingNodePool.Reseed(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})">
            <summary>
            Reseeds the nodes. The implementation is responsible for thread safety.
            </summary>
        </member>
        <member name="M:Elastic.Transport.SniffingNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Creates a view of all the live nodes with changing starting positions that wraps over on each call
            e.g Thread A might get 1,2,3,4,5 and thread B will get 2,3,4,5,1.
            if there are no live nodes yields a different dead node to try once
            </summary>
        </member>
        <member name="M:Elastic.Transport.SniffingNodePool.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Elastic.Transport.StaticNodePool">
            <summary>
            A node pool that disables <see cref="P:Elastic.Transport.StaticNodePool.SupportsReseeding" /> which in turn disallows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            <para>Therefore the nodes you supply are the list of known nodes throughout its lifetime, hence static</para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.StaticNodePool.GlobalCursor">
            <summary>
            Everytime <see cref="M:Elastic.Transport.StaticNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> is called it picks the initial starting point from this cursor.
            After which it uses a local cursor to commence the enumeration. This makes <see cref="M:Elastic.Transport.StaticNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> deterministic
            even when if multiple threads enumerate over multiple lazy collections returned by <see cref="M:Elastic.Transport.StaticNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Boolean,Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that disables <see cref="P:Elastic.Transport.StaticNodePool.SupportsReseeding" /> which in turn disallows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            <para>Therefore the nodes you supply are the list of known nodes throughout its lifetime, hence static</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},System.Boolean,Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that disables <see cref="P:Elastic.Transport.StaticNodePool.SupportsReseeding" /> which in turn disallows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            <para>Therefore the nodes you supply are the list of known nodes throughout its lifetime, hence static</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},System.Boolean,System.Nullable{System.Int32},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that disables <see cref="P:Elastic.Transport.StaticNodePool.SupportsReseeding" /> which in turn disallows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            <para>Therefore the nodes you supply are the list of known nodes throughout its lifetime, hence static</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},System.Func{Elastic.Transport.Node,System.Single},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A node pool that disables <see cref="P:Elastic.Transport.StaticNodePool.SupportsReseeding" /> which in turn disallows the <see cref="T:Elastic.Transport.ITransport`1" /> to enable sniffing to
            discover the current cluster's list of active nodes.
            <para>Therefore the nodes you supply are the list of known nodes throughout its lifetime, hence static</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.LastUpdate">
            <summary>
            The last time that this instance was updated.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.MaxRetries">
            <summary>
            Returns the default maximum retries for the connection pool implementation.
            Most implementations default to number of nodes, note that this can be overridden
            in the connection settings.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.Nodes">
            <summary>
            Returns a read only view of all the nodes in the cluster, which might involve creating copies of nodes e.g
            if you are using <see cref="T:Elastic.Transport.SniffingNodePool" />.
            If you do not need an isolated copy of the nodes, please read <see cref="M:Elastic.Transport.NodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> to completion.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.SupportsPinging">
            <summary>
            Whether pinging is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.SupportsReseeding">
            <summary>
            Whether reseeding with new nodes is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.UsingSsl">
            <summary>
            Whether SSL/TLS is being used.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.AliveNodes">
            <summary>
            A window into <see cref="P:Elastic.Transport.StaticNodePool.InternalNodes" /> that only selects the nodes considered alive at the time of calling
            this property. Taking into account <see cref="M:Elastic.Transport.IDateTimeProvider.Now" /> and <see cref="P:Elastic.Transport.Node.DeadUntil" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.DateTimeProvider">
            <summary>
            An abstraction to provide access to the current <see cref="T:System.DateTime" />. This abstraction allows time to be tested within
            the transport.
            </summary>&gt;
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.InternalNodes">
            <summary>
            The list of nodes we are operating over. This is protected so that subclasses that DO implement <see cref="P:Elastic.Transport.StaticNodePool.SupportsReseeding" />
            can update this list. Its up to subclasses to make this thread safe.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.Random">
            <summary>
            If <see cref="P:Elastic.Transport.StaticNodePool.Randomize" /> is set sub classes that support reseeding will have to use this instance since it might be based of an
            explicit seed passed into the constructor.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StaticNodePool.Randomize">
            <summary> Whether the nodes order should be randomized after sniffing </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Creates a view of all the live nodes with changing starting positions that wraps over on each call
            e.g Thread A might get 1,2,3,4,5 and thread B will get 2,3,4,5,1.
            if there are no live nodes yields a different dead node to try once
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.Reseed(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})">
            <summary>
            Reseeds the nodes. The implementation is responsible for thread safety.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.RetryInternalNodes(System.Int32,System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            If no active nodes are found this method can be used by subclasses to reactivate the next node based on
            <paramref name="globalCursor" />
            </summary>
            <param name="globalCursor"></param>
            <param name="audit">Trace action to document the fact all nodes were dead and were resurrecting one at random</param>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.SelectAliveNodes(System.Int32,System.Collections.Generic.IReadOnlyList{Elastic.Transport.Node},System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Lazy enumerate <paramref name="aliveNodes" /> based on the local <paramref name="cursor" />. Enumeration will start from <paramref name="cursor" />
            and loop around the end and stop before hitting <paramref name="cursor" /> again. This ensures all nodes are attempted.
            </summary>
            <param name="cursor">The starting point into <paramref name="aliveNodes" /> from wich to start.</param>
            <param name="aliveNodes"></param>
            <param name="audit">Trace action to notify if a resurrection occured</param>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.SortNodes(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})">
            <summary>
            Provides the default sort order for <see cref="M:Elastic.Transport.StaticNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> this takes into account whether a subclass injected a custom <see cref="T:Elastic.Transport.Node" /> comparer
            and if not whether <see cref="P:Elastic.Transport.StaticNodePool.Randomize" /> is set
            </summary>
        </member>
        <member name="M:Elastic.Transport.StaticNodePool.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Elastic.Transport.StickyNodePool">
            <summary>
            A connection pool implementation that does not support reseeding and stays on the first <see cref="T:Elastic.Transport.Node" /> reporting true for <see cref="P:Elastic.Transport.Node.IsAlive" />.
            This is great if for instance you have multiple proxies that you can fallback on allowing you to seed the proxies in order of preference.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickyNodePool.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A connection pool implementation that does not support reseeding and stays on the first <see cref="T:Elastic.Transport.Node" /> reporting true for <see cref="P:Elastic.Transport.Node.IsAlive" />.
            This is great if for instance you have multiple proxies that you can fallback on allowing you to seed the proxies in order of preference.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickyNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A connection pool implementation that does not support reseeding and stays on the first <see cref="T:Elastic.Transport.Node" /> reporting true for <see cref="P:Elastic.Transport.Node.IsAlive" />.
            This is great if for instance you have multiple proxies that you can fallback on allowing you to seed the proxies in order of preference.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickyNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Creates a view of all the live nodes with changing starting positions that wraps over on each call
            e.g Thread A might get 1,2,3,4,5 and thread B will get 2,3,4,5,1.
            if there are no live nodes yields a different dead node to try once
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickyNodePool.Reseed(System.Collections.Generic.IEnumerable{Elastic.Transport.Node})">
            <summary>
            Reseeds the nodes. The implementation is responsible for thread safety.
            </summary>
        </member>
        <member name="T:Elastic.Transport.StickySniffingNodePool">
            <summary>
            A connection pool implementation that supports reseeding but stays on the first <see cref="T:Elastic.Transport.Node" /> reporting true for <see cref="P:Elastic.Transport.Node.IsAlive" />.
            This is great if for instance you have multiple proxies that you can fallback on allowing you to seed the proxies in order of preference.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickySniffingNodePool.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Func{Elastic.Transport.Node,System.Single},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A connection pool implementation that supports reseeding but stays on the first <see cref="T:Elastic.Transport.Node" /> reporting true for <see cref="P:Elastic.Transport.Node.IsAlive" />.
            This is great if for instance you have multiple proxies that you can fallback on allowing you to seed the proxies in order of preference.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickySniffingNodePool.#ctor(System.Collections.Generic.IEnumerable{Elastic.Transport.Node},System.Func{Elastic.Transport.Node,System.Single},Elastic.Transport.IDateTimeProvider)">
            <summary>
            A connection pool implementation that supports reseeding but stays on the first <see cref="T:Elastic.Transport.Node" /> reporting true for <see cref="P:Elastic.Transport.Node.IsAlive" />.
            This is great if for instance you have multiple proxies that you can fallback on allowing you to seed the proxies in order of preference.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StickySniffingNodePool.SupportsPinging">
            <summary>
            Whether pinging is supported.
            </summary>
        </member>
        <member name="P:Elastic.Transport.StickySniffingNodePool.SupportsReseeding">
            <summary>
            Whether reseeding with new nodes is supported.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StickySniffingNodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})">
            <summary>
            Creates a view over the nodes, with changing starting positions, that wraps over on each call
            e.g Thread A might get 1,2,3,4,5 and thread B will get 2,3,4,5,1.
            if there are no live nodes yields a different dead node to try once
            </summary>
        </member>
        <member name="T:Elastic.Transport.IRequestPipeline">
            <summary> Models the workflow of a request to multiple nodes</summary>
        </member>
        <member name="P:Elastic.Transport.IRequestPipeline.AuditTrail">
            <summary>
            An audit trail that can be used for logging and debugging purposes. Giving insights into how
            the request made its way through the workflow
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestPipeline.FirstPoolUsageNeedsSniffing">
            <summary>
            Should the workflow attempt the initial sniff as requested by
            <see cref="P:Elastic.Transport.ITransportConfiguration.SniffsOnStartup" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.IRequestPipeline.TryGetSingleNode(Elastic.Transport.Node@)">
            <summary>
            Attempt to get a single node when the underlying connection pool contains only one node.
            <para>
            This provides an optimised path for single node pools by avoiding an Enumerator on each call.
            </para>
            </summary>
            <param name="node"></param>
            <returns><c>true</c> when a single node exists which has been set on the <paramref name="node" />.</returns>
        </member>
        <member name="T:Elastic.Transport.PipelineException">
            <summary>
            A pipeline exception is throw when ever a known failing exit point is reached in <see cref="T:Elastic.Transport.RequestPipeline`1" />
            <para>See <see cref="T:Elastic.Transport.PipelineFailure" /> for known exits points</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.PipelineException.#ctor(Elastic.Transport.PipelineFailure)">
            <summary>
            A pipeline exception is throw when ever a known failing exit point is reached in <see cref="T:Elastic.Transport.RequestPipeline`1" />
            <para>See <see cref="T:Elastic.Transport.PipelineFailure" /> for known exits points</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.PipelineException.#ctor(Elastic.Transport.PipelineFailure,System.Exception)">
            <summary>
            A pipeline exception is throw when ever a known failing exit point is reached in <see cref="T:Elastic.Transport.RequestPipeline`1" />
            <para>See <see cref="T:Elastic.Transport.PipelineFailure" /> for known exits points</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.PipelineException.FailureReason">
            <summary>
            A failure in <see cref="T:Elastic.Transport.RequestPipeline`1" />'s workflow that caused it to end prematurely.
            </summary>
        </member>
        <member name="P:Elastic.Transport.PipelineException.Recoverable">
            <summary>
            This exception is one the <see cref="T:Elastic.Transport.ITransport`1" /> can handle
            <para><see cref="F:Elastic.Transport.PipelineFailure.BadRequest" /></para>
            <para><see cref="F:Elastic.Transport.PipelineFailure.BadResponse" /></para>
            <para><see cref="F:Elastic.Transport.PipelineFailure.PingFailure" /></para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.PipelineException.Response">
            <summary> The response that triggered this exception </summary>
        </member>
        <member name="P:Elastic.Transport.PipelineException.ApiCall">
            <summary> The response that triggered this exception </summary>
        </member>
        <member name="T:Elastic.Transport.PipelineFailure">
            <summary>
            A failure in <see cref="T:Elastic.Transport.RequestPipeline`1" />'s workflow that caused it to end prematurely.
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.BadAuthentication">
            <summary>
            The provided credentials were insufficient.
            <para>If this is thrown during an initial sniff or ping it short circuits and returns immediately</para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.BadResponse">
            <summary>
            A bad response as determined by <see cref="M:Elastic.Transport.Products.IProductRegistration.HttpStatusCodeClassifier(Elastic.Transport.HttpMethod,System.Int32)" />
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.PingFailure">
            <summary> A ping request was unsuccessful</summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.SniffFailure">
            <summary> A sniff request was unsuccessful</summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.CouldNotStartSniffOnStartup">
            <summary>
            See <see cref="P:Elastic.Transport.ITransportConfiguration.SniffsOnStartup" /> was requested but the first API call failed to sniff
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.MaxTimeoutReached">
            <summary>
            The overall timeout specified by <see cref="P:Elastic.Transport.ITransportConfiguration.MaxRetryTimeout" /> was reached
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.MaxRetriesReached">
            <summary>
            The overall max retries as specified by <see cref="P:Elastic.Transport.ITransportConfiguration.MaxRetries" /> was reached
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.Unexpected">
            <summary>
            An exception occurred during <see cref="T:Elastic.Transport.RequestPipeline`1" /> that could not be handled
            </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.BadRequest">
            <summary> An exception happened while sending the request and a response was never fetched </summary>
        </member>
        <member name="F:Elastic.Transport.PipelineFailure.NoNodesAttempted">
            <summary>
            Rare but if <see cref="P:Elastic.Transport.ITransportConfiguration.NodePredicate" /> is too stringent it could mean no
            nodes were considered for the API call
            </summary>
        </member>
        <member name="T:Elastic.Transport.RequestData">
            <summary>
            Where and how <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> should connect to.
            <para>
            Represents the cumulative configuration from <see cref="T:Elastic.Transport.ITransportConfiguration" />
            and <see cref="T:Elastic.Transport.IRequestConfiguration" />.
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestData.Uri">
            <summary>
            The <see cref="P:Elastic.Transport.RequestData.Uri" /> for the request.
            </summary>
        </member>
        <member name="T:Elastic.Transport.RequestPipeline`1">
            <summary> Models the workflow of a request to multiple nodes</summary>
        </member>
        <member name="M:Elastic.Transport.RequestPipeline`1.#ctor(`0,Elastic.Transport.IDateTimeProvider,Elastic.Transport.IMemoryStreamFactory,Elastic.Transport.IRequestParameters)">
            <summary> Models the workflow of a request to multiple nodes</summary>
        </member>
        <member name="P:Elastic.Transport.RequestPipeline`1.AuditTrail">
            <summary>
            An audit trail that can be used for logging and debugging purposes. Giving insights into how
            the request made its way through the workflow
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestPipeline`1.TryGetSingleNode(Elastic.Transport.Node@)">
            <summary>
            Attempt to get a single node when the underlying connection pool contains only one node.
            <para>
            This provides an optimised path for single node pools by avoiding an Enumerator on each call.
            </para>
            </summary>
            <param name="node"></param>
            <returns><c>true</c> when a single node exists which has been set on the <paramref name="node" />.</returns>
        </member>
        <member name="T:Elastic.Transport.ResponseBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.ResponseBuilder.ToResponse``1(Elastic.Transport.RequestData,System.Exception,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.IO.Stream,System.String,System.Int64)">
            <summary>
            Create an instance of <typeparamref name="TResponse" /> from <paramref name="responseStream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.ResponseBuilder.ToResponseAsync``1(Elastic.Transport.RequestData,System.Exception,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.IO.Stream,System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Create an instance of <typeparamref name="TResponse" /> from <paramref name="responseStream" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.DateTimeProvider">
            <summary>
            An abstraction to provide access to the current <see cref="T:System.DateTime" />. This abstraction allows time to be tested within
            the transport.
            </summary>
        </member>
        <member name="F:Elastic.Transport.DateTimeProvider.Default">
            <summary> A static instance to reuse as <see cref="T:Elastic.Transport.DateTimeProvider" /> is stateless </summary>
        </member>
        <member name="M:Elastic.Transport.DateTimeProvider.DeadTime(System.Int32,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Calculate the dead time for a node based on the number of attempts.
            </summary>
            <param name="attempts">The number of attempts on the node</param>
            <param name="minDeadTimeout">The initial dead time as configured by <see cref="P:Elastic.Transport.ITransportConfiguration.DeadTimeout" /></param>
            <param name="maxDeadTimeout">The configured maximum dead timeout as configured by <see cref="P:Elastic.Transport.ITransportConfiguration.MaxDeadTimeout" /></param>
        </member>
        <member name="M:Elastic.Transport.DateTimeProvider.Now">
            <summary> The current date time </summary>
        </member>
        <member name="T:Elastic.Transport.IDateTimeProvider">
            <summary>
            An abstraction to provide access to the current <see cref="T:System.DateTime" />. This abstraction allows time to be tested within
            the transport.
            </summary>
        </member>
        <member name="M:Elastic.Transport.IDateTimeProvider.Now">
            <summary> The current date time </summary>
        </member>
        <member name="M:Elastic.Transport.IDateTimeProvider.DeadTime(System.Int32,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Calculate the dead time for a node based on the number of attempts.
            </summary>
            <param name="attempts">The number of attempts on the node</param>
            <param name="minDeadTimeout">The initial dead time as configured by <see cref="P:Elastic.Transport.ITransportConfiguration.DeadTimeout" /></param>
            <param name="maxDeadTimeout">The configured maximum dead timeout as configured by <see cref="P:Elastic.Transport.ITransportConfiguration.MaxDeadTimeout" /></param>
        </member>
        <member name="T:Elastic.Transport.IMemoryStreamFactory">
            <summary>
            A factory for creating memory streams
            </summary>
        </member>
        <member name="M:Elastic.Transport.IMemoryStreamFactory.Create">
            <summary>
            Creates a memory stream
            </summary>
        </member>
        <member name="M:Elastic.Transport.IMemoryStreamFactory.Create(System.Byte[])">
            <summary>
            Creates a memory stream with the bytes written to the stream
            </summary>
        </member>
        <member name="M:Elastic.Transport.IMemoryStreamFactory.Create(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a memory stream with the bytes written to the stream
            </summary>
        </member>
        <member name="T:Elastic.Transport.IRequestPipelineFactory`1">
            <summary> A factory that creates instances of <see cref="T:Elastic.Transport.IRequestPipeline" />, this factory exists so that transport can be tested. </summary>
        </member>
        <member name="M:Elastic.Transport.IRequestPipelineFactory`1.Create(`0,Elastic.Transport.IDateTimeProvider,Elastic.Transport.IMemoryStreamFactory,Elastic.Transport.IRequestParameters)">
            <summary> Create an instance of <see cref="T:Elastic.Transport.IRequestPipeline" /> </summary>
        </member>
        <member name="T:Elastic.Transport.MemoryStreamFactory">
            <summary>
            A factory for creating memory streams using instances of <see cref="T:System.IO.MemoryStream" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.MemoryStreamFactory.Default">
            <summary> Provide a static instance of this stateless class, so it can be reused</summary>
        </member>
        <member name="M:Elastic.Transport.MemoryStreamFactory.Create">
            <summary>
            Creates a memory stream
            </summary>
        </member>
        <member name="M:Elastic.Transport.MemoryStreamFactory.Create(System.Byte[])">
            <summary>
            Creates a memory stream with the bytes written to the stream
            </summary>
        </member>
        <member name="M:Elastic.Transport.MemoryStreamFactory.Create(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a memory stream with the bytes written to the stream
            </summary>
        </member>
        <member name="T:Elastic.Transport.RecyclableMemoryStreamFactory">
            <summary>
            A factory for creating memory streams using a recyclable pool of <see cref="T:System.IO.MemoryStream" /> instances
            </summary>
        </member>
        <member name="P:Elastic.Transport.RecyclableMemoryStreamFactory.Default">
            <summary> Provide a static instance of this stateless class, so it can be reused</summary>
        </member>
        <member name="M:Elastic.Transport.RecyclableMemoryStreamFactory.#ctor">
            <summary>
            MemoryStream implementation that deals with pooling and managing memory streams which use potentially large
            buffers.
            </summary>
            <remarks>
            This class works in tandem with the RecyclableMemoryStreamManager to supply MemoryStream
            objects to callers, while avoiding these specific problems:
            1. LOH allocations - since all large buffers are pooled, they will never incur a Gen2 GC
            2. Memory waste - A standard memory stream doubles its size when it runs out of room. This
            leads to continual memory growth as each stream approaches the maximum allowed size.
            3. Memory copying - Each time a MemoryStream grows, all the bytes are copied into new buffers.
            This implementation only copies the bytes when GetBuffer is called.
            4. Memory fragmentation - By using homogeneous buffer sizes, it ensures that blocks of memory
            can be easily reused.
            The stream is implemented on top of a series of uniformly-sized blocks. As the stream's length grows,
            additional blocks are retrieved from the memory manager. It is these blocks that are pooled, not the stream
            object itself.
            The biggest wrinkle in this implementation is when GetBuffer() is called. This requires a single
            contiguous buffer. If only a single block is in use, then that block is returned. If multiple blocks
            are in use, we retrieve a larger buffer from the memory manager. These large buffers are also pooled,
            split by size--they are multiples/exponentials of a chunk size (1 MB by default).
            Once a large buffer is assigned to the stream the blocks are NEVER again used for this stream. All operations take
            place on the
            large buffer. The large buffer can be replaced by a larger buffer from the pool as needed. All blocks and large buffers
            are maintained in the stream until the stream is disposed (unless AggressiveBufferReturn is enabled in the stream
            manager).
            </remarks>
        </member>
        <member name="M:Elastic.Transport.RecyclableMemoryStreamFactory.Create">
            <summary>
            Creates a memory stream
            </summary>
        </member>
        <member name="M:Elastic.Transport.RecyclableMemoryStreamFactory.Create(System.Byte[])">
            <summary>
            Creates a memory stream with the bytes written to the stream
            </summary>
        </member>
        <member name="M:Elastic.Transport.RecyclableMemoryStreamFactory.Create(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a memory stream with the bytes written to the stream
            </summary>
        </member>
        <member name="T:Elastic.Transport.Extensions.TransportSerializerExtensions">
            <summary>
            A set of handy extension methods for <see cref="T:Elastic.Transport.Serializer" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Extensions.TransportSerializerExtensions.SerializeToBytes``1(Elastic.Transport.Serializer,``0,Elastic.Transport.SerializationFormatting)">
            <summary>
            Extension method that serializes an instance of <typeparamref name="T" /> to a byte array.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Extensions.TransportSerializerExtensions.SerializeToBytes``1(Elastic.Transport.Serializer,``0,Elastic.Transport.IMemoryStreamFactory,Elastic.Transport.SerializationFormatting)">
            <summary>
            Extension method that serializes an instance of <typeparamref name="T" /> to a byte array.
            </summary>
            <param name="data"></param>
            <param name="memoryStreamFactory">
            A factory yielding MemoryStream instances, defaults to <see cref="T:Elastic.Transport.RecyclableMemoryStreamFactory" />
            that yields memory streams backed by pooled byte arrays.
            </param>
            <param name="serializer"><summary>
             When the <see cref="T:Elastic.Transport.ITransport`1" /> needs to (de)serialize anything it will call into the
             <see cref="P:Elastic.Transport.ITransportConfiguration.RequestResponseSerializer" /> implementation of this base class.
            
             <para>e.g: Whenever the <see cref="T:Elastic.Transport.ITransport`1" /> receives <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" />
             to serialize that data.</para>
             </summary></param>
            <param name="formatting"><summary>
            A hint to <see cref="T:Elastic.Transport.Serializer" /> how to format the json.
            Implementation of <see cref="T:Elastic.Transport.Serializer" /> might choose to ignore this hint though.
            </summary></param>
        </member>
        <member name="M:Elastic.Transport.Extensions.TransportSerializerExtensions.SerializeToString``1(Elastic.Transport.Serializer,``0,Elastic.Transport.SerializationFormatting)">
            <summary>
            Extension method that serializes an instance of <typeparamref name="T" /> to a string.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Extensions.TransportSerializerExtensions.SerializeToString``1(Elastic.Transport.Serializer,``0,Elastic.Transport.IMemoryStreamFactory,Elastic.Transport.SerializationFormatting)">
            <summary>
            Extension method that serializes an instance of <typeparamref name="T" /> to a string.
            </summary>
            <param name="data"></param>
            <param name="memoryStreamFactory">
            A factory yielding MemoryStream instances, defaults to <see cref="T:Elastic.Transport.RecyclableMemoryStreamFactory" />
            that yields memory streams backed by pooled byte arrays.
            </param>
            <param name="serializer"><summary>
             When the <see cref="T:Elastic.Transport.ITransport`1" /> needs to (de)serialize anything it will call into the
             <see cref="P:Elastic.Transport.ITransportConfiguration.RequestResponseSerializer" /> implementation of this base class.
            
             <para>e.g: Whenever the <see cref="T:Elastic.Transport.ITransport`1" /> receives <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" />
             to serialize that data.</para>
             </summary></param>
            <param name="formatting"><summary>
            A hint to <see cref="T:Elastic.Transport.Serializer" /> how to format the json.
            Implementation of <see cref="T:Elastic.Transport.Serializer" /> might choose to ignore this hint though.
            </summary></param>
        </member>
        <member name="T:Elastic.Transport.Extensions.EnumExtensions">
            <summary>
            Cached to string extension method for enums. This is public because we expect most clients to need this.
            <para>This takes <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" /> into account</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Extensions.EnumExtensions.GetStringValue(System.Enum)">
            <summary>
            Returns the string representation of the enum taking into account <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.LowLevelRequestResponseSerializer">
            <summary>
            Default implementation for <see cref="T:Elastic.Transport.Serializer" />. This uses <see cref="T:System.Text.Json.JsonSerializer" /> from <code>System.Text.Json</code>.
            </summary>
        </member>
        <member name="F:Elastic.Transport.LowLevelRequestResponseSerializer.Instance">
            <summary> Provides a static reusable reference to an instance of <see cref="T:Elastic.Transport.LowLevelRequestResponseSerializer" /> to promote reuse </summary>
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.#ctor">
            <summary>
            Default implementation for <see cref="T:Elastic.Transport.Serializer" />. This uses <see cref="T:System.Text.Json.JsonSerializer" /> from <code>System.Text.Json</code>.
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.#ctor(System.Collections.Generic.IEnumerable{System.Text.Json.Serialization.JsonConverter})">
            <summary>
            
            Default implementation for <see cref="T:Elastic.Transport.Serializer" />. This uses <see cref="T:System.Text.Json.JsonSerializer" /> from <code>System.Text.Json</code>.
            &gt;
            </summary>
            <param name="converters">Add more default converters onto <see cref="T:System.Text.Json.JsonSerializerOptions" /> being used</param>
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.CreateSerializerOptions(Elastic.Transport.SerializationFormatting)">
            <summary>
            Creates <see cref="T:System.Text.Json.JsonSerializerOptions" /> used for serialization.
            Override on a derived serializer to change serialization.
            </summary>
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <paramref name="type" /> </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.Deserialize``1(System.IO.Stream)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <typeparamref name="T" /></summary>&gt;
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.Serialize``1(``0,System.IO.Stream,Elastic.Transport.SerializationFormatting)">
            <summary>
            Serialize an instance of <typeparamref name="T" /> to <paramref name="stream" /> using <paramref name="formatting" />.
            </summary>
            <param name="data">The instance of <typeparamref name="T" /> that we want to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="formatting">
            Formatting hint. Note that not all implementations of <see cref="T:Elastic.Transport.Serializer" /> are able to
            satisfy this hint, including the default serializer that is shipped with 8.0.
            </param>&gt;
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.SerializeAsync``1(``0,System.IO.Stream,Elastic.Transport.SerializationFormatting,System.Threading.CancellationToken)">
            <summary>
            Serialize an instance of <typeparamref name="T" /> to <paramref name="stream" /> using <paramref name="formatting" />.
            </summary>
            <param name="data">The instance of <typeparamref name="T" /> that we want to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="formatting">
            Formatting hint. Note that not all implementations of <see cref="T:Elastic.Transport.Serializer" /> are able to
            satisfy this hint, including the default serializer that is shipped with 8.0.
            </param>&gt;
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.DeserializeAsync(System.Type,System.IO.Stream,System.Threading.CancellationToken)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <paramref name="type" /> </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.LowLevelRequestResponseSerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <paramref name="type" /> </summary>&gt;
        </member>
        <member name="T:Elastic.Transport.SerializationFormatting">
            <summary>
            A hint to <see cref="T:Elastic.Transport.Serializer" /> how to format the json.
            Implementation of <see cref="T:Elastic.Transport.Serializer" /> might choose to ignore this hint though.
            </summary>
        </member>
        <member name="F:Elastic.Transport.SerializationFormatting.None">
            <summary>
            Serializer should not render the json with whitespace and line endings. <see cref="T:Elastic.Transport.Serializer" />
            implementation HAVE to be able to adhere this value as for instance nd-json relies on this
            </summary>
        </member>
        <member name="F:Elastic.Transport.SerializationFormatting.Indented">
            <summary>
            A hint that the user prefers readable data being written. <see cref="T:Elastic.Transport.Serializer" /> implementations
            should try to adhere to this but won't break anything if they don't.
            </summary>
        </member>
        <member name="T:Elastic.Transport.Serializer">
             <summary>
             When the <see cref="T:Elastic.Transport.ITransport`1" /> needs to (de)serialize anything it will call into the
             <see cref="P:Elastic.Transport.ITransportConfiguration.RequestResponseSerializer" /> implementation of this base class.
            
             <para>e.g: Whenever the <see cref="T:Elastic.Transport.ITransport`1" /> receives <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" />
             to serialize that data.</para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.Serializer.Deserialize(System.Type,System.IO.Stream)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <paramref name="type" /> </summary>
        </member>
        <member name="M:Elastic.Transport.Serializer.Deserialize``1(System.IO.Stream)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <typeparamref name="T" /></summary>
        </member>
        <member name="M:Elastic.Transport.Serializer.DeserializeAsync(System.Type,System.IO.Stream,System.Threading.CancellationToken)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <paramref name="type" /> </summary>
        </member>
        <member name="M:Elastic.Transport.Serializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary> Deserialize <paramref name="stream" /> to an instance of <paramref name="type" /> </summary>
        </member>
        <member name="M:Elastic.Transport.Serializer.Serialize``1(``0,System.IO.Stream,Elastic.Transport.SerializationFormatting)">
            <summary>
            Serialize an instance of <typeparamref name="T" /> to <paramref name="stream" /> using <paramref name="formatting" />.
            </summary>
            <param name="data">The instance of <typeparamref name="T" /> that we want to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="formatting">
            Formatting hint. Note that not all implementations of <see cref="T:Elastic.Transport.Serializer" /> are able to
            satisfy this hint, including the default serializer that is shipped with 8.0.
            </param>
        </member>
        <member name="M:Elastic.Transport.Serializer.SerializeAsync``1(``0,System.IO.Stream,Elastic.Transport.SerializationFormatting,System.Threading.CancellationToken)">
            <summary>
            Serialize an instance of <typeparamref name="T" /> to <paramref name="stream" /> using <paramref name="formatting" />.
            </summary>
            <param name="data">The instance of <typeparamref name="T" /> that we want to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="formatting">
            Formatting hint. Note that not all implementations of <see cref="T:Elastic.Transport.Serializer" /> are able to
            satisfy this hint, including the default serializer that is shipped with 8.0.
            </param>
        </member>
        <member name="T:Elastic.Transport.SerializerRegistrationInformation">
            <summary> Provides some information to the transport auditing and diagnostics infrastructure about the serializer in use and its <see cref="P:Elastic.Transport.SerializerRegistrationInformation.Purpose" /> </summary>
        </member>
        <member name="M:Elastic.Transport.SerializerRegistrationInformation.#ctor(System.Type,System.String)">
            <summary> Provides some information to the transport auditing and diagnostics infrastructure about the serializer in use and its <see cref="P:Elastic.Transport.SerializerRegistrationInformation.Purpose" /> </summary>
        </member>
        <member name="P:Elastic.Transport.SerializerRegistrationInformation.TypeInformation">
            <summary> The type of <see cref="T:Elastic.Transport.Serializer" /> in use currently </summary>
        </member>
        <member name="P:Elastic.Transport.SerializerRegistrationInformation.Purpose">
            <summary>
            A string describing the purpose of the serializer emitting this events.
            <para>In `Elastisearch.Net` this will always be "request/response"</para>
            <para>Using `Nest` this could also be `source` allowing you to differentiate between the internal and configured source serializer</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.SerializerRegistrationInformation.ToString">
            <summary> A precalculated string representation of the serializer in use </summary>
        </member>
        <member name="T:Elastic.Transport.CertificateValidations">
            <summary>
            A collection of handy baked in server certificate validation callbacks
            </summary>
        </member>
        <member name="M:Elastic.Transport.CertificateValidations.AllowAll(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            DANGEROUS, never use this in production validates ALL certificates to true.
            </summary>
            <returns>Always true, allowing ALL certificates</returns>
        </member>
        <member name="M:Elastic.Transport.CertificateValidations.DenyAll(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Always false, in effect blocking ALL certificates
            </summary>
            <returns>Always false, always blocking ALL certificates</returns>
        </member>
        <member name="M:Elastic.Transport.CertificateValidations.AuthorityPartOfChain(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
            <summary>
            Helper to create a certificate validation callback based on the certificate authority certificate that we used to
            generate the nodes certificates with. This callback expects the CA to be part of the chain as intermediate CA.
            </summary>
            <param name="caCertificate">The ca certificate used to generate the nodes certificate </param>
            <param name="trustRoot">
            Custom CA are never trusted by default unless they are in the machines trusted store, set this to true
            if you've added the CA to the machines trusted store. In which case UntrustedRoot should not be accepted.
            </param>
            <param name="revocationMode">By default we do not check revocation, it is however recommended to check this (either offline or online).</param>
        </member>
        <member name="M:Elastic.Transport.CertificateValidations.AuthorityIsRoot(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
            <summary>
            Helper to create a certificate validation callback based on the certificate authority certificate that we used to
            generate the nodes certificates with. This callback does NOT expect the CA to be part of the chain presented by the server.
            Including the root certificate in the chain increases the SSL handshake size.
            Elasticsearch's certgen by default does not include the CA in the certificate chain.
            </summary>
            <param name="caCertificate">The ca certificate used to generate the nodes certificate </param>
            <param name="trustRoot">
            Custom CA are never trusted by default unless they are in the machines trusted store, set this to true
            if you've added the CA to the machines trusted store. In which case UntrustedRoot should not be accepted.
            </param>
            <param name="revocationMode">By default we do not check revocation, it is however recommended to check this (either offline or online).</param>
        </member>
        <member name="T:Elastic.Transport.HttpMethod">
            <summary> Http Method of the API call to be performed </summary>
        </member>
        <member name="T:Elastic.Transport.HttpTransportClient">
            <summary> The default ITransportClient implementation. Uses <see cref="T:System.Net.Http.HttpClient" />.</summary>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.#ctor">
            <summary> The default ITransportClient implementation. Uses <see cref="T:System.Net.Http.HttpClient" />.</summary>
        </member>
        <member name="P:Elastic.Transport.HttpTransportClient.InUseHandlers">
            <summary>
            The total number if in use message handlers, this number should not exceed the double digits
            for any default setup
            </summary>
        </member>
        <member name="P:Elastic.Transport.HttpTransportClient.RemovedHandlers">
            <summary>
            The total amount of handlers that have been swapped over during the lifetime of the application.
            This can be high depending on how aggressive the DNS caching is setup.
            </summary>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.Request``1(Elastic.Transport.RequestData)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <param name="cancellationToken"></param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.CreateHttpClientHandler(Elastic.Transport.RequestData)">
            <summary>
            Creates an instance of <see cref="T:System.Net.Http.HttpMessageHandler" /> using the <paramref name="requestData" />.
            This method is virtual so subclasses of <see cref="T:Elastic.Transport.HttpTransportClient" /> can modify the instance if needed.
            </summary>
            <param name="requestData">An instance of <see cref="T:Elastic.Transport.RequestData" /> describing where and how to call out to</param>
            <exception cref="T:System.Exception">
            Can throw if <see cref="P:Elastic.Transport.ITransportConfiguration.ConnectionLimit" /> is set but the platform does
            not allow this to be set on <see cref="P:System.Net.Http.HttpClientHandler.MaxConnectionsPerServer" />
            </exception>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.CreateHttpRequestMessage(Elastic.Transport.RequestData)">
            <summary>
            Creates an instance of <see cref="T:System.Net.Http.HttpRequestMessage" /> using the <paramref name="requestData" />.
            This method is virtual so subclasses of <see cref="T:Elastic.Transport.HttpTransportClient" /> can modify the instance if needed.
            </summary>
            <param name="requestData">An instance of <see cref="T:Elastic.Transport.RequestData" /> describing where and how to call out to</param>
            <exception cref="T:System.Exception">
            Can throw if <see cref="P:Elastic.Transport.ITransportConfiguration.ConnectionLimit" /> is set but the platform does
            not allow this to be set on <see cref="P:System.Net.Http.HttpClientHandler.MaxConnectionsPerServer" />
            </exception>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.SetAuthenticationIfNeeded(System.Net.Http.HttpRequestMessage,Elastic.Transport.RequestData)">
            <summary> Isolated hook for subclasses to set authentication on <paramref name="requestMessage" /> </summary>
            <param name="requestMessage">The instance of <see cref="T:System.Net.Http.HttpRequestMessage" /> that needs authentication details</param>
            <param name="requestData">An object describing where and how we want to call out to</param>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.DisposeManagedResources">
            <summary> Allows subclasses to hook into the parents dispose </summary>
        </member>
        <member name="T:Elastic.Transport.HttpWebRequestTransportClient">
            <summary>
            This provides an <see cref="T:Elastic.Transport.ITransportClient" /> implementation that targets <see cref="T:System.Net.HttpWebRequest" />.
            <para>
            On .NET full framework <see cref="T:Elastic.Transport.HttpTransportClient" /> is an alias to this.
            </para>
            <para />
            <para>Do NOT use this class directly on .NET Core. <see cref="T:System.Net.HttpWebRequest" /> is monkey patched
            over HttpClient and does not reuse its instances of HttpClient
            </para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.Request``1(Elastic.Transport.RequestData)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>&gt;
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <param name="cancellationToken"></param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>&gt;
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.CreateHttpWebRequest(Elastic.Transport.RequestData)">
            <summary>
            Allows subclasses to modify the <see cref="T:System.Net.HttpWebRequest" /> instance that is going to be used for the API call
            </summary>
            <param name="requestData">An instance of <see cref="T:Elastic.Transport.RequestData" /> describing where and how to call out to</param>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.SetClientCertificates(System.Net.HttpWebRequest,Elastic.Transport.RequestData)">
            <summary> Hook for subclasses to set additional client certificates on <paramref name="request" /> </summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.SetServerCertificateValidationCallBackIfNeeded(System.Net.HttpWebRequest,Elastic.Transport.RequestData)">
            <summary> Hook for subclasses override the certificate validation on <paramref name="request" /> </summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.AlterServicePoint(System.Net.ServicePoint,Elastic.Transport.RequestData)">
            <summary> Hook for subclasses override <see cref="T:System.Net.ServicePoint" /> behavior</summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.SetProxyIfNeeded(System.Net.HttpWebRequest,Elastic.Transport.RequestData)">
            <summary> Hook for subclasses to set proxy on <paramref name="request" /> </summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.SetAuthenticationIfNeeded(Elastic.Transport.RequestData,System.Net.HttpWebRequest)">
            <summary> Hook for subclasses to set authentication on <paramref name="request" /></summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.DisposeManagedResources">
            <summary> Allows subclasses to hook into the parents dispose </summary>
        </member>
        <member name="T:Elastic.Transport.InMemoryConnection">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.ITransportClient" /> designed to not actually do any IO and services requests from an in memory byte buffer
            </summary>
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.#ctor">
            <summary>
            Every request will succeed with this overload, note that it won't actually return mocked responses
            so using this overload might fail if you are using it to test high level bits that need to deserialize the response.
            </summary>
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.#ctor(System.Byte[],System.Int32,System.Exception,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.ITransportClient" /> designed to not actually do any IO and services requests from an in memory byte buffer
            </summary>
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.Request``1(Elastic.Transport.RequestData)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>&gt;
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <param name="cancellationToken"></param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>&gt;
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.ReturnConnectionStatus``1(Elastic.Transport.RequestData,System.Byte[],System.Nullable{System.Int32},System.String)">
            <summary>
            Allow subclasses to provide their own implementations for <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> while reusing the more complex logic
            to create a response
            </summary>
            <param name="requestData">An instance of <see cref="T:Elastic.Transport.RequestData" /> describing where and how to call out to</param>
            <param name="responseBody">The bytes intended to be used as return</param>
            <param name="statusCode">The status code that the responses <see cref="P:Elastic.Transport.ITransportResponse.ApiCall" /> should return</param>
            <param name="contentType"></param>
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.ReturnConnectionStatusAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken,System.Byte[],System.Nullable{System.Int32},System.String)">
            <summary>
            Allow subclasses to provide their own implementations for <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> while reusing the more complex logic
            to create a response
            </summary>
            <param name="requestData">An instance of <see cref="T:Elastic.Transport.RequestData" /> describing where and how to call out to</param>
            <param name="responseBody">The bytes intended to be used as return</param>
            <param name="statusCode">The status code that the responses <see cref="P:Elastic.Transport.ITransportResponse.ApiCall" /> should return</param>
            <param name="contentType"></param>&gt;
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.DisposeManagedResources">
            <summary> Allows subclasses to hook into the parents dispose </summary>
        </member>
        <member name="T:Elastic.Transport.ITransportClient">
            <summary>
            This interface abstracts the actual IO <see cref="T:Elastic.Transport.ITransport`1" /> performs.
            <para><see cref="T:Elastic.Transport.ITransport`1" /> holds a single instance of this class</para>
            <para>The instance to be used is provided to the constructor of <see cref="T:Elastic.Transport.ITransportConfiguration" /> implementations</para>
            <para>Where its exposed under <see cref="P:Elastic.Transport.ITransportConfiguration.Connection" /></para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.ITransportClient.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <param name="cancellationToken"></param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>
        </member>
        <member name="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)">
            <summary>
            Perform a request to the endpoint described by <paramref name="requestData" /> using its associated configuration.
            </summary>
            <param name="requestData">An object describing where and how to perform the IO call</param>
            <typeparam name="TResponse">
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </typeparam>
            <returns>
            An implementation of <see cref="T:Elastic.Transport.ITransportResponse" /> ensuring enough information is available
            for <see cref="T:Elastic.Transport.IRequestPipeline" /> and <see cref="T:Elastic.Transport.ITransport`1" /> to determine what to
            do with the response
            </returns>
        </member>
        <member name="T:Elastic.Transport.SecureStrings">
            <summary>
            Methods for working with <see cref="T:System.Security.SecureString" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.SecureStrings.CreateString(System.Security.SecureString)">
            <summary>
            Creates a string from a secure string
            </summary>
        </member>
        <member name="M:Elastic.Transport.SecureStrings.CreateSecureString(System.String)">
            <summary>
            Creates a secure string from a string
            </summary>
        </member>
        <member name="T:Elastic.Transport.HeadersList">
            <summary>
            Represents a unique, case-insensitive, immutable collection of header names.
            </summary>
        </member>
        <member name="M:Elastic.Transport.HeadersList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Elastic.Transport.HeadersList" /> from an existing enumerable of header names.
            Duplicate names, including those which only differ by case, will be ignored.
            </summary>
            <param name="headers">The header names to initialise the <see cref="T:Elastic.Transport.HeadersList" /> with.</param>
        </member>
        <member name="M:Elastic.Transport.HeadersList.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="headers"></param>
            <param name="additionalHeader"></param>
        </member>
        <member name="M:Elastic.Transport.HeadersList.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="headers"></param>
            <param name="otherHeaders"></param>
        </member>
        <member name="M:Elastic.Transport.HeadersList.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Elastic.Transport.HeadersList" /> initialised with a single header name.
            </summary>
            <param name="header">The header name to initialise the <see cref="T:Elastic.Transport.HeadersList" /> with.</param>
        </member>
        <member name="P:Elastic.Transport.HeadersList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Elastic.Transport.HeadersList" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.HeadersList.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Elastic.Transport.ITransportConfiguration">
            <summary>
            All the transport configuration that you as the user can use to steer the behavior of the <see cref="T:Elastic.Transport.ITransport`1" /> and all the components such
            as <see cref="T:Elastic.Transport.ITransportClient" /> <see cref="P:Elastic.Transport.ITransportConfiguration.NodePool" /> and <see cref="T:Elastic.Transport.Serializer" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.Authentication">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.IAuthenticationHeader" /> describing what http header to use to authenticate with the product.
            <para><see cref="T:Elastic.Transport.BasicAuthentication" /> for basic authentication</para>
            <para><see cref="T:Elastic.Transport.ApiKey" /> for simple secret token</para>
            <para><see cref="T:Elastic.Transport.Base64ApiKey" /> for Elastic Cloud style encoded api keys</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.BootstrapLock">
            <summary> Provides a semaphoreslim to transport implementations that need to limit access to a resource</summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ClientCertificates">
            <summary>
            Use the following certificates to authenticate all HTTP requests. You can also set them on individual
            request using <see cref="P:Elastic.Transport.RequestConfiguration.ClientCertificates" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.Connection">
            <summary> The connection abstraction behind which all actual IO happens</summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ConnectionLimit">
            <summary>
            Limits the number of concurrent connections that can be opened to an endpoint. Defaults to 80 (see
            <see cref="F:Elastic.Transport.TransportConfiguration.DefaultConnectionLimit" />).
            <para>
            For Desktop CLR, this setting applies to the DefaultConnectionLimit property on the  ServicePointManager object when creating
            ServicePoint objects, affecting the default <see cref="T:Elastic.Transport.ITransportClient" /> implementation.
            </para>
            <para>
            For Core CLR, this setting applies to the MaxConnectionsPerServer property on the HttpClientHandler instances used by the HttpClient
            inside the default <see cref="T:Elastic.Transport.ITransportClient" /> implementation
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.NodePool">
            <summary> The connection pool to use when talking with Elasticsearch </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ProductRegistration">
            <summary>
            Returns information about the current product making use of the transport.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.DeadTimeout">
            <summary>
            The time to put dead nodes out of rotation (this will be multiplied by the number of times they've been dead)
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.DisableAutomaticProxyDetection">
            <summary>
            Disabled proxy detection on the webrequest, in some cases this may speed up the first connection
            your appdomain makes, in other cases it will actually increase the time for the first connection.
            No silver bullet! use with care!
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.DisableDirectStreaming">
            <summary>
            When set to true will disable (de)serializing directly to the request and response stream and return a byte[]
            copy of the raw request and response. Defaults to false
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.DisablePings">
            <summary>
            This signals that we do not want to send initial pings to unknown/previously dead nodes
            and just send the call straightaway
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.EnableHttpCompression">
            <summary>
            Enable gzip compressed requests and responses
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.Headers">
            <summary>
            Try to send these headers for every request
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.HttpPipeliningEnabled">
            <summary>
            Whether HTTP pipelining is enabled. The default is <c>true</c>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.KeepAliveInterval">
            <summary>
            KeepAliveInterval - specifies the interval, in milliseconds, between
            when successive keep-alive packets are sent if no acknowledgement is
            received.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.KeepAliveTime">
            <summary>
            KeepAliveTime - specifies the timeout, in milliseconds, with no
            activity until the first keep-alive packet is sent.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.MaxDeadTimeout">
            <summary>
            The maximum amount of time a node is allowed to marked dead
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.MaxRetries">
            <summary>
            When a retryable exception occurs or status code is returned this controls the maximum
            amount of times we should retry the call to Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.MaxRetryTimeout">
            <summary>
            Limits the total runtime including retries separately from <see cref="P:Elastic.Transport.ITransportConfiguration.RequestTimeout" />
            <pre>
            When not specified defaults to <see cref="P:Elastic.Transport.ITransportConfiguration.RequestTimeout" /> which itself defaults to 60 seconds
            </pre>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.MemoryStreamFactory">
            <summary> Provides a memory stream factory</summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.NodePredicate">
            <summary>
            Register a predicate to select which nodes that you want to execute API calls on. Note that sniffing requests omit this predicate and
            always execute on all nodes.
            When using an <see cref="P:Elastic.Transport.ITransportConfiguration.NodePool" /> implementation that supports reseeding of nodes, this will default to omitting master only
            node from regular API calls.
            When using static or single node connection pooling it is assumed the list of node you instantiate the client with should be taken
            verbatim.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.OnRequestCompleted">
            <summary>
            Allows you to register a callback every time a an API call is returned
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.OnRequestDataCreated">
            <summary>
            An action to run when the <see cref="T:Elastic.Transport.RequestData" /> for a request has been
            created.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ParseAllHeaders">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.PingTimeout">
            <summary>
            The timeout in milliseconds to use for ping requests, which are issued to determine whether a node is alive
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ProxyAddress">
            <summary>
            When set will force all connections through this proxy
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ProxyPassword">
            <summary>
            The password for the proxy, when configured
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ProxyUsername">
            <summary>
            The username for the proxy, when configured
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.QueryStringParameters">
            <summary>
            Append these query string parameters automatically to every request
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.RequestResponseSerializer">
            <summary>The serializer to use to serialize requests and deserialize responses</summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.RequestTimeout">
            <summary>
            The timeout in milliseconds for each request to Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ResponseHeadersToParse">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ServerCertificateValidationCallback">
            <summary>
            Register a ServerCertificateValidationCallback per request
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.CertificateFingerprint">
            <summary>
            During development, the server certificate fingerprint may be provided. When present, it is used to validate the
            certificate sent by the server. The fingerprint is expected to be the hex string representing the SHA256 public key fingerprint.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.SkipDeserializationForStatusCodes">
            <summary>
            Configure the client to skip deserialization of certain status codes e.g: you run Elasticsearch behind a proxy that returns an unexpected
            json format
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.SniffInformationLifeSpan">
            <summary>
            Force a new sniff for the cluster when the cluster state information is older than
            the specified timespan
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.SniffsOnConnectionFault">
            <summary>
            Force a new sniff for the cluster state every time a connection dies
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.SniffsOnStartup">
            <summary>
            Sniff the cluster state immediately on startup
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.UrlFormatter">
            <summary>
            Access to <see cref="P:Elastic.Transport.ITransportConfiguration.UrlFormatter" /> instance that is aware of this <see cref="T:Elastic.Transport.ITransportConfiguration" /> instance
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.UserAgent">
            <summary>
            The user agent string to send with requests. Useful for debugging purposes to understand client and framework
            versions that initiate requests to Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.StatusCodeToResponseSuccess">
            <summary>
            Allow you to override the status code inspection that sets <see cref="P:Elastic.Transport.IApiCallDetails.Success" />
            <para>
            Defaults to validating the statusCode is greater or equal to 200 and less then 300
            </para>
            <para>
            When the request is using <see cref="F:Elastic.Transport.HttpMethod.HEAD" /> 404 is valid out of the box as well
            </para>
            <para></para>
            <para>NOTE: if a request specifies <see cref="P:Elastic.Transport.IRequestConfiguration.AllowedStatusCodes" /> this takes precedence</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.TransferEncodingChunked">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.DnsRefreshTimeout">
            <summary>
            DnsRefreshTimeout for the connections. Defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.EnableTcpStats">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.EnableThreadPoolStats">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.PrettyJson">
            <summary>
            Provide hints to serializer and products to produce pretty, non minified json.
            <para>Note: this is not a guarantee you will always get prettified json</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.MetaHeaderProvider">
            <summary>
            Produces the client meta header for a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportConfiguration.DisableMetaHeader">
            <summary>
            Disables the meta header which is included on all requests by default. This header contains lightweight information 
            about the client and runtime.
            </summary>
        </member>
        <member name="T:Elastic.Transport.IRequestConfiguration">
            <summary>
            Allows you to inject per <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> overrides to the current <see cref="T:Elastic.Transport.ITransportConfiguration" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.Accept">
            <summary>
            Force a different Accept header on the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.AllowedStatusCodes">
            <summary>
            Treat the following statuses (on top of the 200 range) NOT as error.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.AuthenticationHeader">
            <summary>
            Provide an authentication header override for this request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.ClientCertificates">
            <summary>
            Use the following client certificates to authenticate this single request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.ContentType">
            <summary>
            Force a different Content-Type header on the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.DisableDirectStreaming">
            <summary>
            Whether to buffer the request and response bytes for the call
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.DisablePing">
            <summary>
            Under no circumstance do a ping before the actual call. If a node was previously dead a small ping with
            low connect timeout will be tried first in normal circumstances
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.DisableSniff">
            <summary>
            Forces no sniffing to occur on the request no matter what configuration is in place
            globally
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.EnableHttpPipelining">
            <summary>
            Whether or not this request should be pipelined. http://en.wikipedia.org/wiki/HTTP_pipelining defaults to true
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.ForceNode">
            <summary>
            This will force the operation on the specified node, this will bypass any configured connection pool and will no retry.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.MaxRetries">
            <summary>
            This will override whatever is set on the connection configuration or whatever default the connectionpool has.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.OpaqueId">
            <summary>
            Associate an Id with this user-initiated task, such that it can be located in the cluster task list.
            Valid only for Elasticsearch 6.2.0+
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.ParseAllHeaders">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.PingTimeout">
            <summary>
            The ping timeout for this specific request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.RequestTimeout">
            <summary>
            The timeout for this specific request, takes precedence over the global timeout settings
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.ResponseHeadersToParse">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.RunAs">
            <summary>
            Submit the request on behalf in the context of a different shield user
            <pre />https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.ThrowExceptions">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.TransferEncodingChunked">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.Headers">
            <summary>
            Try to send these headers for this single request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.EnableTcpStats">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.EnableThreadPoolStats">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestConfiguration.RequestMetaData">
            <summary>
            Holds additional meta data about the request.
            </summary>
        </member>
        <member name="T:Elastic.Transport.RequestConfiguration">
            <summary>
            Allows you to inject per <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> overrides to the current <see cref="T:Elastic.Transport.ITransportConfiguration" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.Accept">
            <summary>
            Force a different Accept header on the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.AllowedStatusCodes">
            <summary>
            Treat the following statuses (on top of the 200 range) NOT as error.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.AuthenticationHeader">
            <summary>
            Provide an authentication header override for this request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.ClientCertificates">
            <summary>
            Use the following client certificates to authenticate this single request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.ContentType">
            <summary>
            Force a different Content-Type header on the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.DisableDirectStreaming">
            <summary>
            Whether to buffer the request and response bytes for the call
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.DisablePing">
            <summary>
            Under no circumstance do a ping before the actual call. If a node was previously dead a small ping with
            low connect timeout will be tried first in normal circumstances
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.DisableSniff">
            <summary>
            Forces no sniffing to occur on the request no matter what configuration is in place
            globally
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.EnableHttpPipelining">
            <summary>
            Whether or not this request should be pipelined. http://en.wikipedia.org/wiki/HTTP_pipelining defaults to true
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.ForceNode">
            <summary>
            This will force the operation on the specified node, this will bypass any configured connection pool and will no retry.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.MaxRetries">
            <summary>
            This will override whatever is set on the connection configuration or whatever default the connectionpool has.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.OpaqueId">
            <summary>
            Associate an Id with this user-initiated task, such that it can be located in the cluster task list.
            Valid only for Elasticsearch 6.2.0+
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.PingTimeout">
            <summary>
            The ping timeout for this specific request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.RequestTimeout">
            <summary>
            The timeout for this specific request, takes precedence over the global timeout settings
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.RunAs">
            <summary>
            Submit the request on behalf in the context of a different shield user
            <pre />https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.ThrowExceptions">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.TransferEncodingChunked">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.Headers">
            <summary>
            Try to send these headers for this single request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.EnableTcpStats">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.EnableThreadPoolStats">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.ResponseHeadersToParse">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.ParseAllHeaders">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfiguration.RequestMetaData">
            <summary>
            Holds additional meta data about the request.
            </summary>
        </member>
        <member name="T:Elastic.Transport.RequestConfigurationDescriptor">
            <summary>
            Allows you to inject per <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> overrides to the current <see cref="T:Elastic.Transport.ITransportConfiguration" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.#ctor(Elastic.Transport.IRequestConfiguration)">
            <summary>
            Allows you to inject per <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> overrides to the current <see cref="T:Elastic.Transport.ITransportConfiguration" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.RunAs(System.String)">
            <summary>
            Submit the request on behalf in the context of a different shield user
            <pre />https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.RequestTimeout(System.TimeSpan)">
            <summary>
            The timeout for this specific request, takes precedence over the global timeout settings
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.OpaqueId(System.String)">
            <summary>
            Associate an Id with this user-initiated task, such that it can be located in the cluster task list.
            Valid only for Elasticsearch 6.2.0+
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.PingTimeout(System.TimeSpan)">
            <summary>
            The ping timeout for this specific request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ContentType(System.String)">
            <summary>
            Force a different Content-Type header on the request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.Accept(System.String)">
            <summary>
            Force a different Accept header on the request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.AllowedStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Treat the following statuses (on top of the 200 range) NOT as error.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.AllowedStatusCodes(System.Int32[])">
            <summary>
            Treat the following statuses (on top of the 200 range) NOT as error.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.DisableSniffing(System.Nullable{System.Boolean})">
            <summary>
            Forces no sniffing to occur on the request no matter what configuration is in place
            globally
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.DisablePing(System.Nullable{System.Boolean})">
            <summary>
            Under no circumstance do a ping before the actual call. If a node was previously dead a small ping with
            low connect timeout will be tried first in normal circumstances
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ThrowExceptions(System.Boolean)">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.DisableDirectStreaming(System.Nullable{System.Boolean})">
            <summary>
            Whether to buffer the request and response bytes for the call
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ForceNode(System.Uri)">
            <summary>
            This will force the operation on the specified node, this will bypass any configured connection pool and will no retry.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.MaxRetries(System.Int32)">
            <summary>
            This will override whatever is set on the connection configuration or whatever default the connectionpool has.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.Authentication(Elastic.Transport.IAuthenticationHeader)">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.IAuthenticationHeader" /> describing what http header to use to authenticate with the product.
            <para><see cref="T:Elastic.Transport.BasicAuthentication" /> for basic authentication</para>
            <para><see cref="T:Elastic.Transport.ApiKey" /> for simple secret token</para>
            <para><see cref="T:Elastic.Transport.Base64ApiKey" /> for Elastic Cloud style encoded api keys</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.EnableHttpPipelining(System.Boolean)">
            <summary>
            Whether or not this request should be pipelined. http://en.wikipedia.org/wiki/HTTP_pipelining defaults to true
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Use the following client certificates to authenticate this single request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Use the following client certificates to authenticate this single request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ClientCertificate(System.String)">
            <summary>
            Use the following client certificates to authenticate this single request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.TransferEncodingChunked(System.Nullable{System.Boolean})">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.GlobalHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Try to send these headers for this single request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.EnableTcpStats(System.Nullable{System.Boolean})">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.EnableThreadPoolStats(System.Nullable{System.Boolean})">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ParseAllHeaders(System.Nullable{System.Boolean})">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.ResponseHeadersToParse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationDescriptor.RequestMetaData(Elastic.Transport.RequestMetaData)">
            <summary>
            Holds additional meta data about the request.
            </summary>
        </member>
        <member name="T:Elastic.Transport.ApiKey">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.ApiKey.#ctor(System.String)">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.ApiKey.#ctor(System.Security.SecureString)">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiKey.Header">
            <summary> The header to use to authenticate the request </summary>
        </member>
        <member name="M:Elastic.Transport.ApiKey.TryGetHeader(System.String@)">
            <summary>
            If this instance is valid return the header name and value to use for authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.ApiKey.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Elastic.Transport.Base64ApiKey">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.Base64ApiKey.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.Base64ApiKey.#ctor(System.String,System.String)">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.Base64ApiKey.#ctor(System.String)">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.Base64ApiKey.#ctor(System.Security.SecureString)">
            <summary>
            Credentials for Api Key Authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.Base64ApiKey.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:Elastic.Transport.Base64ApiKey.Header">
            <summary> The header to use to authenticate the request </summary>
        </member>
        <member name="M:Elastic.Transport.Base64ApiKey.TryGetHeader(System.String@)">
            <summary>
            If this instance is valid return the header name and value to use for authentication
            </summary>
        </member>
        <member name="T:Elastic.Transport.BasicAuthentication">
            <summary> Credentials for Basic Authentication </summary>
        </member>
        <member name="M:Elastic.Transport.BasicAuthentication.#ctor(System.String,System.String)">
            <summary> Credentials for Basic Authentication </summary>
        </member>
        <member name="M:Elastic.Transport.BasicAuthentication.#ctor(System.String,System.Security.SecureString)">
            <summary> Credentials for Basic Authentication </summary>
        </member>
        <member name="M:Elastic.Transport.BasicAuthentication.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:Elastic.Transport.BasicAuthentication.Header">
            <summary> The header to use to authenticate the request </summary>
        </member>
        <member name="P:Elastic.Transport.BasicAuthentication.Base64Header">
            <summary> The default http header used for basic authentication </summary>
        </member>
        <member name="M:Elastic.Transport.BasicAuthentication.TryGetHeader(System.String@)">
            <summary>
            If this instance is valid return the header name and value to use for authentication
            </summary>
        </member>
        <member name="M:Elastic.Transport.BasicAuthentication.GetBase64String(System.String)">
            <summary> Get Base64 representation for string </summary>
        </member>
        <member name="T:Elastic.Transport.IAuthenticationHeader">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.IAuthenticationHeader" /> describing what http header to use to authenticate with the product.
            <para><see cref="T:Elastic.Transport.BasicAuthentication" /> for basic authentication</para>
            <para><see cref="T:Elastic.Transport.ApiKey" /> for simple secret token</para>
            <para><see cref="T:Elastic.Transport.Base64ApiKey" /> for Elastic Cloud style encoded api keys</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.IAuthenticationHeader.Header">
            <summary> The header to use to authenticate the request </summary>
        </member>
        <member name="M:Elastic.Transport.IAuthenticationHeader.TryGetHeader(System.String@)">
            <summary>
            If this instance is valid return the header name and value to use for authentication
            </summary>
        </member>
        <member name="T:Elastic.Transport.TransportConfiguration">
            <summary>
            Allows you to control how <see cref="T:Elastic.Transport.ITransport`1" /> behaves and where/how it connects to Elastic Stack products
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfiguration.DefaultMemoryStreamFactory">
            <summary>
            The default memory stream factory if none is configured on <see cref="P:Elastic.Transport.ITransportConfiguration.MemoryStreamFactory" />
            </summary>
        </member>
        <member name="F:Elastic.Transport.TransportConfiguration.DefaultPingTimeout">
            <summary>
            The default ping timeout. Defaults to 2 seconds
            </summary>
        </member>
        <member name="F:Elastic.Transport.TransportConfiguration.DefaultPingTimeoutOnSsl">
            <summary>
            The default ping timeout when the connection is over HTTPS. Defaults to
            5 seconds
            </summary>
        </member>
        <member name="F:Elastic.Transport.TransportConfiguration.DefaultTimeout">
            <summary>
            The default timeout before the client aborts a request to Elasticsearch.
            Defaults to 1 minute
            </summary>
        </member>
        <member name="F:Elastic.Transport.TransportConfiguration.DefaultDnsRefreshTimeout">
            <summary>
            The default timeout before a TCP connection is forcefully recycled so that DNS updates come through
            Defaults to 5 minutes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Elastic.Transport.TransportConfiguration.DefaultConnectionLimit" -->
        <member name="M:Elastic.Transport.TransportConfiguration.#ctor(System.Uri,Elastic.Transport.Products.IProductRegistration)">
            <summary>
            Creates a new instance of <see cref="T:Elastic.Transport.TransportConfiguration" />
            </summary>
            <param name="uri">The root of the Elastic stack product node we want to connect to. Defaults to http://localhost:9200</param>
            <param name="productRegistration"><summary>
            When <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> interfaces with a product some parts are
            bespoke for each product. This interface defines the contract products will have to implement in order to fill
            in these bespoke parts.
            <para>The expectation is that unless you instantiate <see cref="T:Elastic.Transport.Transport`1" />
            directly clients that utilize transport will fill in this dependency
            </para>
            <para>
            If you do want to use a bare-bones <see cref="T:Elastic.Transport.Transport`1" /> you can use
            <see cref="P:Elastic.Transport.Products.ProductRegistration.Default" />
            </para>
            </summary></param>
        </member>
        <member name="M:Elastic.Transport.TransportConfiguration.#ctor(System.String,Elastic.Transport.BasicAuthentication,Elastic.Transport.Products.IProductRegistration)">
            <summary>
            Sets up the client to communicate to Elastic Cloud using <paramref name="cloudId" />,
            <para><see cref="T:Elastic.Transport.CloudNodePool" /> documentation for more information on how to obtain your Cloud Id</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfiguration.#ctor(System.String,Elastic.Transport.Base64ApiKey,Elastic.Transport.Products.IProductRegistration)">
            <summary>
            Sets up the client to communicate to Elastic Cloud using <paramref name="cloudId" />,
            <para><see cref="T:Elastic.Transport.CloudNodePool" /> documentation for more information on how to obtain your Cloud Id</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfiguration.#ctor(Elastic.Transport.NodePool,Elastic.Transport.ITransportClient,Elastic.Transport.Serializer,Elastic.Transport.Products.IProductRegistration)">
            <summary> <summary>
            Allows you to control how <see cref="T:Elastic.Transport.ITransport`1" /> behaves and where/how it connects to Elastic Stack products
            </summary></summary>
            <param name="nodePool"><summary>
            A node pool is responsible for maintaining a read only collection of <see cref="T:Elastic.Transport.Node" />(s) under <see cref="P:Elastic.Transport.NodePool.Nodes" />.
            <para>
            Unlike the name might suggest this component is not responsible for IO level pooling. For that we rely on <see cref="T:Elastic.Transport.ITransportClient" /> abstracting away
            the connection IO pooling.
            </para>
            <para>This interface signals the current connection strategy to <see cref="T:Elastic.Transport.ITransport`1" />.</para>
            </summary></param>
            <param name="connection"><summary>
            This interface abstracts the actual IO <see cref="T:Elastic.Transport.ITransport`1" /> performs.
            <para><see cref="T:Elastic.Transport.ITransport`1" /> holds a single instance of this class</para>
            <para>The instance to be used is provided to the constructor of <see cref="T:Elastic.Transport.ITransportConfiguration" /> implementations</para>
            <para>Where its exposed under <see cref="P:Elastic.Transport.ITransportConfiguration.Connection" /></para>
            </summary></param>
            <param name="serializer"><summary>
             When the <see cref="T:Elastic.Transport.ITransport`1" /> needs to (de)serialize anything it will call into the
             <see cref="P:Elastic.Transport.ITransportConfiguration.RequestResponseSerializer" /> implementation of this base class.
            
             <para>e.g: Whenever the <see cref="T:Elastic.Transport.ITransport`1" /> receives <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" />
             to serialize that data.</para>
             </summary></param>
            <param name="productRegistration"><summary>
            When <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> interfaces with a product some parts are
            bespoke for each product. This interface defines the contract products will have to implement in order to fill
            in these bespoke parts.
            <para>The expectation is that unless you instantiate <see cref="T:Elastic.Transport.Transport`1" />
            directly clients that utilize transport will fill in this dependency
            </para>
            <para>
            If you do want to use a bare-bones <see cref="T:Elastic.Transport.Transport`1" /> you can use
            <see cref="P:Elastic.Transport.Products.ProductRegistration.Default" />
            </para>
            </summary></param>
        </member>
        <member name="T:Elastic.Transport.TransportConfigurationBase`1">
            <summary>
            Allows you to control how <see cref="T:Elastic.Transport.ITransport`1" /> behaves and where/how it connects to Elastic Stack products
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.#ctor(Elastic.Transport.NodePool,Elastic.Transport.ITransportClient,Elastic.Transport.Serializer,Elastic.Transport.Products.IProductRegistration)">
            <summary>
            
            Allows you to control how <see cref="T:Elastic.Transport.ITransport`1" /> behaves and where/how it connects to Elastic Stack products
            
            </summary>
            <param name="nodePool"><summary>
            A node pool is responsible for maintaining a read only collection of <see cref="T:Elastic.Transport.Node" />(s) under <see cref="P:Elastic.Transport.NodePool.Nodes" />.
            <para>
            Unlike the name might suggest this component is not responsible for IO level pooling. For that we rely on <see cref="T:Elastic.Transport.ITransportClient" /> abstracting away
            the connection IO pooling.
            </para>
            <para>This interface signals the current connection strategy to <see cref="T:Elastic.Transport.ITransport`1" />.</para>
            </summary></param>
            <param name="transportClient"><summary>
            This interface abstracts the actual IO <see cref="T:Elastic.Transport.ITransport`1" /> performs.
            <para><see cref="T:Elastic.Transport.ITransport`1" /> holds a single instance of this class</para>
            <para>The instance to be used is provided to the constructor of <see cref="T:Elastic.Transport.ITransportConfiguration" /> implementations</para>
            <para>Where its exposed under <see cref="P:Elastic.Transport.ITransportConfiguration.Connection" /></para>
            </summary></param>
            <param name="requestResponseSerializer"><summary>
             When the <see cref="T:Elastic.Transport.ITransport`1" /> needs to (de)serialize anything it will call into the
             <see cref="P:Elastic.Transport.ITransportConfiguration.RequestResponseSerializer" /> implementation of this base class.
            
             <para>e.g: Whenever the <see cref="T:Elastic.Transport.ITransport`1" /> receives <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" />
             to serialize that data.</para>
             </summary></param>
            <param name="productRegistration"><summary>
            When <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> interfaces with a product some parts are
            bespoke for each product. This interface defines the contract products will have to implement in order to fill
            in these bespoke parts.
            <para>The expectation is that unless you instantiate <see cref="T:Elastic.Transport.Transport`1" />
            directly clients that utilize transport will fill in this dependency
            </para>
            <para>
            If you do want to use a bare-bones <see cref="T:Elastic.Transport.Transport`1" /> you can use
            <see cref="P:Elastic.Transport.Products.ProductRegistration.Default" />
            </para>
            </summary></param>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.UseThisRequestResponseSerializer">
            <summary>
            Allows more specialized implementations of <see cref="T:Elastic.Transport.TransportConfigurationBase`1" /> to use their own
            request response serializer defaults
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.Assign``1(``0,System.Action{`0,``0})">
            <summary> Assign a private value and return the current <typeparamref name="T" /> </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.EnableTcpKeepAlive(System.TimeSpan,System.TimeSpan)">
            <summary>
            Sets the keep-alive option on a TCP connection.
            <para>For Desktop CLR, sets ServicePointManager.SetTcpKeepAlive</para>
            </summary>
            <param name="keepAliveTime"><summary>
            KeepAliveTime - specifies the timeout, in milliseconds, with no
            activity until the first keep-alive packet is sent.
            </summary></param>
            <param name="keepAliveInterval"><summary>
            KeepAliveInterval - specifies the interval, in milliseconds, between
            when successive keep-alive packets are sent if no acknowledgement is
            received.
            </summary></param>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.MaximumRetries(System.Int32)">
            <summary>
            When a retryable exception occurs or status code is returned this controls the maximum
            amount of times we should retry the call to Elasticsearch
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ConnectionLimit(System.Int32)">
            <summary>
            <summary>
            Limits the number of concurrent connections that can be opened to an endpoint. Defaults to 80 (see
            <see cref="F:Elastic.Transport.TransportConfiguration.DefaultConnectionLimit" />).
            <para>
            For Desktop CLR, this setting applies to the DefaultConnectionLimit property on the  ServicePointManager object when creating
            ServicePoint objects, affecting the default <see cref="T:Elastic.Transport.ITransportClient" /> implementation.
            </para>
            <para>
            For Core CLR, this setting applies to the MaxConnectionsPerServer property on the HttpClientHandler instances used by the HttpClient
            inside the default <see cref="T:Elastic.Transport.ITransportClient" /> implementation
            </para>
            </summary>
            </summary>
            <param name="connectionLimit">The connection limit, a value lower then 0 will cause the connection limit not to be set at all</param>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.SniffOnConnectionFault(System.Boolean)">
            <summary>
            Force a new sniff for the cluster state every time a connection dies
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.SniffOnStartup(System.Boolean)">
            <summary>
            Sniff the cluster state immediately on startup
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.SniffLifeSpan(System.Nullable{System.TimeSpan})">
            <summary>
            <summary>
            Force a new sniff for the cluster when the cluster state information is older than
            the specified timespan
            </summary>
            </summary>
            <param name="sniffLifeSpan">The duration a clusterstate is considered fresh, set to null to disable periodic sniffing</param>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.EnableHttpCompression(System.Boolean)">
            <summary>
            Enable gzip compressed requests and responses
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DisableAutomaticProxyDetection(System.Boolean)">
            <summary>
            Disabled proxy detection on the webrequest, in some cases this may speed up the first connection
            your appdomain makes, in other cases it will actually increase the time for the first connection.
            No silver bullet! use with care!
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ThrowExceptions(System.Boolean)">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DisablePing(System.Boolean)">
            <summary>
            This signals that we do not want to send initial pings to unknown/previously dead nodes
            and just send the call straightaway
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.GlobalQueryStringParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Append these query string parameters automatically to every request
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.GlobalHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Try to send these headers for every request
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.RequestTimeout(System.TimeSpan)">
            <summary>
            The timeout in milliseconds for each request to Elasticsearch
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.PingTimeout(System.TimeSpan)">
            <summary>
            The timeout in milliseconds to use for ping requests, which are issued to determine whether a node is alive
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DeadTimeout(System.TimeSpan)">
            <summary>
            The time to put dead nodes out of rotation (this will be multiplied by the number of times they've been dead)
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.MaxDeadTimeout(System.TimeSpan)">
            <summary>
            The maximum amount of time a node is allowed to marked dead
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.MaxRetryTimeout(System.TimeSpan)">
            <summary>
            Limits the total runtime including retries separately from <see cref="P:Elastic.Transport.ITransportConfiguration.RequestTimeout" />
            <pre>
            When not specified defaults to <see cref="P:Elastic.Transport.ITransportConfiguration.RequestTimeout" /> which itself defaults to 60 seconds
            </pre>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DnsRefreshTimeout(System.TimeSpan)">
            <summary>
            DnsRefreshTimeout for the connections. Defaults to 5 minutes.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.CertificateFingerprint(System.String)">
            <summary>
            During development, the server certificate fingerprint may be provided. When present, it is used to validate the
            certificate sent by the server. The fingerprint is expected to be the hex string representing the SHA256 public key fingerprint.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.Proxy(System.Uri,System.String,System.String)">
            <summary>
            If your connection has to go through proxy, use this method to specify the proxy url
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.Proxy(System.Uri,System.String,System.Security.SecureString)">
            <summary>
            If your connection has to go through proxy, use this method to specify the proxy url
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DisableDirectStreaming(System.Boolean)">
            <summary>
            When set to true will disable (de)serializing directly to the request and response stream and return a byte[]
            copy of the raw request and response. Defaults to false
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.OnRequestCompleted(System.Action{Elastic.Transport.IApiCallDetails})">
            <summary>
            Allows you to register a callback every time a an API call is returned
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.OnRequestDataCreated(System.Action{Elastic.Transport.RequestData})">
            <summary>
            An action to run when the <see cref="T:Elastic.Transport.RequestData" /> for a request has been
            created.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.Authentication(Elastic.Transport.IAuthenticationHeader)">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.IAuthenticationHeader" /> describing what http header to use to authenticate with the product.
            <para><see cref="T:Elastic.Transport.BasicAuthentication" /> for basic authentication</para>
            <para><see cref="T:Elastic.Transport.ApiKey" /> for simple secret token</para>
            <para><see cref="T:Elastic.Transport.Base64ApiKey" /> for Elastic Cloud style encoded api keys</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.EnableHttpPipelining(System.Boolean)">
            <summary>
            Whether HTTP pipelining is enabled. The default is <c>true</c>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.NodePredicate(System.Func{Elastic.Transport.Node,System.Boolean})">
            <summary>
            
            Register a predicate to select which nodes that you want to execute API calls on. Note that sniffing requests omit this predicate and
            always execute on all nodes.
            When using an <see cref="P:Elastic.Transport.ITransportConfiguration.NodePool" /> implementation that supports reseeding of nodes, this will default to omitting master only
            node from regular API calls.
            When using static or single node connection pooling it is assumed the list of node you instantiate the client with should be taken
            verbatim.
            
            </summary>
            <param name="predicate">Return true if you want the node to be used for API calls</param>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.EnableDebugMode(System.Action{Elastic.Transport.IApiCallDetails})">
            <summary>
            Turns on settings that aid in debugging like DisableDirectStreaming() and PrettyJson()
            so that the original request and response JSON can be inspected. It also always asks the server for the full stack trace on errors
            </summary>
            <param name="onRequestCompleted">
            An optional callback to be performed when the request completes. This will
            not overwrite the global OnRequestCompleted callback that is set directly on
            ConnectionSettings. If no callback is passed, DebugInformation from the response
            will be written to the debug output by default.
            </param>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.PrettyJson(System.Boolean)">
            <summary>
            Provide hints to serializer and products to produce pretty, non minified json.
            <para>Note: this is not a guarantee you will always get prettified json</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ParseAllHeaders(System.Boolean)">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ResponseHeadersToParse(Elastic.Transport.HeadersList)">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ServerCertificateValidationCallback(System.Func{System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean})">
            <summary>
            Register a ServerCertificateValidationCallback per request
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Use the following certificates to authenticate all HTTP requests. You can also set them on individual
            request using <see cref="P:Elastic.Transport.RequestConfiguration.ClientCertificates" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Use the following certificates to authenticate all HTTP requests. You can also set them on individual
            request using <see cref="P:Elastic.Transport.RequestConfiguration.ClientCertificates" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.ClientCertificate(System.String)">
            <summary>
            Use the following certificates to authenticate all HTTP requests. You can also set them on individual
            request using <see cref="P:Elastic.Transport.RequestConfiguration.ClientCertificates" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.SkipDeserializationForStatusCodes(System.Int32[])">
            <summary>
            Configure the client to skip deserialization of certain status codes e.g: you run Elasticsearch behind a proxy that returns an unexpected
            json format
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.UserAgent(Elastic.Transport.UserAgent)">
            <summary>
            The user agent string to send with requests. Useful for debugging purposes to understand client and framework
            versions that initiate requests to Elasticsearch
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.TransferEncodingChunked(System.Boolean)">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.MemoryStreamFactory(Elastic.Transport.IMemoryStreamFactory)">
            <summary> Provides a memory stream factory</summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.EnableTcpStats(System.Boolean)">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.EnableThreadPoolStats(System.Boolean)">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DisableMetaHeader(System.Boolean)">
            <summary>
            Disables the meta header which is included on all requests by default. This header contains lightweight information 
            about the client and runtime.
            </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.DisposeManagedResources">
            <summary> Allows subclasses to hook into the parents dispose </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.UpdateGlobalQueryString(System.String,System.String,System.Boolean)">
            <summary> Allows subclasses to add/remove default global query string parameters </summary>
        </member>
        <member name="T:Elastic.Transport.UserAgent">
            <summary>
            Represents the user agent string. Two constructors exists, one to aid with constructing elastic clients standard compliant
            user agents and one free form to allow any custom string to be set.
            </summary>
        </member>
        <member name="M:Elastic.Transport.UserAgent.Create(System.String,System.Type)">
            <summary> Create a user agent that adhers to the minimum information needed to be elastic standard compliant </summary>
            <param name="reposName">The repos name uniquely identifies the origin of the client</param>
            <param name="typeVersionLookup">
            Use <see cref="T:System.Type" />'s assembly <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />
            to inject version information into the header
            </param>
        </member>
        <member name="M:Elastic.Transport.UserAgent.Create(System.String,System.Type,System.String[])">
            <summary>  Create a user agent that adhers to the minimum information needed to be elastic standard compliant  </summary>
        </member>
        <member name="M:Elastic.Transport.UserAgent.Create(System.String)">
            <summary> Create a user string that does not confirm to elastic client standards </summary>
        </member>
        <member name="M:Elastic.Transport.UserAgent.ToString">
            <summary> The precalculated string representation of this <see cref="T:Elastic.Transport.UserAgent" /> instance </summary>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.AuditDiagnosticObserver">
            <summary> Provides a typed listener to <see cref="T:Elastic.Transport.Diagnostics.Auditing.AuditEvent" /> events that <see cref="T:Elastic.Transport.RequestPipeline`1" /> emits </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.AuditDiagnosticObserver.#ctor(System.Action{System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.Diagnostics.Auditing.Audit}},System.Action{System.Exception},System.Action)">
            <summary> Provides a typed listener to <see cref="T:Elastic.Transport.Diagnostics.Auditing.AuditEvent" /> events that <see cref="T:Elastic.Transport.RequestPipeline`1" /> emits </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.Auditing.Audit">
            <summary> An audit of the request made </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.Auditing.Audit.#ctor(Elastic.Transport.Diagnostics.Auditing.AuditEvent,System.DateTime)">
            <summary> An audit of the request made </summary>&gt;
        </member>
        <member name="P:Elastic.Transport.Diagnostics.Auditing.Audit.Event">
            <summary>
            The type of audit event
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.Auditing.Audit.Node">
            <summary>
            The node on which the request was made
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.Auditing.Audit.Path">
            <summary>
            The path of the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.Auditing.Audit.Ended">
            <summary>
            The end date and time of the audit
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.Auditing.Audit.Started">
            <summary>
            The start date and time of the audit
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.Auditing.Audit.Exception">
            <summary>
            The exception for the audit, if there was one.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.Auditing.Audit.ToString">
            <summary> Returns a string representation of the this audit</summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.Auditing.AuditEvent">
            <summary>
            Enumeration of different auditable events that can occur in the execution of
            <see cref="M:Elastic.Transport.ITransport.RequestAsync``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)" /> as modeled by
            <see cref="T:Elastic.Transport.IRequestPipeline" />.
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.SniffOnStartup">
            <summary> The request performed the first sniff on startup of the client </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.SniffOnFail">
            <summary> The request saw a failure on a node and a sniff occurred as a result of it</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.SniffOnStaleCluster">
            <summary> The cluster state expired and a sniff occurred as a result of it</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.SniffSuccess">
            <summary>A sniff that was initiated was successful</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.SniffFailure">
            <summary>A sniff that was initiated resulted in a failure</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.PingSuccess">
            <summary>A ping that was initiated was successful</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.PingFailure">
            <summary>A ping that was initiated resulted in a failure</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.Resurrection">
            <summary>A node that was previously marked dead was put back in the regular rotation</summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.AllNodesDead">
            <summary>
            All nodes returned by <see cref="M:Elastic.Transport.NodePool.CreateView(System.Action{Elastic.Transport.Diagnostics.Auditing.AuditEvent,Elastic.Transport.Node})" /> are marked dead (see <see cref="P:Elastic.Transport.Node.IsAlive" />)
            After this event a random node is resurrected and tried by force
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.BadResponse">
            <summary>
            A call into <see cref="M:Elastic.Transport.IRequestPipeline.CallProductEndpointAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)" /> resulted in a failure
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.HealthyResponse">
            <summary>
            A call into <see cref="M:Elastic.Transport.IRequestPipeline.CallProductEndpointAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)" /> resulted in a success
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.MaxTimeoutReached">
            <summary>
            The call into <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> took too long.
            This could mean the call was retried but retrying was to slow and cumulative this exceeded
            <see cref="P:Elastic.Transport.ITransportConfiguration.MaxRetryTimeout" />
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.MaxRetriesReached">
            <summary>
            The call into <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> was not able to complete
            successfully and exceeded the available retries as configured on
            <see cref="P:Elastic.Transport.ITransportConfiguration.MaxRetries" />.
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.BadRequest">
            <summary>
            A call into <see cref="M:Elastic.Transport.IRequestPipeline.CallProductEndpointAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)" /> failed before a response was
            received.
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.NoNodesAttempted">
            <summary>
            Rare but if <see cref="P:Elastic.Transport.ITransportConfiguration.NodePredicate" /> is too stringent and node nodes in
            the <see cref="P:Elastic.Transport.NodePool.Nodes" /> satisfies this predicate this will result in this failure.
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.CancellationRequested">
            <summary>
            Signals the audit may be incomplete because cancellation was requested on the async paths
            </summary>
        </member>
        <member name="F:Elastic.Transport.Diagnostics.Auditing.AuditEvent.FailedOverAllNodes">
            <summary>
            The request failed within the allotted <see cref="P:Elastic.Transport.ITransportConfiguration.MaxRetryTimeout" /> but failed
            on all the available <see cref="P:Elastic.Transport.NodePool.Nodes" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.DiagnosticSources">
            <summary>
            Provides public access to the strings used while emitting diagnostics.
            This makes wiring up <see cref="T:System.Diagnostics.DiagnosticListener" />'s less error prone and eliminates magic strings
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.AuditTrailEvents">
            <summary>
            When subscribing to <see cref="P:Elastic.Transport.Diagnostics.DiagnosticSources.AuditDiagnosticKeys.SourceName" /> you will be notified of all decisions in the request pipeline
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipeline">
            <summary>
            When subscribing to <see cref="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipelineDiagnosticKeys.SourceName" /> you will be notified every time a sniff/ping or an API call to Elasticsearch happens
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnection">
            <summary>
            When subscribing to <see cref="P:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnectionDiagnosticKeys.SourceName" /> you will be notified every time a a connection starts and stops a request and starts and stops a a response
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.Serializer">
            <summary>
            When subscribing to <see cref="P:Elastic.Transport.Diagnostics.DiagnosticSources.SerializerDiagnosticKeys.SourceName" /> you will be notified every time a particular serializer writes or reads
            </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnectionDiagnosticKeys">
            <summary>
            Provides access to the string event names related to <see cref="P:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnection" /> the default
            <see cref="T:Elastic.Transport.ITransportClient" /> implementation.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnectionDiagnosticKeys.SourceName">
            <summary>
            The source name to enable to receive diagnostic data for this <see cref="T:System.Diagnostics.DiagnosticSource" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnectionDiagnosticKeys.SendAndReceiveHeaders">
            <summary> Start and stop event initiating the request and sending and receiving the headers</summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.HttpConnectionDiagnosticKeys.ReceiveBody">
            <summary> Start and stop event that tracks receiving the body</summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.DiagnosticSources.SerializerDiagnosticKeys">
            <summary>
            Provides access to the string event names related to <see cref="T:Elastic.Transport.DiagnosticsSerializerProxy" /> which
            internally wraps any configured <see cref="T:Elastic.Transport.Serializer" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.SerializerDiagnosticKeys.SourceName">
            <summary>
            The source name to enable to receive diagnostic data for this <see cref="T:System.Diagnostics.DiagnosticSource" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.SerializerDiagnosticKeys.Serialize">
            <summary> Start and stop event around <see cref="M:Elastic.Transport.Serializer.Serialize``1(``0,System.IO.Stream,Elastic.Transport.SerializationFormatting)" /> invocations</summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.SerializerDiagnosticKeys.Deserialize">
            <summary> Start and stop event around <see cref="M:Elastic.Transport.Serializer.Deserialize``1(System.IO.Stream)" /> invocations</summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipelineDiagnosticKeys">
            <summary>
            Provides access to the string event names that <see cref="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipeline" /> emits
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipelineDiagnosticKeys.SourceName">
            <summary>
            The source name to enable to receive diagnostic data for this <see cref="T:System.Diagnostics.DiagnosticSource" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipelineDiagnosticKeys.CallProductEndpoint">
            <summary>
            Start and stop event around <see cref="M:Elastic.Transport.IRequestPipeline.CallProductEndpoint``1(Elastic.Transport.RequestData)" /> invocations
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipelineDiagnosticKeys.Ping">
            <summary> Start and stop event around <see cref="M:Elastic.Transport.IRequestPipeline.Ping(Elastic.Transport.Node)" /> invocations</summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.RequestPipelineDiagnosticKeys.Sniff">
            <summary> Start and stop event around <see cref="M:Elastic.Transport.IRequestPipeline.Sniff" /> invocations</summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.DiagnosticSources.AuditDiagnosticKeys">
            <summary>
            Reference to the diagnostic source name that allows you to listen to all decisions that
            <see cref="T:Elastic.Transport.IRequestPipeline" /> makes. Events it emits are the names on <see cref="T:Elastic.Transport.Diagnostics.Auditing.AuditEvent" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.DiagnosticSources.AuditDiagnosticKeys.SourceName">
            <summary>
            The source name to enable to receive diagnostic data for this <see cref="T:System.Diagnostics.DiagnosticSource" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.HttpConnectionDiagnosticObserver">
            <summary> Provides a typed listener to the events that <see cref="T:Elastic.Transport.HttpTransportClient" /> emits </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.HttpConnectionDiagnosticObserver.#ctor(System.Action{System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.RequestData}},System.Action{System.Collections.Generic.KeyValuePair{System.String,System.Nullable{System.Int32}}},System.Action{System.Exception},System.Action)">
            <summary> Provides a typed listener to the events that <see cref="T:Elastic.Transport.HttpTransportClient" /> emits </summary>&gt;
        </member>
        <member name="T:Elastic.Transport.Diagnostics.RequestPipelineDiagnosticObserver">
            <summary> Provides a typed listener to  actions that <see cref="T:Elastic.Transport.RequestPipeline`1" /> takes e.g sniff, ping, or making an API call </summary>;
        </member>
        <member name="M:Elastic.Transport.Diagnostics.RequestPipelineDiagnosticObserver.#ctor(System.Action{System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.RequestData}},System.Action{System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.IApiCallDetails}},System.Action{System.Exception},System.Action)">
            <summary> Provides a typed listener to  actions that <see cref="T:Elastic.Transport.RequestPipeline`1" /> takes e.g sniff, ping, or making an API call </summary>;
        
        </member>
        <member name="T:Elastic.Transport.Diagnostics.SerializerDiagnosticObserver">
            <summary> Provides a typed listener any time an <see cref="T:Elastic.Transport.Serializer" /> does a write or read</summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.SerializerDiagnosticObserver.#ctor(System.Action{System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.SerializerRegistrationInformation}},System.Action{System.Exception},System.Action)">
            <summary> Provides a typed listener any time an <see cref="T:Elastic.Transport.Serializer" /> does a write or read</summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.TcpStats">
            <summary>
            Gets statistics about TCP connections
            </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TcpStats.GetActiveTcpConnections">
            <summary>
            Gets the active TCP connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TcpStats.GetStates">
            <summary>
            Gets the sum for each state of the active TCP connections
            </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TcpStats.GetTcpStatistics(System.Net.NetworkInformation.NetworkInterfaceComponent)">
            <summary>
            Gets the TCP statistics for a given network interface component
            </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.ThreadPoolStats">
            <summary> Retrieves statistics for thread pools </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.ThreadPoolStats.GetStats">
            <summary> Retrieve thread pool statistics </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.ThreadPoolStatistics">
            <summary> Statistics for a thread pool </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.ThreadPoolStatistics.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Statistics for a thread pool </summary>&gt;
        </member>
        <member name="P:Elastic.Transport.Diagnostics.ThreadPoolStatistics.Busy">
            <summary>The difference between the maximum number of thread pool threads returned by
            <see cref="P:Elastic.Transport.Diagnostics.ThreadPoolStatistics.Max" />, and the number currently free.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.ThreadPoolStatistics.Free">
            <summary>The difference between the maximum number of thread pool threads returned by
            <see cref="P:Elastic.Transport.Diagnostics.ThreadPoolStatistics.Max" />, and the number currently active.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.ThreadPoolStatistics.Max">
            <summary>
            The number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until
            thread pool threads become available.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Diagnostics.ThreadPoolStatistics.Min">
            <summary>
            The minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for
            managing thread creation and destruction.
            </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`1">
            <summary>
            Provides a base implementation of <see cref="T:System.IObserver`1" /> that makes it easier to consume
            the <see cref="T:System.Diagnostics.DiagnosticSource" />'s exposed in this library
            </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`1.#ctor(System.Action{System.Collections.Generic.KeyValuePair{System.String,`0}},System.Action{System.Exception},System.Action)">
            <summary>
            Provides a base implementation of <see cref="T:System.IObserver`1" /> that makes it easier to consume
            the <see cref="T:System.Diagnostics.DiagnosticSource" />'s exposed in this library
            </summary>
        </member>
        <member name="T:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`2">
            <summary>
            Provides a base implementation of <see cref="T:System.IObserver`1" /> that makes it easier to consume
            the <see cref="T:System.Diagnostics.DiagnosticSource" />'s exposed in this library
            </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`2.#ctor(System.Action{System.Collections.Generic.KeyValuePair{System.String,`0}},System.Action{System.Collections.Generic.KeyValuePair{System.String,`1}},System.Action{System.Exception},System.Action)">
            <summary>
            Provides a base implementation of <see cref="T:System.IObserver`1" /> that makes it easier to consume
            the <see cref="T:System.Diagnostics.DiagnosticSource" />'s exposed in this library
            </summary>
        </member>
        <member name="T:Elastic.Transport.TransportException">
             <summary>
             Exceptions that occur <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> are wrapped inside
             this exception. This is done to not lose valuable diagnostic information.
            
             <para>
             When <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> is set these exceptions are rethrown and need
             to be caught
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.TransportException.#ctor(System.String)">
            <summary>
             Exceptions that occur <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> are wrapped inside
             this exception. This is done to not lose valuable diagnostic information.
            
             <para>
             When <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> is set these exceptions are rethrown and need
             to be caught
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.TransportException.#ctor(Elastic.Transport.PipelineFailure,System.String,System.Exception)">
            <summary>
             Exceptions that occur <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> are wrapped inside
             this exception. This is done to not lose valuable diagnostic information.
            
             <para>
             When <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> is set these exceptions are rethrown and need
             to be caught
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.TransportException.#ctor(Elastic.Transport.PipelineFailure,System.String,Elastic.Transport.IApiCallDetails)">
            <summary>
             Exceptions that occur <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> are wrapped inside
             this exception. This is done to not lose valuable diagnostic information.
            
             <para>
             When <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> is set these exceptions are rethrown and need
             to be caught
             </para>
             </summary>
        </member>
        <member name="P:Elastic.Transport.TransportException.AuditTrail">
            <summary>
            The audit trail keeping track of what happened during the invocation of
            <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> up until the moment of this exception
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportException.FailureReason">
            <summary>
            The reason this exception occurred was one of the well defined exit points as modelled by
            <see cref="T:Elastic.Transport.PipelineFailure" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportException.Request">
            <summary> Information about the request that triggered this exception </summary>
        </member>
        <member name="P:Elastic.Transport.TransportException.Response">
            <summary> The response if available that triggered the exception </summary>
        </member>
        <member name="P:Elastic.Transport.TransportException.DebugInformation">
            <summary>
            A self describing human readable string explaining why this exception was thrown.
            <para>Useful in logging and diagnosing + reporting issues!</para>
            </summary>
        </member>
        <member name="T:Elastic.Transport.UnexpectedTransportException">
            <summary>
            An exception occured that was not the result of one the well defined exit points as modelled by
            <see cref="T:Elastic.Transport.PipelineFailure" />. This exception will always bubble out.
            </summary>
        </member>
        <member name="M:Elastic.Transport.UnexpectedTransportException.#ctor(System.Exception,System.Collections.Generic.IReadOnlyCollection{Elastic.Transport.PipelineException})">
            <summary>
            An exception occured that was not the result of one the well defined exit points as modelled by
            <see cref="T:Elastic.Transport.PipelineFailure" />. This exception will always bubble out.
            </summary>
        </member>
        <member name="P:Elastic.Transport.UnexpectedTransportException.SeenExceptions">
            <summary>
            Seen Exceptions that we try to failover on before this <see cref="T:Elastic.Transport.UnexpectedTransportException" /> was thrown.
            </summary>
        </member>
        <member name="T:Elastic.Transport.ITransport">
            <summary>
            Represents a transport you can call requests, it is recommended to implement <see cref="T:Elastic.Transport.ITransport`1" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)">
            <summary>
            Perform a request into the products cluster using <see cref="T:Elastic.Transport.IRequestPipeline" />'s workflow.
            </summary>
        </member>
        <member name="M:Elastic.Transport.ITransport.RequestAsync``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>
            Perform a request into the products cluster using <see cref="T:Elastic.Transport.IRequestPipeline" />'s workflow.
            </summary>
        </member>
        <member name="T:Elastic.Transport.ITransport`1">
            <summary>
            Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
            different nodes
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransport`1.Settings">
            <summary>
            The <see cref="T:Elastic.Transport.ITransportConfiguration" /> in use by this transport instance
            </summary>
        </member>
        <member name="T:Elastic.Transport.Products.ProductRegistration">
            <summary>
            A default non-descriptive product registration that does not support sniffing and pinging.
            Can be used to connect to unknown services before they develop their own <see cref="T:Elastic.Transport.Products.IProductRegistration" />
            implementations
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.Default">
            <summary> A static instance of <see cref="T:Elastic.Transport.Products.ProductRegistration" /> to promote reuse </summary>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.Name">
            <summary>
            The name of the current product utilizing <see cref="T:Elastic.Transport.ITransport`1" />
            <para>This name makes its way into the transport diagnostics sources and the default user agent string</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.SupportsPing">
            <summary>
            Whether the product <see cref="T:Elastic.Transport.ITransport`1" /> will call out to supports ping endpoints
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.SupportsSniff">
            <summary>
            Whether the product <see cref="T:Elastic.Transport.ITransport`1" /> will call out to supports sniff endpoints that return
            information about available nodes
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.SniffOrder(Elastic.Transport.Node)">
            <summary> Allows certain nodes to be queried first to obtain sniffing information </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.NodePredicate(Elastic.Transport.Node)">
            <summary> Predicate indicating a node is allowed to be used for API calls</summary>
            <param name="node">The node to inspect</param>
            <returns>bool, true if node should allows API calls</returns>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.ResponseHeadersToParse">
            <summary>
            The set of headers to parse from all requests by default. These can be added to any consumer specific requirements.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.MetaHeaderProvider">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.ProductRegistration.ResponseBuilder">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.HttpStatusCodeClassifier(Elastic.Transport.HttpMethod,System.Int32)">
            <summary>
            Used by <see cref="P:Elastic.Transport.Products.IProductRegistration.ResponseBuilder" /> to determine if it needs to return true or false for
            <see cref="P:Elastic.Transport.IApiCallDetails.Success" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.TryGetServerErrorReason``1(``0,System.String@)">
            <summary> Try to obtain a server error from the response, this is used for debugging and exception messages </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
            Create an instance of <see cref="T:Elastic.Transport.RequestData" /> that describes where and how to sniff the cluster using <paramref name="node" />
            <para>All the parameters of this method correspond with <see cref="T:Elastic.Transport.RequestData" />'s constructor</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.SniffAsync(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Provide an implementation that performs the sniff directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.Sniff(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData)">
            <summary>
            Provide an implementation that performs the sniff directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
            Create an instance of <see cref="T:Elastic.Transport.RequestData" /> that describes where and how to ping see <paramref name="node" />
            <para>All the parameters of this method correspond with <see cref="T:Elastic.Transport.RequestData" />'s constructor</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.PingAsync(Elastic.Transport.ITransportClient,Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Provide an implementation that performs the ping directly using <see cref="M:Elastic.Transport.ITransportClient.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.ProductRegistration.Ping(Elastic.Transport.ITransportClient,Elastic.Transport.RequestData)">
            <summary>
            Provide an implementation that performs the ping directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures">
            <summary>
            Encodes the features <see cref="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.Sniff(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData)" /> will register on
            <see cref="P:Elastic.Transport.Node.Features" />. These static strings make it easier to inspect if features are enabled
            using <see cref="M:Elastic.Transport.Node.HasFeature(System.String)" />
            </summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.HoldsData">
            <summary>Indicates whether this node holds data, defaults to true when unknown/unspecified</summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.HttpEnabled">
            <summary>Whether HTTP is enabled on the node or not</summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.IngestEnabled">
            <summary>Indicates whether this node is allowed to run ingest pipelines, defaults to true when unknown/unspecified</summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.MasterEligible">
            <summary>Indicates whether this node is master eligible, defaults to true when unknown/unspecified</summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.Default">
            <summary> The default collection of features, which enables ALL Features </summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.MasterEligibleOnly">
            <summary> The node only has the <see cref="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.MasterEligible" /> and <see cref="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.HttpEnabled" /> features</summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.NotMasterEligible">
            <summary> The node has all features EXCEPT <see cref="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchNodeFeatures.MasterEligible" /></summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.Products.IProductRegistration" /> that fills in the bespoke implementations
            for Elasticsearch so that <see cref="T:Elastic.Transport.IRequestPipeline" /> knows how to ping and sniff if we setup
            <see cref="T:Elastic.Transport.ITransport`1" /> to talk to Elasticsearch
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.#ctor">
            <summary>
            Create a new instance of the Elasticsearch product registration.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="markerType"></param>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.Default">
            <summary> A static instance of <see cref="T:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration" /> to promote reuse </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.Name">
            <summary>
            The name of the current product utilizing <see cref="T:Elastic.Transport.ITransport`1" />
            <para>This name makes its way into the transport diagnostics sources and the default user agent string</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.SupportsPing">
            <summary>
            Whether the product <see cref="T:Elastic.Transport.ITransport`1" /> will call out to supports ping endpoints
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.SupportsSniff">
            <summary>
            Whether the product <see cref="T:Elastic.Transport.ITransport`1" /> will call out to supports sniff endpoints that return
            information about available nodes
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.ResponseHeadersToParse">
            <summary>
            The set of headers to parse from all requests by default. These can be added to any consumer specific requirements.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.MetaHeaderProvider">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.ResponseBuilder">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.SniffPath">
            <summary> Exposes the path used for sniffing in Elasticsearch </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.SniffOrder(Elastic.Transport.Node)">
            <summary>
            Implements an ordering that prefers master eligible nodes when attempting to sniff the
            <see cref="P:Elastic.Transport.NodePool.Nodes" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.NodePredicate(Elastic.Transport.Node)">
            <summary>
            If we know that a node is a master eligible node that hold no data it is excluded from regular
            API calls. They are considered for ping and sniff requests.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.HttpStatusCodeClassifier(Elastic.Transport.HttpMethod,System.Int32)">
            <summary>
            Used by <see cref="P:Elastic.Transport.Products.IProductRegistration.ResponseBuilder" /> to determine if it needs to return true or false for
            <see cref="P:Elastic.Transport.IApiCallDetails.Success" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.TryGetServerErrorReason``1(``0,System.String@)">
            <summary> Try to obtain a server error from the response, this is used for debugging and exception messages </summary>&gt;
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
            Create an instance of <see cref="T:Elastic.Transport.RequestData" /> that describes where and how to sniff the cluster using <paramref name="node" />
            <para>All the parameters of this method correspond with <see cref="T:Elastic.Transport.RequestData" />'s constructor</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.SniffAsync(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Provide an implementation that performs the sniff directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.Sniff(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData)">
            <summary>
            Provide an implementation that performs the sniff directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
            Create an instance of <see cref="T:Elastic.Transport.RequestData" /> that describes where and how to ping see <paramref name="node" />
            <para>All the parameters of this method correspond with <see cref="T:Elastic.Transport.RequestData" />'s constructor</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.PingAsync(Elastic.Transport.ITransportClient,Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Provide an implementation that performs the ping directly using <see cref="M:Elastic.Transport.ITransportClient.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchProductRegistration.Ping(Elastic.Transport.ITransportClient,Elastic.Transport.RequestData)">
            <summary>
            Provide an implementation that performs the ping directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ElasticsearchErrorExtensions">
            <summary>
            Extends the builtin responses with parsing for <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchErrorExtensions.TryGetElasticsearchServerError(Elastic.Transport.StringResponse,Elastic.Transport.Products.Elasticsearch.ServerError@)">
            <summary> Try to parse an Elasticsearch <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" /> </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchErrorExtensions.TryGetElasticsearchServerError(Elastic.Transport.BytesResponse,Elastic.Transport.Products.Elasticsearch.ServerError@)">
            <summary> Try to parse an Elasticsearch <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" /> </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchErrorExtensions.TryGetElasticsearchServerError(Elastic.Transport.ITransportResponse,Elastic.Transport.Products.Elasticsearch.ServerError@)">
            <summary>
            Try to parse an Elasticsearch <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" />, this only works if
            <see cref="P:Elastic.Transport.ITransportConfiguration.DisableDirectStreaming" /> gives us access to <see cref="P:Elastic.Transport.IApiCallDetails.RequestBodyInBytes" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase">
            <summary>
            Base response for Elasticsearch responses.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.ApiCall">
            <summary> Returns useful information about the request(s) that were part of this API call. </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.Warnings">
            <summary>
            A collection of warnings returned from Elasticsearch.
            <para>Used to provide server warnings, for example, when the request uses an API feature that is marked as deprecated.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.DebugInformation">
            <summary>
            A lazily computed, human readable string representation of what happened during a request for both successful and
            failed requests. Useful whilst developing or to log when <see cref="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid" /> is false on responses.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.IsValid">
            <summary>
            Checks if a response is functionally valid or not.
            This is a Elastic.Clients.Elasticsearch abstraction to have a single property to check whether there was something wrong with a request.
            <para>
            For instance, an Elasticsearch bulk response always returns 200 and individual bulk items may fail,
            <see cref="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid" /> will be false in that case.
            </para>
            <para>
            You can also configure the client to always throw an <see cref="T:Elastic.Transport.TransportException" /> using
            <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> if the response is not valid
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.OriginalException">
            <summary>
            If the request resulted in an exception on the client side this will hold the exception that was thrown.
            <para>
            This property is a shortcut to <see cref="P:Elastic.Transport.ITransportResponse.ApiCall" />'s
            <see cref="P:Elastic.Transport.IApiCallDetails.OriginalException" /> and
            is possibly set when <see cref="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid" /> is false depending on the cause of the error
            </para>
            <para>
            You can also configure the client to always throw an <see cref="T:Elastic.Transport.TransportException" /> using
            <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> if the response is not valid
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.ServerError">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.TryGetOriginalException(System.Exception@)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.DebugIsValid(System.Text.StringBuilder)">
            <summary>Subclasses can override this to provide more information on why a call is not valid.</summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.Error">
            <summary> Represents the serialized Elasticsearch java exception that caused a request to fail </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.Error.Headers">
            <summary> Additional headers from the request that pertain to the error</summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.Error.RootCause">
            <summary> The root cause exception </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.Error.ToString">
            <summary> A human readable string representation of the exception returned by Elasticsearch </summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ErrorCause">
            <summary> Represents an Elasticsearch server exception. </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ErrorCause.AdditionalProperties">
            <summary>
            Additional properties related to the error cause. Contains properties that
            are not explicitly mapped on <see cref="T:Elastic.Transport.Products.Elasticsearch.ErrorCause" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ErrorCause.Type">
            <summary> The name of the Elasticsearch server exception that was thrown </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ErrorCause.StackTrace">
            <summary>
            If stacktrace was requested this holds the java stack trace as it occurred on the server
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ErrorCause.Reason">
            <summary>
            The exception message of the exception that was thrown on the server causing the request to fail
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ErrorCause.ToString">
            <summary> A human readable string representation of the exception returned by Elasticsearch </summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ServerError">
            <summary> Represents the error response as returned by Elasticsearch. </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.#ctor">
            <summary> Represents the error response as returned by Elasticsearch. </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.#ctor(Elastic.Transport.Products.Elasticsearch.Error,System.Nullable{System.Int32})">
            <summary> Represents the error response as returned by Elasticsearch. </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ServerError.Error">
            <summary> an <see cref="P:Elastic.Transport.Products.Elasticsearch.ServerError.Error" /> object that represents the server exception that occurred</summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ServerError.Status">
            <summary> The HTTP status code returned from the server </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.TryCreate(System.IO.Stream,Elastic.Transport.Products.Elasticsearch.ServerError@)">
            <summary>
            Try and create an instance of <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" /> from <paramref name="stream" />
            </summary>
            <returns>Whether a an instance of <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" /> was created successfully</returns>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.Create(System.IO.Stream)">
            <summary>
            Use the clients default <see cref="T:Elastic.Transport.LowLevelRequestResponseSerializer" /> to create an instance
            of <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" /> from <paramref name="stream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.CreateAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Use the clients default <see cref="T:Elastic.Transport.LowLevelRequestResponseSerializer" /> to create an instance
            of <see cref="T:Elastic.Transport.Products.Elasticsearch.ServerError" /> from <paramref name="stream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.ToString">
            <summary> A human readable string representation of the server error returned by Elasticsearch </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.ServerError.HasError">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.ShardFailure">
            <summary> Represents a failure that occurred on a shard involved in the request </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ShardFailure.Index">
            <summary> This index this shard belongs to </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ShardFailure.Node">
            <summary> The node the shard is currently allocated on</summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ShardFailure.Reason">
            <summary>
            The java exception that caused the shard to fail
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ShardFailure.Shard">
            <summary> The shard number that failed </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ShardFailure.Status">
            <summary> The status of the shard when the exception occured</summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse">
            <summary>
            A response from Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.DebugInformation">
            <summary>
            A lazily computed, human readable string representation of what happened during a request for both successful and
            failed requests. Useful whilst developing or to log when <see cref="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid" /> is false on responses.
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid">
            <summary>
            Checks if a response is functionally valid or not.
            This is a Elastic.Clients.Elasticsearch abstraction to have a single property to check whether there was something wrong with a request.
            <para>
            For instance, an Elasticsearch bulk response always returns 200 and individual bulk items may fail,
            <see cref="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid" /> will be false in that case.
            </para>
            <para>
            You can also configure the client to always throw an <see cref="T:Elastic.Transport.TransportException" /> using
            <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> if the response is not valid
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.OriginalException">
            <summary>
            If the request resulted in an exception on the client side this will hold the exception that was thrown.
            <para>
            This property is a shortcut to <see cref="P:Elastic.Transport.ITransportResponse.ApiCall" />'s
            <see cref="P:Elastic.Transport.IApiCallDetails.OriginalException" /> and
            is possibly set when <see cref="P:Elastic.Transport.Products.Elasticsearch.IElasticsearchResponse.IsValid" /> is false depending on the cause of the error
            </para>
            <para>
            You can also configure the client to always throw an <see cref="T:Elastic.Transport.TransportException" /> using
            <see cref="P:Elastic.Transport.ITransportConfiguration.ThrowExceptions" /> if the response is not valid
            </para>
            </summary>
        </member>
        <member name="T:Elastic.Transport.Products.Elasticsearch.SniffParser">
            <summary>
            Elasticsearch returns addresses in the form of
            <para>[fqdn]/ip:port number</para>
            This helper parses it to <see cref="T:System.Uri" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.SniffParser.AddressRegex">
            <summary> A regular expression that captures <c>fqdn</c>, <c>ip</c> and <c>por</c> </summary>
        </member>
        <member name="M:Elastic.Transport.Products.Elasticsearch.SniffParser.ParseToUri(System.String,System.Boolean)">
            <summary>
            Elasticsearch returns addresses in the form of
            <para>[fqdn]/ip:port number</para>
            This helper parses it to <see cref="T:System.Uri" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.Products.IProductRegistration">
            <summary>
            When <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> interfaces with a product some parts are
            bespoke for each product. This interface defines the contract products will have to implement in order to fill
            in these bespoke parts.
            <para>The expectation is that unless you instantiate <see cref="T:Elastic.Transport.Transport`1" />
            directly clients that utilize transport will fill in this dependency
            </para>
            <para>
            If you do want to use a bare-bones <see cref="T:Elastic.Transport.Transport`1" /> you can use
            <see cref="P:Elastic.Transport.Products.ProductRegistration.Default" />
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.IProductRegistration.Name">
            <summary>
            The name of the current product utilizing <see cref="T:Elastic.Transport.ITransport`1" />
            <para>This name makes its way into the transport diagnostics sources and the default user agent string</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.IProductRegistration.SupportsPing">
            <summary>
            Whether the product <see cref="T:Elastic.Transport.ITransport`1" /> will call out to supports ping endpoints
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.IProductRegistration.SupportsSniff">
            <summary>
            Whether the product <see cref="T:Elastic.Transport.ITransport`1" /> will call out to supports sniff endpoints that return
            information about available nodes
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.IProductRegistration.ResponseHeadersToParse">
            <summary>
            The set of headers to parse from all requests by default. These can be added to any consumer specific requirements.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
            Create an instance of <see cref="T:Elastic.Transport.RequestData" /> that describes where and how to ping see <paramref name="node" />
            <para>All the parameters of this method correspond with <see cref="T:Elastic.Transport.RequestData" />'s constructor</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.PingAsync(Elastic.Transport.ITransportClient,Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Provide an implementation that performs the ping directly using <see cref="M:Elastic.Transport.ITransportClient.RequestAsync``1(Elastic.Transport.RequestData,System.Threading.CancellationToken)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.Ping(Elastic.Transport.ITransportClient,Elastic.Transport.RequestData)">
            <summary>
            Provide an implementation that performs the ping directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreatePingRequestData(Elastic.Transport.Node,Elastic.Transport.RequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
            Create an instance of <see cref="T:Elastic.Transport.RequestData" /> that describes where and how to sniff the cluster using <paramref name="node" />
            <para>All the parameters of this method correspond with <see cref="T:Elastic.Transport.RequestData" />'s constructor</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.SniffAsync(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData,System.Threading.CancellationToken)">
            <summary>
            Provide an implementation that performs the sniff directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.Sniff(Elastic.Transport.ITransportClient,System.Boolean,Elastic.Transport.RequestData)">
            <summary>
            Provide an implementation that performs the sniff directly using <see cref="M:Elastic.Transport.ITransportClient.Request``1(Elastic.Transport.RequestData)" /> and the <see cref="T:Elastic.Transport.RequestData" />
            return by <see cref="M:Elastic.Transport.Products.IProductRegistration.CreateSniffRequestData(Elastic.Transport.Node,Elastic.Transport.IRequestConfiguration,Elastic.Transport.ITransportConfiguration,Elastic.Transport.IMemoryStreamFactory)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.SniffOrder(Elastic.Transport.Node)">
            <summary> Allows certain nodes to be queried first to obtain sniffing information </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.NodePredicate(Elastic.Transport.Node)">
            <summary> Predicate indicating a node is allowed to be used for API calls</summary>
            <param name="node">The node to inspect</param>
            <returns>bool, true if node should allows API calls</returns>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.HttpStatusCodeClassifier(Elastic.Transport.HttpMethod,System.Int32)">
            <summary>
            Used by <see cref="P:Elastic.Transport.Products.IProductRegistration.ResponseBuilder" /> to determine if it needs to return true or false for
            <see cref="P:Elastic.Transport.IApiCallDetails.Success" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.Products.IProductRegistration.TryGetServerErrorReason``1(``0,System.String@)">
            <summary> Try to obtain a server error from the response, this is used for debugging and exception messages </summary>
        </member>
        <member name="P:Elastic.Transport.Products.IProductRegistration.MetaHeaderProvider">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Elastic.Transport.Products.IProductRegistration.ResponseBuilder">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Elastic.Transport.PostData">
            <summary>
            Represents the data the the user wishes to send over the wire. This abstract base class exposes
            static factory methods to help you create wrap the various types of data we support.
            <para></para>
            <para>For raw bytes use <see cref="M:Elastic.Transport.PostData.Bytes(System.Byte[])" /></para>
            <para>For raw string use <see cref="M:Elastic.Transport.PostData.String(System.String)" /></para>
            <para>To serialize an object use <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" /></para>
            <para>For <see cref="T:System.ReadOnlyMemory`1" /> use <see cref="T:System.ReadOnlyMemory`1" /></para>
            <para>To write your object directly to <see cref="T:System.IO.Stream" /> using a handler use <see cref="M:Elastic.Transport.PostData.StreamHandler``1(``0,System.Action{``0,System.IO.Stream},System.Func{``0,System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})" /></para>
            <para>Multiline json is supported to using  <see cref="M:Elastic.Transport.PostData.MultiJson``1(System.Collections.Generic.IEnumerable{``0})" /></para>
            <para>and  <see cref="M:Elastic.Transport.PostData.MultiJson(System.Collections.Generic.IEnumerable{System.String})" /></para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.Bytes(System.Byte[])">
            <summary>
            Create a <see cref="T:Elastic.Transport.PostData" /> instance that will write <paramref name="bytes" /> to the output <see cref="T:System.IO.Stream" />
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostData.BufferSize">
            <summary>
            The buffer size to use when calling <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)" />
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostData.NewLineByteArray">
            <summary> A static byte[] that hols a single new line feed </summary>
        </member>
        <member name="P:Elastic.Transport.PostData.DisableDirectStreaming">
            <summary>
            By setting this to true, <see cref="M:Elastic.Transport.PostData.Write(System.IO.Stream,Elastic.Transport.ITransportConfiguration)" /> and <see cref="M:Elastic.Transport.PostData.WriteAsync(System.IO.Stream,Elastic.Transport.ITransportConfiguration,System.Threading.CancellationToken)" /> will buffer the data and
            expose it on <see cref="P:Elastic.Transport.PostData.WrittenBytes" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.PostData.Type">
            <summary> Reports the data this instance is wrapping </summary>
        </member>
        <member name="P:Elastic.Transport.PostData.WrittenBytes">
            <summary>
            If <see cref="P:Elastic.Transport.PostData.DisableDirectStreaming" /> is set to true, this will hold the buffered data after <see cref="M:Elastic.Transport.PostData.Write(System.IO.Stream,Elastic.Transport.ITransportConfiguration)" />
            or <see cref="M:Elastic.Transport.PostData.WriteAsync(System.IO.Stream,Elastic.Transport.ITransportConfiguration,System.Threading.CancellationToken)" /> is called
            </summary>
        </member>
        <member name="P:Elastic.Transport.PostData.Empty">
            <summary> A static instance that represents a body with no data </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.Write(System.IO.Stream,Elastic.Transport.ITransportConfiguration)">
            <summary>
            Implementations of <see cref="T:Elastic.Transport.PostData" /> are expected to implement writing the data they hold to
            <paramref name="writableStream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.WriteAsync(System.IO.Stream,Elastic.Transport.ITransportConfiguration,System.Threading.CancellationToken)">
            <summary>
            Implementations of <see cref="T:Elastic.Transport.PostData" /> are expected to implement writing the data they hold to
            <paramref name="writableStream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.op_Implicit(System.Byte[])~Elastic.Transport.PostData">
            <summary>
            byte[] implicitly converts to <see cref="T:Elastic.Transport.PostData" /> so you do not have to use the static <see cref="M:Elastic.Transport.PostData.Bytes(System.Byte[])" />
            factory method
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.InitWrite(System.IO.Stream,Elastic.Transport.ITransportConfiguration,System.IO.MemoryStream@,System.Boolean@)">
            <summary> Sets up the stream and buffer and determines if direct streaming should be disabled </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.BufferIfNeeded(Elastic.Transport.ITransportConfiguration,System.IO.MemoryStream@,System.IO.Stream@)">
            <summary>
            Based on <paramref name="settings" /> or <see cref="P:Elastic.Transport.PostData.DisableDirectStreaming" /> this will swap <paramref name="stream" />
            with <paramref name="buffer" /> after allocating <paramref name="buffer" />.
            <para>NOTE: <paramref name="buffer" /> is expected to be null when called and may be null when this method returns</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.FinishStream(System.IO.Stream,System.IO.MemoryStream,Elastic.Transport.ITransportConfiguration)">
            <summary>
            Implementation of <see cref="M:Elastic.Transport.PostData.Write(System.IO.Stream,Elastic.Transport.ITransportConfiguration)" /> may call this to make sure <paramref name="buffer" /> makes it to <see cref="P:Elastic.Transport.PostData.WrittenBytes" />
            if <see cref="P:Elastic.Transport.PostData.DisableDirectStreaming" /> or <paramref name="settings" /> request to buffer the data.
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.FinishStreamAsync(System.IO.Stream,System.IO.MemoryStream,Elastic.Transport.ITransportConfiguration,System.Threading.CancellationToken)">
            <summary>
            Implementation of <see cref="M:Elastic.Transport.PostData.WriteAsync(System.IO.Stream,Elastic.Transport.ITransportConfiguration,System.Threading.CancellationToken)" /> may call this to make sure <paramref name="buffer" /> makes it to <see cref="P:Elastic.Transport.PostData.WrittenBytes" />
            if <see cref="P:Elastic.Transport.PostData.DisableDirectStreaming" /> or <paramref name="settings" /> request to buffer the data.
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.MultiJson(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a <see cref="T:Elastic.Transport.PostData" /> instance that will write the <paramref name="listOfString" /> as multiline/ndjson.
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.MultiJson``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a <see cref="T:Elastic.Transport.PostData" /> instance that will serialize the <paramref name="listOfSerializables" /> as multiline/ndjson.
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.ReadOnlyMemory(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Create a <see cref="T:Elastic.Transport.PostData" /> instance that will write the <paramref name="bytes" /> to the output <see cref="T:System.IO.Stream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.Serializable``1(``0)">
            <summary>
            Create a <see cref="T:Elastic.Transport.PostData" /> instance that will serialize <paramref name="data" /> using
            <see cref="T:Elastic.Transport.Serializer" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.StreamHandler``1(``0,System.Action{``0,System.IO.Stream},System.Func{``0,System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Create an instance of serializable data <paramref name="state" />. This state is then passed to <paramref name="syncWriter" />
            and <paramref name="asyncWriter" /> along with the <see cref="T:System.IO.Stream" /> to write to. Both will need to be supplied in order to
            support both <see cref="M:Elastic.Transport.PostData.Write(System.IO.Stream,Elastic.Transport.ITransportConfiguration)" /> and <see cref="M:Elastic.Transport.PostData.WriteAsync(System.IO.Stream,Elastic.Transport.ITransportConfiguration,System.Threading.CancellationToken)" />
            </summary>
            <param name="state">The object we want to serialize later on</param>
            <param name="syncWriter">A func receiving <paramref name="state" /> and a <see cref="T:System.IO.Stream" /> to write to</param>
            <param name="asyncWriter">A func receiving <paramref name="state" /> and a <see cref="T:System.IO.Stream" /> to write to</param>
        </member>
        <member name="M:Elastic.Transport.PostData.String(System.String)">
            <summary>
            Create a <see cref="T:Elastic.Transport.PostData" /> instance that will write <paramref name="serializedString" /> to the output <see cref="T:System.IO.Stream" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.PostData.op_Implicit(System.String)~Elastic.Transport.PostData">
            <summary>
            string implicitly converts to <see cref="T:Elastic.Transport.PostData" /> so you do not have to use the static <see cref="M:Elastic.Transport.PostData.String(System.String)" />
            factory method
            </summary>
        </member>
        <member name="T:Elastic.Transport.PostType">
            <summary>
            Describes the type of data the user wants transmit over the transport
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.ByteArray">
            <summary>
            A raw array of <see cref="T:System.Byte" />'s to be send over the wire
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.Bytes(System.Byte[])" /></para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.ReadOnlyMemory">
            <summary>
            An instance of <see cref="T:System.ReadOnlyMemory`1" /> where T is byte
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.ReadOnlyMemory(System.ReadOnlyMemory{System.Byte})" /></para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.LiteralString">
            <summary>
            An instance of <see cref="T:System.String" />
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.String(System.String)" /></para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.Serializable">
            <summary>
            An instance of a user provided value to be serialized by <see cref="T:Elastic.Transport.Serializer" />
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.Serializable``1(``0)" /></para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.EnumerableOfString">
            <summary>
            An enumerable of <see cref="T:System.String" /> this will be serialized using ndjson multiline syntax
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.MultiJson(System.Collections.Generic.IEnumerable{System.String})" /></para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.EnumerableOfObject">
            <summary>
            An enumerable of <see cref="T:System.Object" /> this will be serialized using ndjson multiline syntax
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.MultiJson``1(System.Collections.Generic.IEnumerable{``0})" /></para>
            </summary>
        </member>
        <member name="F:Elastic.Transport.PostType.StreamHandler">
            <summary>
            The user provided a delegate to write the instance on <see cref="T:Elastic.Transport.PostData" /> manually and directly
            <para>Instantiate using <see cref="M:Elastic.Transport.PostData.StreamHandler``1(``0,System.Action{``0,System.IO.Stream},System.Func{``0,System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})" /></para>
            </summary>
        </member>
        <member name="T:Elastic.Transport.IRequestParameters">
            <summary>
            Per request specific parameters. Holds literal url request parameters as well as
            per request configuration overrides on <see cref="P:Elastic.Transport.IRequestParameters.RequestConfiguration" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestParameters.CustomResponseBuilder">
            <summary> Allows you to completely circumvent the serializer to build the final response.</summary>
        </member>
        <member name="P:Elastic.Transport.IRequestParameters.QueryString">
            <summary>
            The querystring that should be appended to the path of the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.IRequestParameters.RequestConfiguration">
            <summary>
            Configuration for this specific request, i.e disable sniffing, custom timeouts etcetera.
            </summary>
        </member>
        <member name="M:Elastic.Transport.IRequestParameters.SetQueryString(System.String,System.Object)">
            <summary> Sets a query string param. If <paramref name="value" /> is null and the parameter exists it will be removed </summary>
            <param name="name">The query string parameter to add</param>
            <param name="value">The value to set, if null removes <paramref name="name" /> from the query string if it exists</param>
        </member>
        <member name="M:Elastic.Transport.IRequestParameters.ContainsQueryString(System.String)">
            <summary>
            Returns whether the query string <paramref name="name" /> was previously set already
            </summary>
        </member>
        <member name="M:Elastic.Transport.IRequestParameters.GetQueryStringValue``1(System.String)">
            <summary>
            Get's the value as its stored on the querystring using its original type
            </summary>
        </member>
        <member name="M:Elastic.Transport.IRequestParameters.GetResolvedQueryStringValue(System.String,Elastic.Transport.ITransportConfiguration)">
            <summary>
            Gets the stringified representation of a query string value as it would be sent to Elasticsearch.
            </summary>
        </member>
        <member name="M:Elastic.Transport.IRequestParameters.AcceptHeaderFromFormat(System.String)">
            <summary>
            Gets the HTTP Accept Header value from the shortened name. If the shortened name is not recognized,
            <c>null</c> is returned.
            </summary>
        </member>
        <member name="T:Elastic.Transport.IUrlParameter">
            <summary> Implementers define an object that can be serialized as a query string parameter </summary>
        </member>
        <member name="M:Elastic.Transport.IUrlParameter.GetString(Elastic.Transport.ITransportConfiguration)">
            <summary> Get the a string representation using <paramref name="settings" /> </summary>
        </member>
        <member name="T:Elastic.Transport.DefaultMetaHeaderProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.DefaultMetaHeaderProvider.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.DefaultMetaHeaderProvider.HeaderName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.DefaultMetaHeaderProvider.ProduceHeaderValue(Elastic.Transport.RequestData)">
            <summary>
            
            </summary>
            <param name="requestData"></param>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.MetaDataHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.MetaDataHeader.#ctor(Elastic.Transport.VersionInfo,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="version"></param>
            <param name="serviceIdentifier"></param>
            <param name="isAsync"></param>
        </member>
        <member name="P:Elastic.Transport.MetaDataHeader.ServiceIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.MetaDataHeader.ClientVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.MetaDataHeader.TransportVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.MetaDataHeader.RuntimeVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.MetaDataHeader.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.MetaHeaderProvider">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Elastic.Transport.MetaHeaderProvider.HeaderName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.MetaHeaderProvider.ProduceHeaderValue(Elastic.Transport.RequestData)">
            <summary>
            TODO
            </summary>
            <param name="requestData"></param>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.RequestConfigurationExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestConfigurationExtensions.SetRequestMetaData(Elastic.Transport.IRequestConfiguration,Elastic.Transport.RequestMetaData)">
            <summary>
            
            </summary>
            <param name="requestConfiguration"></param>
            <param name="requestMetaData"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Elastic.Transport.RequestMetaData">
            <summary>
            Holds meta data about a client request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestMetaData.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Elastic.Transport.RequestMetaDataExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestMetaDataExtensions.AddHelper(Elastic.Transport.RequestMetaData,System.String)">
            <summary>
            
            </summary>
            <param name="metaData"></param>
            <param name="helperValue"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Elastic.Transport.VersionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elastic.Transport.VersionInfo.EmptyVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.VersionInfo.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elastic.Transport.VersionInfo.IsPrerelease">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.VersionInfo.StoreVersion(System.String)">
            <summary>
            
            </summary>
            <param name="fullVersion"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Elastic.Transport.VersionInfo.ContainsPrerelease(System.String)">
            <summary>
            
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Elastic.Transport.VersionInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.IStringable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.IStringable.GetString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elastic.Transport.RequestParameters">
            <summary>
            Per request specific parameters. Holds literal url request parameters as well as
            per request configuration overrides on <see cref="P:Elastic.Transport.IRequestParameters.RequestConfiguration" />
            </summary>
        </member>
        <member name="T:Elastic.Transport.RequestParameters`1">
            <summary>
            Used by the raw client to compose querystring parameters in a matter that still exposes some xmldocs
            You can always pass a simple NameValueCollection if you want.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Elastic.Transport.RequestParameters`1.CustomResponseBuilder">
            <summary> Allows you to completely circumvent the serializer to build the final response.</summary>
        </member>
        <member name="P:Elastic.Transport.RequestParameters`1.QueryString">
            <summary>
            The querystring that should be appended to the path of the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestParameters`1.RequestConfiguration">
            <summary>
            Configuration for this specific request, i.e disable sniffing, custom timeouts etcetera.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.ContainsQueryString(System.String)">
            <summary>
            Returns whether the query string <paramref name="name" /> was previously set already
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.GetQueryStringValue``1(System.String)">
            <summary>
            Get's the value as its stored on the querystring using its original type
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.GetResolvedQueryStringValue(System.String,Elastic.Transport.ITransportConfiguration)">
            <summary>
            Gets the stringified representation of a query string value as it would be sent to Elasticsearch.
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.SetQueryString(System.String,System.Object)">
            <summary> Sets a query string param. If <paramref name="value" /> is null and the parameter exists it will be removed </summary>
            <param name="name">The query string parameter to add</param>
            <param name="value">The value to set, if null removes <paramref name="name" /> from the query string if it exists</param>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.Q``1(System.String)">
            <summary> Shortcut to <see cref="M:Elastic.Transport.RequestParameters`1.GetQueryStringValue``1(System.String)" /> for generated code </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.Q(System.String,System.Object)">
            <summary> Shortcut to <see cref="M:Elastic.Transport.RequestParameters`1.SetQueryString(System.String,System.Object)" /> for generated code </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.Q(System.String,Elastic.Transport.IStringable)">
            <summary> Shortcut to <see cref="M:Elastic.Transport.RequestParameters`1.SetQueryString(System.String,System.Object)" /> for generated code </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.SetAcceptHeader(System.String)">
            <summary>
            Makes sure <see cref="P:Elastic.Transport.RequestParameters`1.RequestConfiguration" /> is set before explicitly setting <see cref="P:Elastic.Transport.IRequestConfiguration.Accept" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.RequestParameters`1.AcceptHeaderFromFormat(System.String)">
            <summary>
            Gets the HTTP Accept Header value from the shortened name. If the shortened name is not recognized,
            <c>null</c> is returned.
            </summary>
        </member>
        <member name="T:Elastic.Transport.UrlFormatter">
            <summary>
            A formatter that can utilize <see cref="T:Elastic.Transport.ITransportConfiguration" /> to resolve <see cref="T:Elastic.Transport.IUrlParameter" />'s passed
            as format arguments. It also handles known string representations for e.g bool/Enums/IEnumerable.
            </summary>
        </member>
        <member name="M:Elastic.Transport.UrlFormatter.#ctor(Elastic.Transport.ITransportConfiguration)">
            <summary>
            A formatter that can utilize <see cref="T:Elastic.Transport.ITransportConfiguration" /> to resolve <see cref="T:Elastic.Transport.IUrlParameter" />'s passed
            as format arguments. It also handles known string representations for e.g bool/Enums/IEnumerable.
            </summary>
        </member>
        <member name="M:Elastic.Transport.UrlFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary><param name="format">A format string containing formatting specifications.</param><param name="arg">An object to format.</param><param name="formatProvider">An object that supplies format information about the current instance.</param><returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>&gt;
        </member>
        <member name="M:Elastic.Transport.UrlFormatter.GetFormat(System.Type)">
            <summary>Returns an object that provides formatting services for the specified type.</summary><param name="formatType">An object that specifies the type of format object to return.</param><returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Elastic.Transport.UrlFormatter.CreateString(System.Object)">
            <summary> Creates a query string representation for <paramref name="value" /> </summary>
        </member>
        <member name="M:Elastic.Transport.UrlFormatter.CreateString(System.Object,Elastic.Transport.ITransportConfiguration)">
            <summary> Creates a query string representation for <paramref name="value" /> </summary>
        </member>
        <member name="T:Elastic.Transport.CustomResponseBuilder">
            <summary>
            Allows callers of <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" /> to override completely
            how `TResponse` should be deserialized to a `TResponse` that implements <see cref="T:Elastic.Transport.ITransportResponse" /> instance.
            <para>Expert setting only</para>
            </summary>
        </member>
        <member name="M:Elastic.Transport.CustomResponseBuilder.DeserializeResponse(Elastic.Transport.Serializer,Elastic.Transport.IApiCallDetails,System.IO.Stream)">
            <summary> Custom routine that deserializes from <paramref name="stream" /> to an instance o <see cref="T:Elastic.Transport.ITransportResponse" /> </summary>
        </member>
        <member name="M:Elastic.Transport.CustomResponseBuilder.DeserializeResponseAsync(Elastic.Transport.Serializer,Elastic.Transport.IApiCallDetails,System.IO.Stream,System.Threading.CancellationToken)">
            <summary> Custom routine that deserializes from <paramref name="stream" /> to an instance o <see cref="T:Elastic.Transport.ITransportResponse" /> </summary>
        </member>
        <member name="T:Elastic.Transport.DynamicDictionary">
            <summary>
            A dictionary that supports dynamic access.
            </summary>
        </member>
        <member name="P:Elastic.Transport.DynamicDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Elastic.Transport.DynamicDictionary" />.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.ToDictionary">
            <summary>
            Creates a new instance of Dictionary{String,Object} using the keys and underlying object values of this DynamicDictionary instance's key values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elastic.Transport.DynamicDictionary.Empty">
            <summary>
            Returns an empty dynamic dictionary.
            </summary>
            <value>A <see cref="T:Elastic.Transport.DynamicDictionary" /> instance.</value>
        </member>
        <member name="P:Elastic.Transport.DynamicDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Elastic.Transport.DynamicDictionary" /> is read-only.
            </summary>
            <returns>Always returns <see langword="false" />.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Get``1(System.String)">
            <summary>
            Traverses data using path notation.
            <para><c>e.g some.deep.nested.json.path</c></para>
            <para></para>
            <para> A special lookup is available for ANY key <c>_arbitrary_key_</c> <c>e.g some.deep._arbitrary_key_.json.path</c> which will traverse into the first key</para>
            <para> If <c>_arbitrary_key_</c> is the last value it will return the key name</para>
            <para></para>
            </summary>
            <param name="path">path into the stored object, keys are separated with a dot and the last key is returned as T</param>
            <typeparam name="T"></typeparam>
            <returns>T or default</returns>
        </member>
        <member name="P:Elastic.Transport.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Elastic.Transport.DynamicValue" /> with the specified name.
            </summary>
            <value>A <see cref="T:Elastic.Transport.DynamicValue" /> instance containing a value.</value>
        </member>
        <member name="P:Elastic.Transport.DynamicDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:Elastic.Transport.DynamicDictionary" />.</returns>
        </member>
        <member name="P:Elastic.Transport.DynamicDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:Elastic.Transport.DynamicDictionary" />.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.DynamicValue})">
            <summary>
            Adds an item to the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Elastic.Transport.DynamicDictionary" />.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.DynamicValue})">
            <summary>
            Determines whether the <see cref="T:Elastic.Transport.DynamicDictionary" /> contains a specific value.
            </summary>
            <returns>
            <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:Elastic.Transport.DynamicDictionary" />; otherwise, <see langword="false" />.
            </returns>
            <param name="item">The object to locate in the <see cref="T:Elastic.Transport.DynamicDictionary" />.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.DynamicValue}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Elastic.Transport.DynamicDictionary" /> to an <see cref="T:System.Array" />, starting at a particular
            <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the
            <see cref="T:Elastic.Transport.DynamicDictionary" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,Elastic.Transport.DynamicValue})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <returns>
            <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:Elastic.Transport.DynamicDictionary" />; otherwise,
            <see langword="false" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:Elastic.Transport.DynamicDictionary" />.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Add(System.String,Elastic.Transport.DynamicValue)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Elastic.Transport.DynamicDictionary" /> contains an element with the specified key.
            </summary>
            <returns>
            <see langword="true" /> if the <see cref="T:Elastic.Transport.DynamicDictionary" /> contains an element with the key; otherwise, <see langword="false" />.
            </returns>
            <param name="key">The key to locate in the <see cref="T:Elastic.Transport.DynamicDictionary" />.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <returns><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.TryGetValue(System.String,Elastic.Transport.DynamicValue@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            <see langword="true" /> if the <see cref="T:Elastic.Transport.DynamicDictionary" /> contains an element with the specified key; otherwise,
            <see langword="false" />.
            </returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default
            value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator" /> that contains dynamic member names.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Elastic#Transport#DynamicValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Equals(Elastic.Transport.DynamicDictionary)">
            <summary>
            Indicates whether the current <see cref="T:Elastic.Transport.DynamicDictionary" /> is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true" /> if the current instance is equal to the <paramref name="other" /> parameter; otherwise,
            <see langword="false" />.
            </returns>
            <param name="other">An <see cref="T:Elastic.Transport.DynamicDictionary" /> instance to compare with this instance.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a dynamic dictionary from an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IDictionary`2" /> instance, that the dynamic dictionary should be created from.</param>
            <returns>An <see cref="T:Elastic.Transport.DynamicDictionary" /> instance.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Create(System.Text.Json.JsonElement)">
            <summary>
            Creates a dynamic dictionary from an <see cref="T:System.Text.Json.JsonElement" /> instance.
            </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" />
            class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language
            determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <param name="binder">
            Provides information about the object that called the dynamic operation. The binder.Name property provides the name of
            the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is
            an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The
            binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="value">
            The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an
            instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".
            </param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" />
            class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language
            determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
            <param name="binder">
            Provides information about the object that called the dynamic operation. The binder.Name property provides the name of
            the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement,
            where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns
            "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="result">
            The result of the get operation. For example, if the method is called for a property, you can assign the property
            value to <paramref name="result" />.
            </param>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains dynamic member names.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Elastic.Transport.DynamicDictionary" />.
            </summary>
            <returns> A hash code for this <see cref="T:Elastic.Transport.DynamicDictionary" />, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Elastic.Transport.DynamicResponse">
             <summary>
             A type of response that makes it easier to work with responses in an untyped fashion.
            
             <para>It exposes the body as <see cref="T:Elastic.Transport.DynamicDictionary" /> which is `dynamic` through <see cref="T:System.Dynamic.DynamicObject" /></para>
             <para></para>
             <para>Since `dynamic` can be scary in .NET this response also exposes a safe traversal mechanism under
             <see cref="M:Elastic.Transport.DynamicResponse.Get``1(System.String)" /> which support an xpath'esque syntax to fish for values in the returned json.
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicResponse.#ctor">
            <summary>
             A type of response that makes it easier to work with responses in an untyped fashion.
            
             <para>It exposes the body as <see cref="T:Elastic.Transport.DynamicDictionary" /> which is `dynamic` through <see cref="T:System.Dynamic.DynamicObject" /></para>
             <para></para>
             <para>Since `dynamic` can be scary in .NET this response also exposes a safe traversal mechanism under
             <see cref="M:Elastic.Transport.DynamicResponse.Get``1(System.String)" /> which support an xpath'esque syntax to fish for values in the returned json.
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicResponse.#ctor(Elastic.Transport.DynamicDictionary)">
            <summary>
             A type of response that makes it easier to work with responses in an untyped fashion.
            
             <para>It exposes the body as <see cref="T:Elastic.Transport.DynamicDictionary" /> which is `dynamic` through <see cref="T:System.Dynamic.DynamicObject" /></para>
             <para></para>
             <para>Since `dynamic` can be scary in .NET this response also exposes a safe traversal mechanism under
             <see cref="M:Elastic.Transport.DynamicResponse.Get``1(System.String)" /> which support an xpath'esque syntax to fish for values in the returned json.
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicResponse.Get``1(System.String)">
            <summary>
            Traverses data using path notation.
            <para><c>e.g some.deep.nested.json.path</c></para>
            <para> A special lookup is available for ANY key using <c>_arbitrary_key_</c> <c>e.g some.deep._arbitrary_key_.json.path</c> which will traverse into the first key</para>
            </summary>
            <param name="path">path into the stored object, keys are separated with a dot and the last key is returned as T</param>
            <typeparam name="T"></typeparam>
            <returns>T or default</returns>
        </member>
        <member name="T:Elastic.Transport.DynamicValue">
             <summary>
             Represents a value returned by <see cref="T:Elastic.Transport.DynamicDictionary" />.
            
             <para>This is `dynamic` through <see cref="T:System.Dynamic.DynamicObject" /> and supports direct casting various valuetypes</para>
             <para>Since `dynamic` can be scary in .NET this response also exposes a safe traversal mechanism under
             <see cref="M:Elastic.Transport.DynamicValue.Get``1(System.String)" /> which support an xpath'esque syntax to fish for values in the returned json.
             </para>
             </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Elastic.Transport.DynamicValue" /> class.
            </summary>
            <param name="value">The value to store in the instance</param>
        </member>
        <member name="P:Elastic.Transport.DynamicValue.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks><see langword="null" /> is considered as not being a value.</remarks>
        </member>
        <member name="P:Elastic.Transport.DynamicValue.Item(System.String)">
            <summary>
            Try to get key <paramref name="name" /> from the object this instance references
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.Get``1(System.String)">
            <summary>
            Traverses data using path notation.
            <para><c>e.g some.deep.nested.json.path</c></para>
            <para></para>
            <para> A special lookup is available for ANY key <c>_arbitrary_key_</c> <c>e.g some.deep._arbitrary_key_.json.path</c> which will traverse into the first key</para>
            <para> If <c>_arbitrary_key_</c> is the last value it will return the key name</para>
            <para></para>
            </summary>
            <param name="path">path into the stored object, keys are separated with a dot and the last key is returned as T</param>
            <typeparam name="T"></typeparam>
            <returns>T or default</returns>
        </member>
        <member name="P:Elastic.Transport.DynamicValue.NullValue">
            <summary>
            A static reusable reference to a <see cref="T:Elastic.Transport.DynamicValue" /> holding `null` that is still safe to traverse
            on through <see cref="M:Elastic.Transport.DynamicValue.Get``1(System.String)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.SelfOrNew(System.Object)">
            <summary>
            Wrap <paramref name="v" /> as a <see cref="T:Elastic.Transport.DynamicValue" /> if <paramref name="v" /> is not wrapped already
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Elastic.Transport.DynamicValue.Value">
            <summary>
            Gets the inner value
            </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode" /> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting
            information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting
            information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting
            information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting
            information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting
            information.
            </summary>
            <returns>
            A <see cref="T:System.String" /> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an
            equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this
            instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting
            information.
            </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.ToDictionary">
            <summary>
            Returns the value as a dictionary if the current value represents an object.
            Otherwise returns null.
            </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.Equals(Elastic.Transport.DynamicValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="compareValue" /> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="compareValue">An <see cref="T:Elastic.Transport.DynamicValue" /> to compare with this instance.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <see cref="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
        </member>
        <member name="M:Elastic.Transport.DynamicValue.Default``1(``0)">
            <summary>
            Returns a default value if Value is null
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.TryParse``1(``0)">
            <summary>
            Attempts to convert the value to type of T, failing to do so will return the defaultValue.
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Elastic.Transport.DynamicValue" />; otherwise,
            <c>false</c>.
            </returns>
            <param name="compareValue">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Elastic.Transport.DynamicValue" />.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override
            this method to specify dynamic behavior for operations such as addition and multiplication.
            </summary>
            <returns>
            <c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of
            the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <param name="binder">
            Provides information about the binary operation. The binder.Operation property returns an
            <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the sum = first + second statement, where first and second
            are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.
            </param>
            <param name="arg">
            The right operand for the binary operation. For example, for the sum = first + second statement, where first and second
            are derived from the DynamicObject class, <paramref name="arg" /> is equal to second.
            </param>
            <param name="result">The result of the binary operation.</param>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can
            override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <returns>
            <c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of
            the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <param name="binder">
            Provides information about the conversion operation. The binder.Type property provides the type to which the object
            must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where
            sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Type returns the
            <see cref="T:System.String" /> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns
            true for explicit conversion and false for implicit conversion.
            </param>
            <param name="result">The result of the type conversion operation.</param>
        </member>
        <member name="T:Elastic.Transport.ApiCallDetails">
            <summary> Details about the API call.</summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.AuditTrail">
            <summary>
            An audit trail of requests made to nodes within the cluster.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.ThreadPoolStats">
            <summary>
            Thread pool thread statistics collected when making a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.TcpStats">
            <summary>
            Active TCP connection statistics collected when making a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.DebugInformation">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.HttpMethod">
            <summary>
            The HTTP method used by the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.HttpStatusCode">
            <summary> The HTTP status code of the response.</summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.OriginalException">
            <summary>
            If <see cref="P:Elastic.Transport.IApiCallDetails.Success" /> is <c>false</c>, this will hold the original exception.
            This will be the originating CLR exception in most cases.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.RequestBodyInBytes">
            <summary>
            The request body bytes.
            <para>NOTE: Only set when disable direct streaming is set for the request.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.ResponseBodyInBytes">
            <summary>
            The request body bytes.
            <para>NOTE: Only set when disable direct streaming is set for the request.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.ResponseMimeType">
            <summary>The MIME type of the response.</summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.Success">
            <summary>
            The response status code is in the 200 range or is in the allowed list of status codes set on the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.SuccessOrKnownError">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.Uri">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.ConnectionConfiguration">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.ParsedHeaders">
            <summary>
            A dictionary of the headers parsed from the HTTP response.
            When no headers have been configured for parsing, or no matching headers were found,
            this will be null.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ApiCallDetails.ErrorResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elastic.Transport.ApiCallDetails.ToString">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="T:Elastic.Transport.IApiCallDetails">
            <summary> Details about the API call.</summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.AuditTrail">
            <summary>
            An audit trail of requests made to nodes within the cluster.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.ThreadPoolStats">
            <summary>
            Thread pool thread statistics collected when making a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.TcpStats">
            <summary>
            Active TCP connection statistics collected when making a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.DebugInformation">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.ConnectionConfiguration">
            <summary>
            Reference to the connection configuration that yielded this response.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.HttpMethod">
            <summary>
            The HTTP method used by the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.HttpStatusCode">
            <summary> The HTTP status code of the response.</summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.OriginalException">
            <summary>
            If <see cref="P:Elastic.Transport.IApiCallDetails.Success" /> is <c>false</c>, this will hold the original exception.
            This will be the originating CLR exception in most cases.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.ParsedHeaders">
            <summary>
            A dictionary of the headers parsed from the HTTP response.
            When no headers have been configured for parsing, or no matching headers were found,
            this will be null.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.RequestBodyInBytes">
            <summary>
            The request body bytes.
            <para>NOTE: Only set when disable direct streaming is set for the request.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.ResponseBodyInBytes">
            <summary>
            The response body bytes.
            <para>NOTE: Only set when disable direct streaming is set for the request.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.ResponseMimeType">
            <summary>The MIME type of the response.</summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.Success">
            <summary>
            The response status code is in the 200 range or is in the allowed list of status codes set on the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError">
            <summary>
            The response is successful or has a response code between 400-599, the call should not be retried.
            Only for 502, 503 and 504 will this return false;
            </summary>
        </member>
        <member name="P:Elastic.Transport.IApiCallDetails.Uri">
            <summary>
            The <see cref="P:Elastic.Transport.IApiCallDetails.Uri" /> from the request.
            </summary>
        </member>
        <member name="T:Elastic.Transport.ErrorResponse">
            <summary>
            Base class for types representing client specific errors. This may be provided by clients to be used for deserialisation of the HTTP body for non-success status codes.
            </summary>
        </member>
        <member name="M:Elastic.Transport.ErrorResponse.HasError">
            <summary>
            May be called by transport to establish whether the instance represents a valid, complete error.
            <para>This may not always be the case if the error is partially deserialised on the response.</para>
            </summary>
        </member>
        <member name="T:Elastic.Transport.ITransportResponse">
            <summary>
            The minimum interface which custom responses should implement.
            </summary>
        </member>
        <member name="P:Elastic.Transport.ITransportResponse.ApiCall">
            <summary>
            <see cref="T:Elastic.Transport.ITransport`1" /> sets the <see cref="T:Elastic.Transport.IApiCallDetails" /> diagnostic information about the request and response.
            </summary>
        </member>
        <member name="T:Elastic.Transport.ResponseStatics">
            <summary>
            Creates human readable debug strings based on <see cref="T:Elastic.Transport.IApiCallDetails" /> so that
            its clear what exactly transpired during a call into <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.ResponseStatics.DebugInformationBuilder(Elastic.Transport.IApiCallDetails,System.Text.StringBuilder)">
            <summary>
            Creates human readable debug strings based on <see cref="T:Elastic.Transport.IApiCallDetails" /> so that
            its clear what exactly transpired during a call into <see cref="M:Elastic.Transport.ITransport.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)" />
            </summary>
        </member>
        <member name="M:Elastic.Transport.ResponseStatics.DebugAuditTrailExceptions(System.Collections.Generic.IReadOnlyCollection{Elastic.Transport.Diagnostics.Auditing.Audit},System.Text.StringBuilder)">
            <summary>
            Write the exceptions recorded in <paramref name="auditTrail" /> to <paramref name="sb" /> in
            a debuggable and human readable string
            </summary>
        </member>
        <member name="M:Elastic.Transport.ResponseStatics.DebugAuditTrail(System.Collections.Generic.IReadOnlyCollection{Elastic.Transport.Diagnostics.Auditing.Audit},System.Text.StringBuilder)">
            <summary>
            Write the events recorded in <paramref name="auditTrail" /> to <paramref name="sb" /> in
            a debuggable and human readable string
            </summary>
        </member>
        <member name="T:Elastic.Transport.BytesResponse">
            <summary>
            A response that exposes the response <see cref="P:Elastic.Transport.TransportResponseBase`1.Body" /> as byte array
            </summary>
        </member>
        <member name="M:Elastic.Transport.BytesResponse.#ctor">
            <summary>
            A response that exposes the response <see cref="P:Elastic.Transport.TransportResponseBase`1.Body" /> as byte array
            </summary>
        </member>
        <member name="M:Elastic.Transport.BytesResponse.#ctor(System.Byte[])">
            <summary>
            A response that exposes the response <see cref="P:Elastic.Transport.TransportResponseBase`1.Body" /> as byte array
            </summary>
        </member>
        <member name="T:Elastic.Transport.StringResponse">
            <summary>
            A response that exposes the response <see cref="P:Elastic.Transport.TransportResponseBase`1.Body" /> as <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StringResponse.#ctor">
            <summary>
            A response that exposes the response <see cref="P:Elastic.Transport.TransportResponseBase`1.Body" /> as <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Elastic.Transport.StringResponse.#ctor(System.String)">
            <summary>
            A response that exposes the response <see cref="P:Elastic.Transport.TransportResponseBase`1.Body" /> as <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="T:Elastic.Transport.VoidResponse">
            <summary>
            A special response that omits reading the response from the server after reading the headers.
            </summary>
        </member>
        <member name="M:Elastic.Transport.VoidResponse.#ctor">
            <summary>
            A special response that omits reading the response from the server after reading the headers.
            </summary>
        </member>
        <member name="P:Elastic.Transport.VoidResponse.Default">
            <summary>
            A static <see cref="T:Elastic.Transport.VoidResponse" /> instance that can be reused.
            </summary>
        </member>
        <member name="T:Elastic.Transport.VoidResponse.VoidBody">
            <summary>
            A class that represents the absence of having read the servers response to completion.
            </summary>
        </member>
        <member name="T:Elastic.Transport.TransportResponseBase`1">
            <summary>
            A response from an Elastic product including details about the request/response life cycle. Base class for the built in low level response
            types, <see cref="T:Elastic.Transport.StringResponse" />, <see cref="T:Elastic.Transport.BytesResponse" />, <see cref="T:Elastic.Transport.DynamicResponse" /> and <see cref="T:Elastic.Transport.VoidResponse" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase`1.Body">
            <summary> The deserialized body return by the product </summary>
        </member>
        <member name="T:Elastic.Transport.TransportResponseBase">
            <summary>
            A response as returned by <see cref="T:Elastic.Transport.ITransport`1" /> including details about the request/response life cycle
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.ApiCall">
            <summary>
            <see cref="T:Elastic.Transport.ITransport`1" /> sets the <see cref="T:Elastic.Transport.IApiCallDetails" /> diagnostic information about the request and response.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.TcpStats">
            <summary>
            Active TCP connection statistics collected when making a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.DebugInformation">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.HttpMethod">
            <summary>
            The HTTP method used by the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.AuditTrail">
            <summary>
            An audit trail of requests made to nodes within the cluster.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.ThreadPoolStats">
            <summary>
            Thread pool thread statistics collected when making a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.SuccessOrKnownError">
            <summary>
            The response is successful or has a response code between 400-599, the call should not be retried.
            Only for 502, 503 and 504 will this return false;
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.HttpStatusCode">
            <summary> The HTTP status code of the response.</summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.Success">
            <summary>
            The response status code is in the 200 range or is in the allowed list of status codes set on the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.OriginalException">
            <summary>
            If <see cref="P:Elastic.Transport.IApiCallDetails.Success" /> is <c>false</c>, this will hold the original exception.
            This will be the originating CLR exception in most cases.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.ResponseMimeType">
            <summary>The MIME type of the response.</summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.Uri">
            <summary>
            The <see cref="P:Elastic.Transport.IApiCallDetails.Uri" /> from the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.ConnectionConfiguration">
            <summary>
            Reference to the connection configuration that yielded this response.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.ResponseBodyInBytes">
            <summary>
            The response body bytes.
            <para>NOTE: Only set when disable direct streaming is set for the request.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.RequestBodyInBytes">
            <summary>
            The request body bytes.
            <para>NOTE: Only set when disable direct streaming is set for the request.</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportResponseBase.ParsedHeaders">
            <summary>
            A dictionary of the headers parsed from the HTTP response.
            When no headers have been configured for parsing, or no matching headers were found,
            this will be null.
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportResponseBase.ToString">
            <summary>
            A human readable string representation of what happened during this request for both successful and failed requests.
            </summary>
        </member>
        <member name="T:Elastic.Transport.Transport">
            <summary>
            Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
            different nodes
            </summary>
        </member>
        <member name="M:Elastic.Transport.Transport.#ctor(Elastic.Transport.TransportConfiguration)">
            <summary>
                Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
                different
                nodes
            </summary>
            <param name="configurationValues">The connection settings to use for this transport</param>
        </member>
        <member name="M:Elastic.Transport.Transport.#ctor(Elastic.Transport.TransportConfiguration,Elastic.Transport.IDateTimeProvider,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
                Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
                different
                nodes
            </summary>
            <param name="configurationValues">The connection settings to use for this transport</param>
            <param name="dateTimeProvider">The date time proved to use, safe to pass null to use the default</param>
            <param name="memoryStreamFactory">The memory stream provider to use, safe to pass null to use the default</param>
        </member>
        <member name="T:Elastic.Transport.Transport`1">
            <summary>
            Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
            different nodes
            </summary>
        </member>
        <member name="M:Elastic.Transport.Transport`1.#ctor(`0)">
            <summary>
                Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
                different
                nodes
            </summary>
            <param name="configurationValues">The connection settings to use for this transport</param>
        </member>
        <member name="M:Elastic.Transport.Transport`1.#ctor(`0,Elastic.Transport.IDateTimeProvider,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
                Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
                different
                nodes
            </summary>
            <param name="configurationValues">The connection settings to use for this transport</param>
            <param name="dateTimeProvider">The date time proved to use, safe to pass null to use the default</param>
            <param name="memoryStreamFactory">The memory stream provider to use, safe to pass null to use the default</param>
        </member>
        <member name="M:Elastic.Transport.Transport`1.#ctor(`0,Elastic.Transport.IRequestPipelineFactory{`0},Elastic.Transport.IDateTimeProvider,Elastic.Transport.IMemoryStreamFactory)">
            <summary>
                Transport coordinates the client requests over the node pool nodes and is in charge of falling over on
                different
                nodes
            </summary>
            <param name="configurationValues">The connection settings to use for this transport</param>
            <param name="pipelineProvider">In charge of create a new pipeline, safe to pass null to use the default</param>
            <param name="dateTimeProvider">The date time proved to use, safe to pass null to use the default</param>
            <param name="memoryStreamFactory">The memory stream provider to use, safe to pass null to use the default</param>
        </member>
        <member name="P:Elastic.Transport.Transport`1.Settings">
            <summary>
            The <see cref="T:Elastic.Transport.ITransportConfiguration" /> in use by this transport instance
            </summary>
        </member>
        <member name="M:Elastic.Transport.Transport`1.Request``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)">
            <summary>
            Perform a request into the products cluster using <see cref="T:Elastic.Transport.IRequestPipeline" />'s workflow.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Transport`1.RequestAsync``1(Elastic.Transport.HttpMethod,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>
            Perform a request into the products cluster using <see cref="T:Elastic.Transport.IRequestPipeline" />'s workflow.
            </summary>
        </member>
        <member name="T:Elastic.Transport.TransportExtensions">
            <summary>
                Extends <see cref="T:Elastic.Transport.ITransport" /> with some convenience methods to make it easier to perform specific requests
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.Get``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.IRequestParameters)">
            <summary>Perform a GET request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.GetAsync``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>Perform a GET request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.Head``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.IRequestParameters)">
            <summary>Perform a HEAD request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.HeadAsync``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>Perform a HEAD request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.Head(Elastic.Transport.ITransport,System.String,Elastic.Transport.IRequestParameters)">
            <summary>Perform a HEAD request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.HeadAsync(Elastic.Transport.ITransport,System.String,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>Perform a HEAD request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.Post``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)">
            <summary>Perform a POST request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.PostAsync``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>Perform a POST request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.Put``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)">
            <summary>Perform a PUT request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.PutAsync``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>Perform a PUT request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.Delete``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters)">
            <summary>Perform a DELETE request</summary>
        </member>
        <member name="M:Elastic.Transport.TransportExtensions.DeleteAsync``1(Elastic.Transport.ITransport,System.String,Elastic.Transport.PostData,Elastic.Transport.IRequestParameters,System.Threading.CancellationToken)">
            <summary>Perform a DELETE request</summary>
        </member>
        <member name="M:Elastic.Transport.RequestPipeline`1.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Elastic.Transport.HttpTransportClient.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Elastic.Transport.HttpWebRequestTransportClient.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Elastic.Transport.InMemoryConnection.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Elastic.Transport.HeadersList.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#Accept">
            <summary>
            Force a different Accept header on the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#AllowedStatusCodes">
            <summary>
            Treat the following statuses (on top of the 200 range) NOT as error.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#AuthenticationHeader">
            <summary>
            Provide an authentication header override for this request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#ClientCertificates">
            <summary>
            Use the following client certificates to authenticate this single request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#ContentType">
            <summary>
            Force a different Content-Type header on the request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#DisableDirectStreaming">
            <summary>
            Whether to buffer the request and response bytes for the call
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#DisablePing">
            <summary>
            Under no circumstance do a ping before the actual call. If a node was previously dead a small ping with
            low connect timeout will be tried first in normal circumstances
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#DisableSniff">
            <summary>
            Forces no sniffing to occur on the request no matter what configuration is in place
            globally
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#EnableHttpPipelining">
            <summary>
            Whether or not this request should be pipelined. http://en.wikipedia.org/wiki/HTTP_pipelining defaults to true
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#ForceNode">
            <summary>
            This will force the operation on the specified node, this will bypass any configured connection pool and will no retry.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#MaxRetries">
            <summary>
            This will override whatever is set on the connection configuration or whatever default the connectionpool has.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#OpaqueId">
            <summary>
            Associate an Id with this user-initiated task, such that it can be located in the cluster task list.
            Valid only for Elasticsearch 6.2.0+
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#PingTimeout">
            <summary>
            The ping timeout for this specific request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#RequestTimeout">
            <summary>
            The timeout for this specific request, takes precedence over the global timeout settings
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#RunAs">
            <summary>
            Submit the request on behalf in the context of a different shield user
            <pre />https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#ThrowExceptions">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#TransferEncodingChunked">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#Headers">
            <summary>
            Try to send these headers for this single request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#EnableTcpStats">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#EnableThreadPoolStats">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#ResponseHeadersToParse">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#ParseAllHeaders">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.RequestConfigurationDescriptor.Elastic#Transport#IRequestConfiguration#RequestMetaData">
            <summary>
            Holds additional meta data about the request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#Authentication">
            <summary>
            An implementation of <see cref="T:Elastic.Transport.IAuthenticationHeader" /> describing what http header to use to authenticate with the product.
            <para><see cref="T:Elastic.Transport.BasicAuthentication" /> for basic authentication</para>
            <para><see cref="T:Elastic.Transport.ApiKey" /> for simple secret token</para>
            <para><see cref="T:Elastic.Transport.Base64ApiKey" /> for Elastic Cloud style encoded api keys</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#BootstrapLock">
            <summary> Provides a semaphoreslim to transport implementations that need to limit access to a resource</summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ClientCertificates">
            <summary>
            Use the following certificates to authenticate all HTTP requests. You can also set them on individual
            request using <see cref="P:Elastic.Transport.RequestConfiguration.ClientCertificates" />
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#Connection">
            <summary> The connection abstraction behind which all actual IO happens</summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ProductRegistration">
            <summary>
            Returns information about the current product making use of the transport.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ConnectionLimit">
            <summary>
            Limits the number of concurrent connections that can be opened to an endpoint. Defaults to 80 (see
            <see cref="F:Elastic.Transport.TransportConfiguration.DefaultConnectionLimit" />).
            <para>
            For Desktop CLR, this setting applies to the DefaultConnectionLimit property on the  ServicePointManager object when creating
            ServicePoint objects, affecting the default <see cref="T:Elastic.Transport.ITransportClient" /> implementation.
            </para>
            <para>
            For Core CLR, this setting applies to the MaxConnectionsPerServer property on the HttpClientHandler instances used by the HttpClient
            inside the default <see cref="T:Elastic.Transport.ITransportClient" /> implementation
            </para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#NodePool">
            <summary> The connection pool to use when talking with Elasticsearch </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#DeadTimeout">
            <summary>
            The time to put dead nodes out of rotation (this will be multiplied by the number of times they've been dead)
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#DisableAutomaticProxyDetection">
            <summary>
            Disabled proxy detection on the webrequest, in some cases this may speed up the first connection
            your appdomain makes, in other cases it will actually increase the time for the first connection.
            No silver bullet! use with care!
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#DisableDirectStreaming">
            <summary>
            When set to true will disable (de)serializing directly to the request and response stream and return a byte[]
            copy of the raw request and response. Defaults to false
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#DisablePings">
            <summary>
            This signals that we do not want to send initial pings to unknown/previously dead nodes
            and just send the call straightaway
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#EnableHttpCompression">
            <summary>
            Enable gzip compressed requests and responses
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#Headers">
            <summary>
            Try to send these headers for every request
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#HttpPipeliningEnabled">
            <summary>
            Whether HTTP pipelining is enabled. The default is <c>true</c>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#KeepAliveInterval">
            <summary>
            KeepAliveInterval - specifies the interval, in milliseconds, between
            when successive keep-alive packets are sent if no acknowledgement is
            received.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#KeepAliveTime">
            <summary>
            KeepAliveTime - specifies the timeout, in milliseconds, with no
            activity until the first keep-alive packet is sent.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#MaxDeadTimeout">
            <summary>
            The maximum amount of time a node is allowed to marked dead
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#MaxRetries">
            <summary>
            When a retryable exception occurs or status code is returned this controls the maximum
            amount of times we should retry the call to Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#MaxRetryTimeout">
            <summary>
            Limits the total runtime including retries separately from <see cref="P:Elastic.Transport.ITransportConfiguration.RequestTimeout" />
            <pre>
            When not specified defaults to <see cref="P:Elastic.Transport.ITransportConfiguration.RequestTimeout" /> which itself defaults to 60 seconds
            </pre>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#MemoryStreamFactory">
            <summary> Provides a memory stream factory</summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#NodePredicate">
            <summary>
            Register a predicate to select which nodes that you want to execute API calls on. Note that sniffing requests omit this predicate and
            always execute on all nodes.
            When using an <see cref="P:Elastic.Transport.ITransportConfiguration.NodePool" /> implementation that supports reseeding of nodes, this will default to omitting master only
            node from regular API calls.
            When using static or single node connection pooling it is assumed the list of node you instantiate the client with should be taken
            verbatim.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#OnRequestCompleted">
            <summary>
            Allows you to register a callback every time a an API call is returned
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#OnRequestDataCreated">
            <summary>
            An action to run when the <see cref="T:Elastic.Transport.RequestData" /> for a request has been
            created.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#PingTimeout">
            <summary>
            The timeout in milliseconds to use for ping requests, which are issued to determine whether a node is alive
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ProxyAddress">
            <summary>
            When set will force all connections through this proxy
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ProxyPassword">
            <summary>
            The password for the proxy, when configured
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ProxyUsername">
            <summary>
            The username for the proxy, when configured
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#QueryStringParameters">
            <summary>
            Append these query string parameters automatically to every request
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#RequestResponseSerializer">
            <summary>The serializer to use to serialize requests and deserialize responses</summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#RequestTimeout">
            <summary>
            The timeout in milliseconds for each request to Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#DnsRefreshTimeout">
            <summary>
            DnsRefreshTimeout for the connections. Defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#CertificateFingerprint">
            <summary>
            During development, the server certificate fingerprint may be provided. When present, it is used to validate the
            certificate sent by the server. The fingerprint is expected to be the hex string representing the SHA256 public key fingerprint.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ServerCertificateValidationCallback">
            <summary>
            Register a ServerCertificateValidationCallback per request
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#SkipDeserializationForStatusCodes">
            <summary>
            Configure the client to skip deserialization of certain status codes e.g: you run Elasticsearch behind a proxy that returns an unexpected
            json format
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#SniffInformationLifeSpan">
            <summary>
            Force a new sniff for the cluster when the cluster state information is older than
            the specified timespan
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#SniffsOnConnectionFault">
            <summary>
            Force a new sniff for the cluster state every time a connection dies
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#SniffsOnStartup">
            <summary>
            Sniff the cluster state immediately on startup
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ThrowExceptions">
            <summary>
            Instead of following a c/go like error checking on response.IsValid do throw an exception (except when <see cref="P:Elastic.Transport.IApiCallDetails.SuccessOrKnownError" /> is false)
            on the client when a call resulted in an exception on either the client or the Elasticsearch server.
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions, etc...</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#UrlFormatter">
            <summary>
            Access to <see cref="P:Elastic.Transport.ITransportConfiguration.UrlFormatter" /> instance that is aware of this <see cref="T:Elastic.Transport.ITransportConfiguration" /> instance
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#UserAgent">
            <summary>
            The user agent string to send with requests. Useful for debugging purposes to understand client and framework
            versions that initiate requests to Elasticsearch
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#StatusCodeToResponseSuccess">
            <summary>
            Allow you to override the status code inspection that sets <see cref="P:Elastic.Transport.IApiCallDetails.Success" />
            <para>
            Defaults to validating the statusCode is greater or equal to 200 and less then 300
            </para>
            <para>
            When the request is using <see cref="F:Elastic.Transport.HttpMethod.HEAD" /> 404 is valid out of the box as well
            </para>
            <para></para>
            <para>NOTE: if a request specifies <see cref="P:Elastic.Transport.IRequestConfiguration.AllowedStatusCodes" /> this takes precedence</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#TransferEncodingChunked">
            <summary>
            Whether the request should be sent with chunked Transfer-Encoding.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#EnableTcpStats">
            <summary>
            Enable statistics about TCP connections to be collected when making a request
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#EnableThreadPoolStats">
            <summary>
            Enable statistics about thread pools to be collected when making a request
            </summary>
        </member>
        <member name="M:Elastic.Transport.TransportConfigurationBase`1.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#PrettyJson">
            <summary>
            Provide hints to serializer and products to produce pretty, non minified json.
            <para>Note: this is not a guarantee you will always get prettified json</para>
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ParseAllHeaders">
            <summary>
            When enabled, all headers from the HTTP response will be included in the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#ResponseHeadersToParse">
            <summary>
            A <see cref="T:Elastic.Transport.HeadersList" /> containing the names of all HTTP response headers to attempt to parse and
            included on the <see cref="T:Elastic.Transport.IApiCallDetails" />.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#MetaHeaderProvider">
            <summary>
            Produces the client meta header for a request.
            </summary>
        </member>
        <member name="P:Elastic.Transport.TransportConfigurationBase`1.Elastic#Transport#ITransportConfiguration#DisableMetaHeader">
            <summary>
            Disables the meta header which is included on all requests by default. This header contains lightweight information 
            about the client and runtime.
            </summary>
        </member>
        <member name="M:Elastic.Transport.DynamicDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@Elastic#Transport#DynamicValue}}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Elastic.Transport.DynamicValue.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Elastic.Transport.Products.Elasticsearch.ElasticsearchResponseBase.Elastic#Transport#ITransportResponse#ApiCall">
            <summary>
            <see cref="T:Elastic.Transport.ITransport`1" /> sets the <see cref="T:Elastic.Transport.IApiCallDetails" /> diagnostic information about the request and response.
            </summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`1.System#IObserver{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#OnCompleted">
            <summary>Notifies the observer that the provider has finished sending push-based notifications.</summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`1.System#IObserver{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#OnError(System.Exception)">
            <summary>Notifies the observer that the provider has experienced an error condition.</summary><param name="error">An object that provides additional information about the error.</param>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`1.System#IObserver{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#OnNext(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>Provides the observer with new data.</summary><param name="value">The current notification information.</param>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`2.System#IObserver{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#OnCompleted">
            <summary>Notifies the observer that the provider has finished sending push-based notifications.</summary>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`2.System#IObserver{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#OnError(System.Exception)">
            <summary>Notifies the observer that the provider has experienced an error condition.</summary><param name="error">An object that provides additional information about the error.</param>
        </member>
        <member name="M:Elastic.Transport.Diagnostics.TypedDiagnosticObserverBase`2.System#IObserver{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#OnNext(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>Provides the observer with new data.</summary><param name="value">The current notification information.</param>
        </member>
    </members>
</doc>
